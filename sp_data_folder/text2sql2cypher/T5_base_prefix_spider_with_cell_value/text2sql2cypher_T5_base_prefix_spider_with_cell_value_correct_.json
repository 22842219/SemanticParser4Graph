[
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT count(*) FROM singer",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "pre_sql": "select count(*) from singer",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "question": "How many singers do we have?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT count(*) FROM singer",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "pre_sql": "select count(*) from singer",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "question": "What is the total number of singers?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "pre_sql": "select name, country, age from singer order by age desc",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "answers": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "pre_sql": "select name, country, age from singer order by age desc",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "answers": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "pre_sql": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "answers": [
            [
                34.5,
                25,
                43
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "pre_sql": "select song_name, song_release_year from singer order by age asc limit 1",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age ASC\nLIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "answers": [
            [
                "Love",
                "2016"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "pre_sql": "select song_name, song_release_year from singer order by age asc limit 1",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age ASC\nLIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "answers": [
            [
                "Love",
                "2016"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "pre_sql": "select distinct country from singer where age > 20",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "answers": [
            [
                "Netherlands"
            ],
            [
                "United States"
            ],
            [
                "France"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "pre_sql": "select distinct country from singer where age > 20",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "question": "What are  the different countries with singers above age 20?",
        "answers": [
            [
                "Netherlands"
            ],
            [
                "United States"
            ],
            [
                "France"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Country,count(*)",
        "pre_sql": "select country, count(*) from singer group by country",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Country,count(*)",
        "question": "Show all countries and the number of singers in each country.",
        "answers": [
            [
                "Netherlands",
                1
            ],
            [
                "United States",
                1
            ],
            [
                "France",
                4
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Country,count(*)",
        "pre_sql": "select country, count(*) from singer group by country",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Country,count(*)",
        "question": "How many singers are from each country?",
        "answers": [
            [
                "Netherlands",
                1
            ],
            [
                "United States",
                1
            ],
            [
                "France",
                4
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWITH avg(singer.Age) AS age\nMATCH (singer:`concert_singer.singer`)\nWHERE  singer.Age >  age \nRETURN singer.Song_Name",
        "pre_sql": "select song_name from singer where age > (select avg(age) from singer)",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWITH avg(singer.Age) AS age\nMATCH (singer:`concert_singer.singer`)\nWHERE  singer.Age >  age \nRETURN singer.Song_Name",
        "question": "List all song names by singers above the average age.",
        "answers": [
            [
                "You"
            ],
            [
                "Sun"
            ],
            [
                "Gentleman"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWITH avg(singer.Age) AS age\nMATCH (singer:`concert_singer.singer`)\nWHERE  singer.Age >  age \nRETURN singer.Song_Name",
        "pre_sql": "select song_name from singer where age > (select avg(age) from singer)",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWITH avg(singer.Age) AS age\nMATCH (singer:`concert_singer.singer`)\nWHERE  singer.Age >  age \nRETURN singer.Song_Name",
        "question": "What are all the song names by singers who are older than average?",
        "answers": [
            [
                "You"
            ],
            [
                "Sun"
            ],
            [
                "Gentleman"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.Capacity<=10000\nRETURN stadium.Location,stadium.Name",
        "pre_sql": "select location, name from stadium where capacity between 5000 and 10000",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.Capacity<=10000\nRETURN stadium.Location,stadium.Name",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "answers": []
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.Capacity<=10000\nRETURN stadium.Location,stadium.Name",
        "pre_sql": "select location, name from stadium where capacity between 5000 and 10000",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.Capacity<=10000\nRETURN stadium.Location,stadium.Name",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "answers": []
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "select avg(capacity) ,  max(capacity) from stadium",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "pre_sql": "select avg(capacity), max(capacity) from stadium",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "answers": [
            [
                10621.666666666666,
                52500
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "pre_sql": "select name, capacity from stadium order by average desc limit 1",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "answers": [
            [
                "Stark's Park",
                10104
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "pre_sql": "select name, capacity from stadium order by average desc limit 1",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "answers": [
            [
                "Stark's Park",
                10104
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "gold_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = '2014' OR concert.Year = '2015'\nRETURN count(*)",
        "pre_sql": "select count(*) from concert where year = 2014 or year = 2015",
        "pred_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = '2014' OR concert.Year = '2015'\nRETURN count(*)",
        "question": "How many concerts are there in year 2014 or 2015?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "gold_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = '2014' OR concert.Year = '2015'\nRETURN count(*)",
        "pre_sql": "select count(*) from concert where year = 2014 or year = 2015",
        "pred_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = '2014' OR concert.Year = '2015'\nRETURN count(*)",
        "question": "How many concerts occurred in 2014 or 2015?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "gold_sql2cypher": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nRETURN T2.Name,count(*)",
        "pre_sql": "select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "pred_sql2cypher": "MATCH (t1:`concert_singer.stadium`)-[]-(t2:`concert_singer.concert`)\nRETURN t1.Name,count(*)",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "answers": [
            [
                "Stark's Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ],
            [
                "Glebe Park",
                1
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "gold_sql2cypher": "MATCH (t1:`concert_singer.concert`)-[]-(t2:`concert_singer.stadium`)\nWHERE t1.Year > '2013'\nWITH count(t1.Stadium_ID) AS cnt, t2\nRETURN t2.Name,t2.Capacity\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2013 group by t1.stadium_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`concert_singer.stadium`)-[]-(t2:`concert_singer.concert`)\nWHERE t2.Year > '2013'\nWITH t1, count(t1.Stadium_ID) AS cnt\nRETURN t1.Name,t1.Capacity\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "answers": [
            [
                "Somerset Park",
                11998
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nRETURN concert.Year\nORDER BY concert.Year DESC\nLIMIT 1",
        "pre_sql": "select year from concert group by year order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nRETURN concert.Year\nORDER BY concert.Year DESC\nLIMIT 1",
        "question": "Which year has most number of concerts?",
        "answers": [
            [
                "2015"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nRETURN concert.Year\nORDER BY concert.Year DESC\nLIMIT 1",
        "pre_sql": "select year from concert group by year order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (concert:`concert_singer.concert`)\nRETURN concert.Year\nORDER BY concert.Year DESC\nLIMIT 1",
        "question": "What is the year that had the most concerts?",
        "answers": [
            [
                "2015"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium)-[]-(:`concert_singer.concert`)    \nRETURN stadium.Name",
        "pre_sql": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium)-[]-(:`concert_singer.concert`)    \nRETURN stadium.Name",
        "question": "Show the stadium names without any concert.",
        "answers": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium)-[]-(:`concert_singer.concert`)    \nRETURN stadium.Name",
        "pre_sql": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium)-[]-(:`concert_singer.concert`)    \nRETURN stadium.Name",
        "question": "What are the names of the stadiums without any concerts?",
        "answers": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "gold_sql2cypher": "MATCH (T2:`concert_singer.singer`)-[T1:`concert_singer.singer_in_concert`]-()\nRETURN T2.Name,count(*)",
        "pre_sql": "select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "pred_sql2cypher": "MATCH (t1:`concert_singer.singer`)-[t2:`concert_singer.singer_in_concert`]-()\nRETURN t1.Name,count(*)",
        "question": "List singer names and number of concerts for each singer.",
        "answers": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "gold_sql2cypher": "MATCH (T2:`concert_singer.singer`)-[T1:`concert_singer.singer_in_concert`]-()\nRETURN T2.Name,count(*)",
        "pre_sql": "select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "pred_sql2cypher": "MATCH (t1:`concert_singer.singer`)-[t2:`concert_singer.singer_in_concert`]-()\nRETURN t1.Name,count(*)",
        "question": "What are the names of the singers and number of concerts for each person?",
        "answers": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "gold_sql2cypher": "MATCH (T2:`concert_singer.singer`)-[T1:`concert_singer.singer_in_concert`]-(T3:`concert_singer.concert`)\nWHERE T3.Year = '2014'\nRETURN T2.Name",
        "pre_sql": "select t1.name from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id join concert as t3 on t2.concert_id = t3.concert_id where t3.year = 2014",
        "pred_sql2cypher": "MATCH (t1:`concert_singer.singer`)-[t2:`concert_singer.singer_in_concert`]-(t3:`concert_singer.concert`)\nWHERE t3.Year = '2014'\nRETURN t1.Name",
        "question": "List all singer names in concerts in year 2014.",
        "answers": [
            [
                "Justin Brown"
            ],
            [
                "Timbaland"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "gold_sql2cypher": "MATCH (T2:`concert_singer.singer`)-[T1:`concert_singer.singer_in_concert`]-(T3:`concert_singer.concert`)\nWHERE T3.Year = '2014'\nRETURN T2.Name",
        "pre_sql": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "pred_sql2cypher": "MATCH (t2:`concert_singer.singer`)-[t1:`concert_singer.singer_in_concert`]-(t3:`concert_singer.concert`)\nWHERE t3.Year = '2014'\nRETURN t2.Name",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "answers": [
            [
                "Justin Brown"
            ],
            [
                "Timbaland"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "pre_sql": "select name, country from singer where song_name like '%hey%'",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "answers": [
            [
                "Justin Brown",
                "France"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "pre_sql": "select count(*) from pets where weight > 10",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "pre_sql": "select count(*) from pets where weight > 10",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "question": "How many pets have a greater weight than 10?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "pre_sql": "select weight from pets order by pet_age asc limit 1",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age ASC\nLIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "answers": [
            [
                9.3
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN max(pets.weight),pets.PetType",
        "pre_sql": "select max(weight), pettype from pets group by pettype",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN max(pets.weight),pets.PetType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "answers": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.Age > 20\nRETURN count(*)",
        "pre_sql": "select count(*) from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.age > 20",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Student`)-[t1:`pets_1.Has_Pet`]-()\nWHERE t2.Age > 20\nRETURN count(*)",
        "question": "Find number of pets owned by students who are older than 20.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.Age > 20\nRETURN count(*)",
        "pre_sql": "select count(*) from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.age > 20",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Student`)-[t1:`pets_1.Has_Pet`]-()\nWHERE t2.Age > 20\nRETURN count(*)",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "pre_sql": "select count(distinct pettype) from pets",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "question": "Find the number of distinct type of pets.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "pre_sql": "select count(distinct pettype) from pets",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "question": "How many different types of pet are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-(T3:`pets_1.Pets`)\nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'\nRETURN DISTINCT T1.Fname",
        "pre_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"cat\" or t3.pettype = \"dog\"",
        "pred_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-(t3:`pets_1.Pets`)\nWHERE t3.PetType = 'cat' OR t3.PetType = 'dog'\nRETURN t1.Fname",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Tracy"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "pre_sql": "select pettype, weight from pets order by pet_age asc limit 1",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age ASC\nLIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "answers": [
            [
                "dog",
                9.3
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "pre_sql": "select petid, weight from pets where pet_age > 1",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "answers": [
            [
                2001,
                12.0
            ],
            [
                2002,
                13.4
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "pre_sql": "select petid, weight from pets where pet_age > 1",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "question": "What is the id and weight of every pet who is older than 1?",
        "answers": [
            [
                2001,
                12.0
            ],
            [
                2002,
                13.4
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "pre_sql": "select t1.petid from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.lname = 'Smith'",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Student`)-[t1:`pets_1.Has_Pet`]-()\nWHERE t2.LName = 'Smith'\nRETURN t1.PetID",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "answers": [
            [
                2001
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "pre_sql": "select t1.petid from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.lname = 'Smith'",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Student`)-[t1:`pets_1.Has_Pet`]-()\nWHERE t2.LName = 'Smith'\nRETURN t1.PetID",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "answers": [
            [
                2001
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nRETURN count(*),T1.StuID",
        "pre_sql": "select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "pred_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-()\nRETURN count(*),t1.StuID",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "answers": [
            [
                1,
                1001
            ],
            [
                2,
                1002
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWITH T1.Sex AS Sex, T1.Fname AS Fname, count(*) AS count\nWHERE count  > 1\nRETURN Fname,Sex",
        "pre_sql": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "pred_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-()\nWITH t1.Sex AS Sex, t1.Fname AS Fname, count(*) AS count\nWHERE count  > 1\nRETURN Fname,Sex",
        "question": "Find the first name and gender of student who have more than one pet.",
        "answers": [
            [
                "Tracy",
                "F"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWITH T1.Sex AS Sex, T1.Fname AS Fname, count(*) AS count\nWHERE count  > 1\nRETURN Fname,Sex",
        "pre_sql": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "pred_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-()\nWITH t1.Sex AS Sex, t1.Fname AS Fname, count(*) AS count\nWHERE count  > 1\nRETURN Fname,Sex",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "answers": [
            [
                "Tracy",
                "F"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-(T3:`pets_1.Pets`)\nWHERE T3.pet_age = 3 AND T3.PetType = 'cat'\nRETURN T1.LName",
        "pre_sql": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'cat'",
        "pred_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-(t3:`pets_1.Pets`)\nWHERE t3.PetType = 'cat'\nRETURN t1.LName",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "answers": [
            [
                "Smith"
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CONTINENTS;",
        "gold_sql2cypher": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "pre_sql": "select count(*) from continents",
        "pred_sql2cypher": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "question": "How many continents are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CONTINENTS;",
        "gold_sql2cypher": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "pre_sql": "select count(*) from continents",
        "pred_sql2cypher": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "question": "What is the number of continents?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM COUNTRIES;",
        "gold_sql2cypher": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "pre_sql": "select count(*) from countries",
        "pred_sql2cypher": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "question": "How many countries are listed?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM COUNTRIES;",
        "gold_sql2cypher": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "pre_sql": "select count(*) from countries",
        "pred_sql2cypher": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "question": "How many countries exist?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "pre_sql": "select min(weight) from cars_data where year = 1974 and cylinders = 8",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1974 AND cars_data.Cylinders = 8\nRETURN min(cars_data.Weight)",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "answers": [
            [
                4141
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "pre_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974;",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "answers": [
            [
                4141
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > '150'\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where horsepower > 150",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > '150'\nRETURN count(*)",
        "question": "What is the number of the cars with horsepower more than 150?",
        "answers": [
            [
                281
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > '150'\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where horsepower > 150",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > '150'\nRETURN count(*)",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "answers": [
            [
                281
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where cylinders > 4",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "question": "How many cars have more than 4 cylinders?",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where cylinders > 4",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "question": "What is the number of cars with more than 4 cylinders?",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where year = 1980",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "question": "how many cars were produced in 1980?",
        "answers": [
            [
                29
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "gold_sql2cypher": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "pre_sql": "select count(*) from car_makers where fullname = \"American Motor Company\"",
        "pred_sql2cypher": "MATCH (car_makers:`car_1.car_makers`)\nWHERE car_makers.FullName = 'American Motor Company'\nRETURN count(*)",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "gold_sql2cypher": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "pre_sql": "select count(*) from car_makers where fullname = \"American Motor Company\"",
        "pred_sql2cypher": "MATCH (car_makers:`car_1.car_makers`)\nWHERE car_makers.FullName = 'American Motor Company'\nRETURN count(*)",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "pre_sql": "select year from cars_data where weight between 3000 and 4000",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN cars_data.Year",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "answers": [
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1971
            ],
            [
                1971
            ],
            [
                1971
            ],
            [
                1971
            ],
            [
                1971
            ],
            [
                1971
            ],
            [
                1972
            ],
            [
                1972
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1973
            ],
            [
                1974
            ],
            [
                1974
            ],
            [
                1974
            ],
            [
                1974
            ],
            [
                1974
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1975
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1976
            ],
            [
                1977
            ],
            [
                1977
            ],
            [
                1977
            ],
            [
                1977
            ],
            [
                1977
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1978
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1979
            ],
            [
                1980
            ],
            [
                1980
            ],
            [
                1980
            ],
            [
                1981
            ],
            [
                1981
            ],
            [
                1981
            ],
            [
                1981
            ],
            [
                1981
            ],
            [
                1981
            ],
            [
                1982
            ],
            [
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "pre_sql": "select distinct year from cars_data where weight  < 4000 and weight > 3000",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Weight < 4000 AND cars_data.Weight > 3000\nRETURN DISTINCT cars_data.Year",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "answers": [
            [
                1970
            ],
            [
                1971
            ],
            [
                1972
            ],
            [
                1973
            ],
            [
                1974
            ],
            [
                1975
            ],
            [
                1976
            ],
            [
                1977
            ],
            [
                1978
            ],
            [
                1979
            ],
            [
                1980
            ],
            [
                1981
            ],
            [
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where cylinders > 6",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "question": "How many cars has over 6 cylinders?",
        "answers": [
            [
                108
            ]
        ]
    },
    {
        "db_id": "car_1",
        "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "pre_sql": "select count(*) from cars_data where cylinders > 6",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "answers": [
            [
                108
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "pre_sql": "select country from airlines where airline = \"JetBlue Airways\"",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "pre_sql": "select country from airlines where airline = \"JetBlue Airways\"",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "question": "What country is Jetblue Airways affiliated with?",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "pre_sql": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "answers": [
            [
                "JetBlue"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "pre_sql": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "answers": [
            [
                "JetBlue"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "pre_sql": "select airline, abbreviation from airlines where country = \"USA\"",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "answers": [
            [
                "United Airlines",
                "UAL"
            ],
            [
                "US Airways",
                "USAir"
            ],
            [
                "Delta Airlines",
                "Delta"
            ],
            [
                "Southwest Airlines",
                "Southwest"
            ],
            [
                "American Airlines",
                "American"
            ],
            [
                "Northwest Airlines",
                "Northwest"
            ],
            [
                "Continental Airlines",
                "Continental"
            ],
            [
                "JetBlue Airways",
                "JetBlue"
            ],
            [
                "Frontier Airlines",
                "Frontier"
            ],
            [
                "AirTran Airways",
                "AirTran"
            ],
            [
                "Allegiant Air",
                "Allegiant"
            ],
            [
                "Virgin America",
                "Virgin"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "pre_sql": "select airline, abbreviation from airlines where country = 'USA'",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "answers": [
            [
                "United Airlines",
                "UAL"
            ],
            [
                "US Airways",
                "USAir"
            ],
            [
                "Delta Airlines",
                "Delta"
            ],
            [
                "Southwest Airlines",
                "Southwest"
            ],
            [
                "American Airlines",
                "American"
            ],
            [
                "Northwest Airlines",
                "Northwest"
            ],
            [
                "Continental Airlines",
                "Continental"
            ],
            [
                "JetBlue Airways",
                "JetBlue"
            ],
            [
                "Frontier Airlines",
                "Frontier"
            ],
            [
                "AirTran Airways",
                "AirTran"
            ],
            [
                "Allegiant Air",
                "Allegiant"
            ],
            [
                "Virgin America",
                "Virgin"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Anthony'\nRETURN airports.AirportCode,airports.AirportName",
        "pre_sql": "select airportcode, airportname from airports where city = \"Anthony\"",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Anthony'\nRETURN airports.AirportCode,airports.AirportName",
        "question": "List the airport code and name in the city of Anthony.",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Anthony'\nRETURN airports.AirportCode,airports.AirportName",
        "pre_sql": "select airportcode, airportname from airports where city = \"Anthony\"",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Anthony'\nRETURN airports.AirportCode,airports.AirportName",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRLINES",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "pre_sql": "select count(*) from airlines",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "question": "How many airlines do we have?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRLINES",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "pre_sql": "select count(*) from airlines",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "question": "What is the total number of airlines?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRPORTS",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "pre_sql": "select count(*) from airports",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "question": "How many airports do we have?",
        "answers": [
            [
                100
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRPORTS",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "pre_sql": "select count(*) from airports",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "question": "Return the number of  airports.",
        "answers": [
            [
                100
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "pre_sql": "select airline from airlines where abbreviation = 'UAL'",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "question": "Which airline has abbreviation 'UAL'?",
        "answers": [
            [
                "United Airlines"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "pre_sql": "select airline from airlines where abbreviation = 'UAL'",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "question": "Give the airline with abbreviation 'UAL'.",
        "answers": [
            [
                "United Airlines"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "pre_sql": "select count(*) from airlines where country = 'USA'",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "question": "How many airlines are from USA?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "pre_sql": "select count(*) from airlines where country = 'USA'",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "question": "Return the number of airlines in the USA.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportName = 'Alton'\nRETURN airports.City,airports.Country",
        "pre_sql": "select city, country from airports where airportname = \"Alton\"",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportName = 'Alton'\nRETURN airports.City,airports.Country",
        "question": "Which city and country is the Alton airport at?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportName = 'Alton'\nRETURN airports.City,airports.Country",
        "pre_sql": "select city, country from airports where airportname = \"Alton\"",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportName = 'Alton'\nRETURN airports.City,airports.Country",
        "question": "Give the city and country for the Alton airport.",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "pre_sql": "select airportname from airports where airportcode = 'AKO'",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "question": "What is the airport name for airport 'AKO'?",
        "answers": [
            [
                "Colorado Plains Regional Airport "
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "pre_sql": "select airportname from airports where airportcode = 'AKO'",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "question": "Return the name of the airport with code 'AKO'.",
        "answers": [
            [
                "Colorado Plains Regional Airport "
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen'\nRETURN airports.AirportName",
        "pre_sql": "select airportname from airports where city = 'Aberdeen'",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen'\nRETURN airports.AirportName",
        "question": "What are airport names at City 'Aberdeen'?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen'\nRETURN airports.AirportName",
        "pre_sql": "select airportname from airports where city = 'Aberdeen'",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen'\nRETURN airports.AirportName",
        "question": "What are the names of airports in Aberdeen?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN count(*)",
        "pre_sql": "select count(*) from flights where sourceairport = 'APG'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN count(*)",
        "question": "How many flights depart from 'APG'?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN count(*)",
        "pre_sql": "select count(*) from flights where sourceairport = 'APG'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN count(*)",
        "question": "Count the number of flights departing from 'APG'.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.DestAirport = 'ATO'\nRETURN count(*)",
        "pre_sql": "select count(*) from flights where sourceairport = 'ATO'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'ATO'\nRETURN count(*)",
        "question": "How many flights have destination ATO?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.airlines`)-[]-(T2:`flight_2.flights`)\nWHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'\nRETURN count(*)",
        "pre_sql": "select count(*) from flights where sourceairport = 'AHD' and airline = 'United Airlines'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'AHD' AND flights.Airline = 'United Airlines'\nRETURN count(*)",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.airlines`)-[]-(T2:`flight_2.flights`)\nWHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'\nRETURN count(*)",
        "pre_sql": "select count(*) from flights where sourceairport = 'AHD' and airline = 'United Airlines'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'AHD' AND flights.Airline = 'United Airlines'\nRETURN count(*)",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.airlines`)-[]-(T2:`flight_2.flights`)\nWHERE T2.SourceAirport = 'AHD'\nRETURN T1.Airline",
        "pre_sql": "select airline from flights where sourceairport = 'AHD'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'AHD'\nRETURN flights.Airline",
        "question": "Which airlines have a flight with source airport AHD?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.airlines`)-[]-(T2:`flight_2.flights`)\nWHERE T2.DestAirport = 'AHD'\nRETURN T1.Airline",
        "pre_sql": "select airline from flights where sourceairport = 'AHD'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'AHD'\nRETURN flights.Airline",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.airlines`)-[]-(T2:`flight_2.flights`)\nWHERE T2.DestAirport = 'AHD'\nRETURN T1.Airline",
        "pre_sql": "select airline from flights where sourceairport = 'AHD'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'AHD'\nRETURN flights.Airline",
        "question": "Which airlines have a flight with destination airport AHD?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "pre_sql": "select flightno from flights where sourceairport = \"APG\"",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "pre_sql": "select flightno from flights where sourceairport = 'APG'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "question": "Give the flight numbers of flights leaving from APG.",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.DestAirport = 'APG'\nRETURN flights.FlightNo",
        "pre_sql": "select flightno from flights where sourceairport = \"APG\"",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "gold_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.DestAirport = 'APG'\nRETURN flights.FlightNo",
        "pre_sql": "select flightno from flights where sourceairport = 'APG'",
        "pred_sql2cypher": "MATCH (flights:`flight_2.flights`)\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "question": "Give the flight numbers of flights landing at APG.",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.flights`)-[]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'\nRETURN count(*)",
        "pre_sql": "select count(*) from airports where city = \"Aberdeen\" or city = \"Abilene\"",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'\nRETURN count(*)",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "gold_sql2cypher": "MATCH (T1:`flight_2.flights`)-[]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'\nRETURN count(*)",
        "pre_sql": "select count(*) from airports where city = \"Aberdeen\" or city = \"Abilene\"",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'\nRETURN count(*)",
        "question": "How many flights land in Aberdeen or Abilene?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports)-[]-(:`flight_2.flights`)    \nRETURN airports.AirportName",
        "pre_sql": "select airportname from airports where airportcode not in (select airportcode from flights)",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports)-[]-(:`flight_2.flights`)    \nRETURN airports.AirportName",
        "question": "Find the name of airports which do not have any flight in and out.",
        "answers": [
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Virginia Highlands "
            ],
            [
                "Ada "
            ],
            [
                "Adak Island Ns "
            ],
            [
                "Lenawee County "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Ainsworth "
            ],
            [
                "Akhiok SPB "
            ],
            [
                "Spb "
            ],
            [
                "Akiak "
            ],
            [
                "Colorado Plains Regional Airport "
            ],
            [
                "Akron/canton Regional "
            ],
            [
                "Fulton International "
            ],
            [
                "Akutan "
            ],
            [
                "Alakanuk "
            ],
            [
                "NAS "
            ],
            [
                "Holloman AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Albany NAS "
            ],
            [
                "Dougherty County "
            ],
            [
                "Albany International "
            ],
            [
                "Albany "
            ],
            [
                "Albert Lea "
            ],
            [
                "Albuquerque International "
            ],
            [
                "Aleknagik "
            ],
            [
                "Aleneva "
            ],
            [
                "Thomas C Russell Fld "
            ],
            [
                "Alexandria International "
            ],
            [
                "Esler Field "
            ],
            [
                "Alexandria "
            ],
            [
                "Alexandria Bay "
            ],
            [
                "Algona "
            ],
            [
                "International "
            ],
            [
                "George Downer "
            ],
            [
                "Alitak SPB "
            ],
            [
                "Allakaket "
            ],
            [
                "Alliance "
            ],
            [
                "Gratiot Community "
            ],
            [
                "Alpena County Regional "
            ],
            [
                "Alpine "
            ],
            [
                "Alton "
            ],
            [
                "Altus AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Alyeska "
            ],
            [
                "Rick Husband Amarillo International "
            ],
            [
                "Tradewind "
            ],
            [
                "Ambler "
            ],
            [
                "Amchitka "
            ],
            [
                "Municipal "
            ],
            [
                "Ames "
            ],
            [
                "Zahns "
            ],
            [
                "Amook "
            ],
            [
                "Anacortes "
            ],
            [
                "USN Heliport "
            ],
            [
                "Orange County Steel Salvage Heliport "
            ],
            [
                "Anaktuvuk "
            ],
            [
                "Elmendorf Afb "
            ],
            [
                "Ted Stevens Anchorage International Airport "
            ],
            [
                "Merrill Field "
            ],
            [
                "Municipal "
            ],
            [
                "Anderson "
            ],
            [
                "Andrews "
            ],
            [
                "Angel Fire "
            ],
            [
                "Tri-State Steuben Cty "
            ],
            [
                "Angoon "
            ],
            [
                "Rollang Field "
            ],
            [
                "Aniak "
            ],
            [
                "Anita Bay "
            ],
            [
                "Municipal "
            ],
            [
                "Lee "
            ],
            [
                "Annette Island "
            ],
            [
                "Anniston Metropolitan "
            ],
            [
                "Ft Mcclellan Bus Trml "
            ],
            [
                "Reilly AHP "
            ],
            [
                "Anthony "
            ],
            [
                "Antlers "
            ],
            [
                "Anvik "
            ],
            [
                "Municipal "
            ],
            [
                "Apple Valley "
            ],
            [
                "Outagamie County "
            ],
            [
                "Municipal "
            ],
            [
                "Arcata "
            ],
            [
                "Arctic Village "
            ],
            [
                "Downtown "
            ],
            [
                "Ardmore Municipal Arpt "
            ],
            [
                "US Army Heliport "
            ],
            [
                "Artesia "
            ],
            [
                "Asbury Park "
            ],
            [
                "Ashland "
            ],
            [
                "Ashley "
            ],
            [
                "Aspen "
            ],
            [
                "Astoria "
            ],
            [
                "Athens "
            ],
            [
                "Ohio University "
            ],
            [
                "McMinn County "
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "gold_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports)-[]-(:`flight_2.flights`)    \nRETURN airports.AirportName",
        "pre_sql": "select airportname from airports where airportcode not in (select airportcode from flights)",
        "pred_sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports)-[]-(:`flight_2.flights`)    \nRETURN airports.AirportName",
        "question": "Which airports do not have departing or arriving flights?",
        "answers": [
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Virginia Highlands "
            ],
            [
                "Ada "
            ],
            [
                "Adak Island Ns "
            ],
            [
                "Lenawee County "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Ainsworth "
            ],
            [
                "Akhiok SPB "
            ],
            [
                "Spb "
            ],
            [
                "Akiak "
            ],
            [
                "Colorado Plains Regional Airport "
            ],
            [
                "Akron/canton Regional "
            ],
            [
                "Fulton International "
            ],
            [
                "Akutan "
            ],
            [
                "Alakanuk "
            ],
            [
                "NAS "
            ],
            [
                "Holloman AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Albany NAS "
            ],
            [
                "Dougherty County "
            ],
            [
                "Albany International "
            ],
            [
                "Albany "
            ],
            [
                "Albert Lea "
            ],
            [
                "Albuquerque International "
            ],
            [
                "Aleknagik "
            ],
            [
                "Aleneva "
            ],
            [
                "Thomas C Russell Fld "
            ],
            [
                "Alexandria International "
            ],
            [
                "Esler Field "
            ],
            [
                "Alexandria "
            ],
            [
                "Alexandria Bay "
            ],
            [
                "Algona "
            ],
            [
                "International "
            ],
            [
                "George Downer "
            ],
            [
                "Alitak SPB "
            ],
            [
                "Allakaket "
            ],
            [
                "Alliance "
            ],
            [
                "Gratiot Community "
            ],
            [
                "Alpena County Regional "
            ],
            [
                "Alpine "
            ],
            [
                "Alton "
            ],
            [
                "Altus AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Alyeska "
            ],
            [
                "Rick Husband Amarillo International "
            ],
            [
                "Tradewind "
            ],
            [
                "Ambler "
            ],
            [
                "Amchitka "
            ],
            [
                "Municipal "
            ],
            [
                "Ames "
            ],
            [
                "Zahns "
            ],
            [
                "Amook "
            ],
            [
                "Anacortes "
            ],
            [
                "USN Heliport "
            ],
            [
                "Orange County Steel Salvage Heliport "
            ],
            [
                "Anaktuvuk "
            ],
            [
                "Elmendorf Afb "
            ],
            [
                "Ted Stevens Anchorage International Airport "
            ],
            [
                "Merrill Field "
            ],
            [
                "Municipal "
            ],
            [
                "Anderson "
            ],
            [
                "Andrews "
            ],
            [
                "Angel Fire "
            ],
            [
                "Tri-State Steuben Cty "
            ],
            [
                "Angoon "
            ],
            [
                "Rollang Field "
            ],
            [
                "Aniak "
            ],
            [
                "Anita Bay "
            ],
            [
                "Municipal "
            ],
            [
                "Lee "
            ],
            [
                "Annette Island "
            ],
            [
                "Anniston Metropolitan "
            ],
            [
                "Ft Mcclellan Bus Trml "
            ],
            [
                "Reilly AHP "
            ],
            [
                "Anthony "
            ],
            [
                "Antlers "
            ],
            [
                "Anvik "
            ],
            [
                "Municipal "
            ],
            [
                "Apple Valley "
            ],
            [
                "Outagamie County "
            ],
            [
                "Municipal "
            ],
            [
                "Arcata "
            ],
            [
                "Arctic Village "
            ],
            [
                "Downtown "
            ],
            [
                "Ardmore Municipal Arpt "
            ],
            [
                "US Army Heliport "
            ],
            [
                "Artesia "
            ],
            [
                "Asbury Park "
            ],
            [
                "Ashland "
            ],
            [
                "Ashley "
            ],
            [
                "Aspen "
            ],
            [
                "Astoria "
            ],
            [
                "Athens "
            ],
            [
                "Ohio University "
            ],
            [
                "McMinn County "
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT count(*) FROM employee",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "pre_sql": "select count(*) from employee",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "question": "How many employees are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT count(*) FROM employee",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "pre_sql": "select count(*) from employee",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "question": "Count the number of employees",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM employee ORDER BY age",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "pre_sql": "select name from employee order by age asc",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age ASC",
        "question": "Sort employee names by their age in ascending order.",
        "answers": [
            [
                "George Chuter"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Lee Mears"
            ],
            [
                "Tim Payne"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Mark Regan"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM employee ORDER BY age",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "pre_sql": "select name from employee order by age asc",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age ASC",
        "question": "List the names of employees and sort in ascending order of age.",
        "answers": [
            [
                "George Chuter"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Lee Mears"
            ],
            [
                "Tim Payne"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Mark Regan"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*),employee.City",
        "pre_sql": "select count(*), city from employee group by city",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*),employee.City",
        "question": "Count the number of employees for each city.",
        "answers": [
            [
                3,
                "Bristol"
            ],
            [
                3,
                "Bath"
            ],
            [
                2,
                "Wasps"
            ],
            [
                1,
                "Sale"
            ],
            [
                1,
                "Leicester"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "pre_sql": "select city from employee where age  < 30 group by city having count(*) > 1",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "question": "Which cities do more than one employee under age 30 come from?",
        "answers": [
            [
                "Bath"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "pre_sql": "select city from employee where age  < 30 group by city having count(*) > 1",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "question": "Find the cities that have more than one employee under age 30.",
        "answers": [
            [
                "Bath"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(*),shop.Location",
        "pre_sql": "select count(*), location from shop group by location",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(*),shop.Location",
        "question": "Find the number of shops in each location.",
        "answers": [
            [
                1,
                "Valkeakoski"
            ],
            [
                1,
                "Helsinki"
            ],
            [
                1,
                "Espoo"
            ],
            [
                1,
                "Turku"
            ],
            [
                1,
                "Jakobstad"
            ],
            [
                1,
                "Kotka"
            ],
            [
                1,
                "Kuopio"
            ],
            [
                1,
                "Lahti"
            ],
            [
                1,
                "Mariehamn"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "pre_sql": "select manager_name, district from shop order by number_products desc limit 1",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "answers": [
            [
                "Ilkka M\u00e4kel\u00e4",
                "Lahden Stadion"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "pre_sql": "select manager_name, district from shop order by number_products desc limit 1",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "answers": [
            [
                "Ilkka M\u00e4kel\u00e4",
                "Lahden Stadion"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "pre_sql": "select min(number_products), max(number_products) from shop",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "question": "find the minimum and maximum number of products of all stores.",
        "answers": [
            [
                1600,
                15000
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "pre_sql": "select min(number_products), max(number_products) from shop",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "answers": [
            [
                1600,
                15000
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "pre_sql": "select name, location, district from shop order by number_products desc",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "answers": [
            [
                "FC Lahti",
                "Lahti",
                "Lahden Stadion"
            ],
            [
                "HJK",
                "Helsinki",
                "Finnair Stadium"
            ],
            [
                "FC Inter",
                "Turku",
                "Veritas Stadion"
            ],
            [
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto"
            ],
            [
                "FF Jaro",
                "Jakobstad",
                "Jakobstads Centralplan"
            ],
            [
                "FC KooTeePee",
                "Kotka",
                "Arto Tolsa Areena"
            ],
            [
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4"
            ],
            [
                "KuPS",
                "Kuopio",
                "Magnum Areena"
            ],
            [
                "IFK Mariehamn",
                "Mariehamn",
                "Wikl\u00f6f Holding Arena"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "pre_sql": "select name, location, district from shop order by number_products desc",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "answers": [
            [
                "FC Lahti",
                "Lahti",
                "Lahden Stadion"
            ],
            [
                "HJK",
                "Helsinki",
                "Finnair Stadium"
            ],
            [
                "FC Inter",
                "Turku",
                "Veritas Stadion"
            ],
            [
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto"
            ],
            [
                "FF Jaro",
                "Jakobstad",
                "Jakobstads Centralplan"
            ],
            [
                "FC KooTeePee",
                "Kotka",
                "Arto Tolsa Areena"
            ],
            [
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4"
            ],
            [
                "KuPS",
                "Kuopio",
                "Magnum Areena"
            ],
            [
                "IFK Mariehamn",
                "Mariehamn",
                "Wikl\u00f6f Holding Arena"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH avg(shop.Number_products) AS number_products\nMATCH (shop:`employee_hire_evaluation.shop`)\nWHERE  shop.Number_products >  number_products \nRETURN shop.Name",
        "pre_sql": "select name from shop where number_products > (select avg(number_products) from shop)",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH avg(shop.Number_products) AS number_products\nMATCH (shop:`employee_hire_evaluation.shop`)\nWHERE  shop.Number_products >  number_products \nRETURN shop.Name",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "answers": [
            [
                "HJK"
            ],
            [
                "FC Inter"
            ],
            [
                "FC Lahti"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH avg(shop.Number_products) AS number_products\nMATCH (shop:`employee_hire_evaluation.shop`)\nWHERE  shop.Number_products >  number_products \nRETURN shop.Name",
        "pre_sql": "select name from shop where number_products > (select avg(number_products) from shop)",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH avg(shop.Number_products) AS number_products\nMATCH (shop:`employee_hire_evaluation.shop`)\nWHERE  shop.Number_products >  number_products \nRETURN shop.Name",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "answers": [
            [
                "HJK"
            ],
            [
                "FC Inter"
            ],
            [
                "FC Lahti"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nWITH t1, count(t1.Employee_ID) AS cnt\nRETURN t1.Name\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t2.name from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.evaluation`)-[]-(t2:`employee_hire_evaluation.employee`)\nWITH count(t1.Employee_ID) AS cnt, t2\nRETURN t2.Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "answers": [
            [
                "George Chuter"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nWITH t1, count(t1.Employee_ID) AS cnt\nRETURN t1.Name\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nWITH t1, count(t1.Employee_ID) AS cnt\nRETURN t1.Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "answers": [
            [
                "George Chuter"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nRETURN t1.Name\nORDER BY t2.Bonus DESC\nLIMIT 1",
        "pre_sql": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nRETURN t1.Name\nORDER BY t2.Bonus DESC\nLIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "answers": [
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nRETURN t1.Name\nORDER BY t2.Bonus DESC\nLIMIT 1",
        "pre_sql": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nRETURN t1.Name\nORDER BY t2.Bonus DESC\nLIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "answers": [
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee)-[]-(:`employee_hire_evaluation.evaluation`)    \nRETURN employee.Name",
        "pre_sql": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee)-[]-(:`employee_hire_evaluation.evaluation`)    \nRETURN employee.Name",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "answers": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee)-[]-(:`employee_hire_evaluation.evaluation`)    \nRETURN employee.Name",
        "pre_sql": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee)-[]-(:`employee_hire_evaluation.evaluation`)    \nRETURN employee.Name",
        "question": "What are the names of the employees who never received any evaluation?",
        "answers": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.hiring`)-[]-(t2:`employee_hire_evaluation.shop`)\nWITH t2, count(t1.Shop_ID) AS cnt\nRETURN t2.Name\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.hiring`)-[]-(t2:`employee_hire_evaluation.shop`)\nWITH t2, count(t1.Shop_ID) AS cnt\nRETURN t2.Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "answers": [
            [
                "FC Haka"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop)-[]-(:`employee_hire_evaluation.hiring`)    \nRETURN shop.Name",
        "pre_sql": "select name from shop where shop_id not in (select shop_id from hiring)",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop)-[]-(:`employee_hire_evaluation.hiring`)    \nRETURN shop.Name",
        "question": "Find the name of the shops that do not hire any employee.",
        "answers": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Documents",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "pre_sql": "select count(*) from documents",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "question": "How many documents do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Documents",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "pre_sql": "select count(*) from documents",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "question": "Count the number of documents.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "pre_sql": "select document_id, document_name, document_description from documents",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "answers": [
            [
                0,
                "Introduction of OS",
                "n"
            ],
            [
                1,
                "Understanding DB",
                "y"
            ],
            [
                3,
                "Summer Show",
                "u"
            ],
            [
                76,
                "Robbin CV",
                "y"
            ],
            [
                80,
                "Welcome to NY",
                "h"
            ],
            [
                82,
                "Data base",
                "w"
            ],
            [
                2394,
                "Customer reviews",
                "y"
            ],
            [
                3830,
                "Do not panic",
                "k"
            ],
            [
                33930,
                "How Google people work",
                "z"
            ],
            [
                50123,
                "Learning French",
                "r"
            ],
            [
                651512,
                "How to write a CV",
                "f"
            ],
            [
                801801,
                "How to read a book",
                "w"
            ],
            [
                3540024,
                "Palm reading",
                "y"
            ],
            [
                16514113,
                "A history of Arts",
                "h"
            ],
            [
                385906526,
                "About Korea",
                "b"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "pre_sql": "select document_id, document_name, document_description from documents",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "question": "What are the ids, names, and descriptions for all documents?",
        "answers": [
            [
                0,
                "Introduction of OS",
                "n"
            ],
            [
                1,
                "Understanding DB",
                "y"
            ],
            [
                3,
                "Summer Show",
                "u"
            ],
            [
                76,
                "Robbin CV",
                "y"
            ],
            [
                80,
                "Welcome to NY",
                "h"
            ],
            [
                82,
                "Data base",
                "w"
            ],
            [
                2394,
                "Customer reviews",
                "y"
            ],
            [
                3830,
                "Do not panic",
                "k"
            ],
            [
                33930,
                "How Google people work",
                "z"
            ],
            [
                50123,
                "Learning French",
                "r"
            ],
            [
                651512,
                "How to write a CV",
                "f"
            ],
            [
                801801,
                "How to read a book",
                "w"
            ],
            [
                3540024,
                "Palm reading",
                "y"
            ],
            [
                16514113,
                "A history of Arts",
                "h"
            ],
            [
                385906526,
                "About Korea",
                "b"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = \"Robbin CV\"\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "pre_sql": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = \"Robbin CV\"\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "answers": [
            [
                76,
                20,
                "y"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = \"Robbin CV\"\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "pre_sql": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = \"Robbin CV\"\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "answers": [
            [
                76,
                20,
                "y"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "pre_sql": "select count(distinct template_id) from documents",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "question": "How many different templates do all document use?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "pre_sql": "select count(distinct template_id) from documents",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "question": "Count the number of different templates used for documents.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "pre_sql": "select count(*) from templates where template_type_code = 'PPT'",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "question": "How many documents are using the template with type code 'PPT'?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Template_ID,count(*)",
        "pre_sql": "select template_id, count(*) from documents group by template_id",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Template_ID,count(*)",
        "question": "Show all template ids and number of documents using each template.",
        "answers": [
            [
                7,
                1
            ],
            [
                25,
                2
            ],
            [
                6,
                1
            ],
            [
                20,
                1
            ],
            [
                14,
                2
            ],
            [
                11,
                2
            ],
            [
                10,
                1
            ],
            [
                1,
                1
            ],
            [
                22,
                1
            ],
            [
                21,
                1
            ],
            [
                4,
                1
            ],
            [
                8,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Template_ID,count(*)",
        "pre_sql": "select template_id, count(*) from documents group by template_id",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Template_ID,count(*)",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "answers": [
            [
                7,
                1
            ],
            [
                25,
                2
            ],
            [
                6,
                1
            ],
            [
                20,
                1
            ],
            [
                14,
                2
            ],
            [
                11,
                2
            ],
            [
                10,
                1
            ],
            [
                1,
                1
            ],
            [
                22,
                1
            ],
            [
                21,
                1
            ],
            [
                4,
                1
            ],
            [
                8,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH documents.Template_ID AS Template_ID, count(*) AS count\nWHERE count  > 1\nRETURN Template_ID",
        "pre_sql": "select template_id from documents group by template_id having count(*) > 1",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH documents.Template_ID AS Template_ID, count(*) AS count\nWHERE count  > 1\nRETURN Template_ID",
        "question": "Show ids for all templates that are used by more than one document.",
        "answers": [
            [
                25
            ],
            [
                14
            ],
            [
                11
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "gold_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH documents.Template_ID AS Template_ID, count(*) AS count\nWHERE count  > 1\nRETURN Template_ID",
        "pre_sql": "select template_id from documents group by template_id having count(*) > 1",
        "pred_sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH documents.Template_ID AS Template_ID, count(*) AS count\nWHERE count  > 1\nRETURN Template_ID",
        "question": "What are the template ids of any templates used in more than a single document?",
        "answers": [
            [
                25
            ],
            [
                14
            ],
            [
                11
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Templates",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "pre_sql": "select count(*) from templates",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "question": "How many templates do we have?",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Templates",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "pre_sql": "select count(*) from templates",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "question": "Count the number of templates.",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "pre_sql": "select template_id, version_number, template_type_code from templates",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "answers": [
            [
                0,
                5,
                "PP"
            ],
            [
                1,
                9,
                "PP"
            ],
            [
                4,
                4,
                "BK"
            ],
            [
                6,
                2,
                "PPT"
            ],
            [
                7,
                8,
                "PPT"
            ],
            [
                8,
                3,
                "BK"
            ],
            [
                9,
                2,
                "BK"
            ],
            [
                10,
                1,
                "PPT"
            ],
            [
                11,
                6,
                "BK"
            ],
            [
                14,
                7,
                "AD"
            ],
            [
                15,
                9,
                "CV"
            ],
            [
                16,
                5,
                "CV"
            ],
            [
                18,
                5,
                "PP"
            ],
            [
                19,
                7,
                "AD"
            ],
            [
                20,
                6,
                "BK"
            ],
            [
                21,
                9,
                "AD"
            ],
            [
                22,
                0,
                "PP"
            ],
            [
                23,
                2,
                "BK"
            ],
            [
                24,
                8,
                "PP"
            ],
            [
                25,
                5,
                "PP"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "pre_sql": "select template_id, version_number, template_type_code from templates",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "answers": [
            [
                0,
                5,
                "PP"
            ],
            [
                1,
                9,
                "PP"
            ],
            [
                4,
                4,
                "BK"
            ],
            [
                6,
                2,
                "PPT"
            ],
            [
                7,
                8,
                "PPT"
            ],
            [
                8,
                3,
                "BK"
            ],
            [
                9,
                2,
                "BK"
            ],
            [
                10,
                1,
                "PPT"
            ],
            [
                11,
                6,
                "BK"
            ],
            [
                14,
                7,
                "AD"
            ],
            [
                15,
                9,
                "CV"
            ],
            [
                16,
                5,
                "CV"
            ],
            [
                18,
                5,
                "PP"
            ],
            [
                19,
                7,
                "AD"
            ],
            [
                20,
                6,
                "BK"
            ],
            [
                21,
                9,
                "AD"
            ],
            [
                22,
                0,
                "PP"
            ],
            [
                23,
                2,
                "BK"
            ],
            [
                24,
                8,
                "PP"
            ],
            [
                25,
                5,
                "PP"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "pre_sql": "select distinct template_type_code from templates",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "question": "Show all distinct template type codes for all templates.",
        "answers": [
            [
                "PP"
            ],
            [
                "BK"
            ],
            [
                "PPT"
            ],
            [
                "AD"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "pre_sql": "select distinct template_type_code from ref_template_types",
        "pred_sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN DISTINCT ref_template_types.Template_Type_Code",
        "question": "What are the different template type codes?",
        "answers": [
            [
                "PPT"
            ],
            [
                "CV"
            ],
            [
                "AD"
            ],
            [
                "PP"
            ],
            [
                "BK"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "pre_sql": "select version_number, template_type_code from templates where version_number > 5",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "answers": [
            [
                9,
                "PP"
            ],
            [
                8,
                "PPT"
            ],
            [
                6,
                "BK"
            ],
            [
                7,
                "AD"
            ],
            [
                9,
                "CV"
            ],
            [
                7,
                "AD"
            ],
            [
                6,
                "BK"
            ],
            [
                9,
                "AD"
            ],
            [
                8,
                "PP"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "pre_sql": "select version_number, template_type_code from templates where version_number > 5",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "answers": [
            [
                9,
                "PP"
            ],
            [
                8,
                "PPT"
            ],
            [
                6,
                "BK"
            ],
            [
                7,
                "AD"
            ],
            [
                9,
                "CV"
            ],
            [
                7,
                "AD"
            ],
            [
                6,
                "BK"
            ],
            [
                9,
                "AD"
            ],
            [
                8,
                "PP"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_Type_Code,count(*)",
        "pre_sql": "select template_type_code, count(*) from templates group by template_type_code",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_Type_Code,count(*)",
        "question": "Show all template type codes and number of templates for each.",
        "answers": [
            [
                "PP",
                6
            ],
            [
                "BK",
                6
            ],
            [
                "PPT",
                3
            ],
            [
                "AD",
                3
            ],
            [
                "CV",
                2
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_Type_Code,count(*)",
        "pre_sql": "select template_type_code, count(*) from templates group by template_type_code",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_Type_Code,count(*)",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "answers": [
            [
                "PP",
                6
            ],
            [
                "BK",
                6
            ],
            [
                "PPT",
                3
            ],
            [
                "AD",
                3
            ],
            [
                "CV",
                2
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "pre_sql": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "question": "Show all template type codes with less than three templates.",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "gold_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "pre_sql": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "pred_sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "gold_sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "pre_sql": "select template_type_code, template_type_description from ref_template_types",
        "pred_sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "question": "Show all template type codes and descriptions.",
        "answers": [
            [
                "PPT",
                "Presentation"
            ],
            [
                "CV",
                "CV"
            ],
            [
                "AD",
                "Advertisement"
            ],
            [
                "PP",
                "Paper"
            ],
            [
                "BK",
                "Book"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "gold_sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "pre_sql": "select template_type_code, template_type_description from ref_template_types",
        "pred_sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "question": "What are the type codes and descriptions for all template types?",
        "answers": [
            [
                "PPT",
                "Presentation"
            ],
            [
                "CV",
                "CV"
            ],
            [
                "AD",
                "Advertisement"
            ],
            [
                "PP",
                "Paper"
            ],
            [
                "BK",
                "Book"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Paragraphs",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "pre_sql": "select count(*) from paragraphs",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "question": "How many paragraphs in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Paragraphs",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "pre_sql": "select count(*) from paragraphs",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "question": "Count the number of paragraphs.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "pre_sql": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(t2:`cre_Doc_Template_Mgt.Documents`)\nWHERE t2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWHERE paragraphs.Paragraph_Text =~'.*[K|k]orea.*'\nRETURN paragraphs.Other_Details",
        "pre_sql": "select other_details from paragraphs where paragraph_text = 'Korea'",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWHERE paragraphs.Paragraph_Text = 'Korea'\nRETURN paragraphs.Other_Details",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "answers": [
            [
                null
            ],
            [
                null
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "pre_sql": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(t2:`cre_Doc_Template_Mgt.Documents`)\nWHERE t2.Document_Name = 'Welcome to NY'\nRETURN t1.Paragraph_ID,t1.Paragraph_Text",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "answers": [
            [
                16615,
                "Japan"
            ],
            [
                608931827,
                "Micronesia"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "pre_sql": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(t2:`cre_Doc_Template_Mgt.Documents`)\nWHERE t2.Document_Name = 'Welcome to NY'\nRETURN t1.Paragraph_ID,t1.Paragraph_Text",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "answers": [
            [
                16615,
                "Japan"
            ],
            [
                608931827,
                "Micronesia"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = \"Customer reviews\"\nRETURN T1.Paragraph_Text",
        "pre_sql": "select distinct t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(t2:`cre_Doc_Template_Mgt.Documents`)\nWHERE t2.Document_Name = \"Customer reviews\"\nRETURN DISTINCT t1.Paragraph_Text",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "answers": [
            [
                "Korea"
            ],
            [
                "Ukraine"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = \"Customer reviews\"\nRETURN T1.Paragraph_Text",
        "pre_sql": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Customer reviews'",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(t2:`cre_Doc_Template_Mgt.Documents`)\nWHERE t2.Document_Name = 'Customer reviews'\nRETURN t1.Paragraph_Text",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "answers": [
            [
                "Korea"
            ],
            [
                "Korea"
            ],
            [
                "Ukraine"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID,count(*)\nORDER BY paragraphs.Document_ID",
        "pre_sql": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID,count(*)\nORDER BY paragraphs.Document_ID",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "answers": [
            [
                3,
                1
            ],
            [
                80,
                2
            ],
            [
                2394,
                3
            ],
            [
                3830,
                1
            ],
            [
                33930,
                1
            ],
            [
                50123,
                1
            ],
            [
                651512,
                2
            ],
            [
                3540024,
                1
            ],
            [
                16514113,
                2
            ],
            [
                385906526,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID,count(*)\nORDER BY paragraphs.Document_ID",
        "pre_sql": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID,count(*)\nORDER BY paragraphs.Document_ID",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "answers": [
            [
                3,
                1
            ],
            [
                80,
                2
            ],
            [
                2394,
                3
            ],
            [
                3830,
                1
            ],
            [
                33930,
                1
            ],
            [
                50123,
                1
            ],
            [
                651512,
                2
            ],
            [
                3540024,
                1
            ],
            [
                16514113,
                2
            ],
            [
                385906526,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(*) AS count\nWHERE count  >= 2\nRETURN Document_ID",
        "pre_sql": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(*) AS count\nWHERE count  >= 2\nRETURN Document_ID",
        "question": "List all document ids with at least two paragraphs.",
        "answers": [
            [
                2394
            ],
            [
                651512
            ],
            [
                80
            ],
            [
                16514113
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(*) AS count\nWHERE count  >= 2\nRETURN Document_ID",
        "pre_sql": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(*) AS count\nWHERE count  >= 2\nRETURN Document_ID",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "answers": [
            [
                2394
            ],
            [
                651512
            ],
            [
                80
            ],
            [
                16514113
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1, T2, count(T2.Document_ID) AS cnt\nRETURN T1.Document_ID,T2.Document_Name\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Documents`)-[]-(t2:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH t1, count(t1.Document_ID) AS cnt\nRETURN t1.Document_ID,t1.Document_Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "answers": [
            [
                2394,
                "Customer reviews"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID\nORDER BY paragraphs.Document_ID ASC\nLIMIT 1",
        "pre_sql": "select document_id from paragraphs group by document_id order by count(*) limit 1",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID\nORDER BY paragraphs.Document_ID\nLIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID\nORDER BY paragraphs.Document_ID ASC\nLIMIT 1",
        "pre_sql": "select document_id from paragraphs group by document_id order by count(*) limit 1",
        "pred_sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN paragraphs.Document_ID\nORDER BY paragraphs.Document_ID\nLIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT count(*) FROM teacher",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "pre_sql": "select count(*) from teacher",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "question": "How many teachers are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT count(*) FROM teacher",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "pre_sql": "select count(*) from teacher",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "question": "What is the total count of teachers?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "pre_sql": "select name from teacher order by age asc",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "answers": [
            [
                "Vicente Carretero"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ],
            [
                "Lucy Wong"
            ],
            [
                "Anne Walker"
            ],
            [
                "Kearsley Brown"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "pre_sql": "select name from teacher order by age asc",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "answers": [
            [
                "Vicente Carretero"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ],
            [
                "Lucy Wong"
            ],
            [
                "Anne Walker"
            ],
            [
                "Kearsley Brown"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Age ,  Hometown FROM teacher",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "pre_sql": "select age, hometown from teacher",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "question": "What are the age and hometown of teachers?",
        "answers": [
            [
                "32",
                "Blackrod Urban District"
            ],
            [
                "29",
                "Bolton County Borough"
            ],
            [
                "26",
                "Farnworth Municipal Borough"
            ],
            [
                "33",
                "Horwich Urban District"
            ],
            [
                "45",
                "Kearsley Urban District"
            ],
            [
                "41",
                "Little Lever Urban District"
            ],
            [
                "39",
                "Turton Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Age ,  Hometown FROM teacher",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "pre_sql": "select age, hometown from teacher",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "question": "What is the age and hometown of every teacher?",
        "answers": [
            [
                "32",
                "Blackrod Urban District"
            ],
            [
                "29",
                "Bolton County Borough"
            ],
            [
                "26",
                "Farnworth Municipal Borough"
            ],
            [
                "33",
                "Horwich Urban District"
            ],
            [
                "45",
                "Kearsley Urban District"
            ],
            [
                "41",
                "Little Lever Urban District"
            ],
            [
                "39",
                "Turton Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "pre_sql": "select name from teacher where hometown!= \"Little lever urban District\"",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'Little lever urban District'\nRETURN teacher.Name",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Vicente Carretero"
            ],
            [
                "John Deloor"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Anne Walker"
            ],
            [
                "Lucy Wong"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "pre_sql": "select name from teacher where hometown!= \"Little lever urban District\"",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'Little lever urban District'\nRETURN teacher.Name",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Vicente Carretero"
            ],
            [
                "John Deloor"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Anne Walker"
            ],
            [
                "Lucy Wong"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Age = '32' OR teacher.Age = '33'\nRETURN teacher.Name",
        "pre_sql": "select name from teacher where age = 32 or age = 33",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Age = '32' OR teacher.Age = '33'\nRETURN teacher.Name",
        "question": "Show the name of teachers aged either 32 or 33?",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Age = '32' OR teacher.Age = '33'\nRETURN teacher.Name",
        "pre_sql": "select name from teacher where age = 32 or age = 33",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Age = '32' OR teacher.Age = '33'\nRETURN teacher.Name",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "pre_sql": "select hometown from teacher order by age asc limit 1",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "answers": [
            [
                "Farnworth Municipal Borough"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "pre_sql": "select hometown from teacher order by age asc limit 1",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "question": "Where is the youngest teacher from?",
        "answers": [
            [
                "Farnworth Municipal Borough"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown,count(*)",
        "pre_sql": "select hometown, count(*) from teacher group by hometown",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown,count(*)",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "answers": [
            [
                "Blackrod Urban District",
                1
            ],
            [
                "Bolton County Borough",
                1
            ],
            [
                "Farnworth Municipal Borough",
                1
            ],
            [
                "Horwich Urban District",
                1
            ],
            [
                "Kearsley Urban District",
                1
            ],
            [
                "Little Lever Urban District",
                1
            ],
            [
                "Turton Urban District",
                1
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown,count(*)",
        "pre_sql": "select hometown, count(*) from teacher group by hometown",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown,count(*)",
        "question": "For each hometown, how many teachers are there?",
        "answers": [
            [
                "Blackrod Urban District",
                1
            ],
            [
                "Bolton County Borough",
                1
            ],
            [
                "Farnworth Municipal Borough",
                1
            ],
            [
                "Horwich Urban District",
                1
            ],
            [
                "Kearsley Urban District",
                1
            ],
            [
                "Little Lever Urban District",
                1
            ],
            [
                "Turton Urban District",
                1
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Hometown DESC\nLIMIT 1",
        "pre_sql": "select hometown from teacher group by hometown order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Hometown DESC\nLIMIT 1",
        "question": "List the most common hometown of teachers.",
        "answers": [
            [
                "Turton Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Hometown DESC\nLIMIT 1",
        "pre_sql": "select hometown from teacher group by hometown order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Hometown DESC\nLIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "answers": [
            [
                "Turton Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "pre_sql": "select hometown from teacher group by hometown having count(*) >= 2",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "question": "Show the hometowns shared by at least two teachers.",
        "answers": []
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "pre_sql": "select hometown from teacher group by hometown having count(*) >= 2",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "question": "What are the towns from which at least two teachers come from?",
        "answers": []
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "gold_sql2cypher": "MATCH (T2:`course_teach.teacher`)-[T1:`course_teach.course_arrange`]-()\nRETURN T2.Name,count(*)",
        "pre_sql": "select t1.name, count(*) from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "pred_sql2cypher": "MATCH (t1:`course_teach.teacher`)-[t2:`course_teach.course_arrange`]-()\nRETURN t1.Name,count(*)",
        "question": "Show names of teachers and the number of courses they teach.",
        "answers": [
            [
                "Gustaaf Deloor",
                1
            ],
            [
                "Vicente Carretero",
                1
            ],
            [
                "Kearsley Brown",
                1
            ],
            [
                "Anne Walker",
                2
            ],
            [
                "Lucy Wong",
                1
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "gold_sql2cypher": "MATCH (T2:`course_teach.teacher`)-[T1:`course_teach.course_arrange`]-()\nRETURN T2.Name,count(*)",
        "pre_sql": "select t1.name, count(*) from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id group by t1.name",
        "pred_sql2cypher": "MATCH (t1:`course_teach.teacher`)-[t2:`course_teach.course_arrange`]-()\nRETURN t1.Name,count(*)",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "answers": [
            [
                "Gustaaf Deloor",
                1
            ],
            [
                "Vicente Carretero",
                1
            ],
            [
                "Kearsley Brown",
                1
            ],
            [
                "Anne Walker",
                2
            ],
            [
                "Lucy Wong",
                1
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (T2:`course_teach.teacher`)-[T1:`course_teach.course_arrange`]-()\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 2\nRETURN Name",
        "pre_sql": "select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id group by t1.name having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t1:`course_teach.teacher`)-[t2:`course_teach.course_arrange`]-()\nWITH count(*) AS count, t1.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "question": "Show names of teachers that teach at least two courses.",
        "answers": [
            [
                "Anne Walker"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (T2:`course_teach.teacher`)-[T1:`course_teach.course_arrange`]-()\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 2\nRETURN Name",
        "pre_sql": "select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id group by t1.name having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t1:`course_teach.teacher`)-[t2:`course_teach.course_arrange`]-()\nWITH count(*) AS count, t1.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "question": "What are the names of the teachers who teach at least two courses?",
        "answers": [
            [
                "Anne Walker"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
        "gold_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Age < 30\nRETURN count(*)",
        "pre_sql": "select count(*) from visitor where age  < 30",
        "pred_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Age < 30\nRETURN count(*)",
        "question": "How many visitors below age 30 are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "gold_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name\nORDER BY visitor.Level_of_membership DESC",
        "pre_sql": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "pred_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name\nORDER BY visitor.Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "answers": [
            [
                "Gonzalo Higua\u00edn "
            ],
            [
                "Fernando Gago"
            ],
            [
                "Guti Midfielder"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "gold_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name,visitor.Level_of_membership\nORDER BY visitor.Age DESC",
        "pre_sql": "select name, level_of_membership from visitor where level_of_membership > 4 order by age",
        "pred_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name,visitor.Level_of_membership\nORDER BY visitor.Age",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "answers": [
            [
                "Guti Midfielder",
                5
            ],
            [
                "Gonzalo Higua\u00edn ",
                8
            ],
            [
                "Fernando Gago",
                6
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "gold_sql2cypher": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year < '2009'\nRETURN avg(museum.Num_of_Staff)",
        "pre_sql": "select avg(num_of_staff) from museum where open_year  < 2009",
        "pred_sql2cypher": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year < '2009'\nRETURN avg(museum.Num_of_Staff)",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "answers": [
            [
                31.333333333333332
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "gold_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`museum_visit.visitor`)-[t2:`museum_visit.visit`]-()\nRETURN t1.Name,t1.Age\nORDER BY t2.Num_of_Ticket DESC\nLIMIT 1",
        "pre_sql": "select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`museum_visit.visitor`)-[t2:`museum_visit.visit`]-()\nWITH t1, count(t2.None) AS cnt\nRETURN t1.Name,t1.Age\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "answers": [
            [
                "Arjen Robben",
                27
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "gold_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "gold_sql2cypher": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year > '2013' OR museum.Open_Year < '2008'\nRETURN count(*)",
        "pre_sql": "select count(*) from museum where open_year > 2013 or open_year  < 2008",
        "pred_sql2cypher": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year > '2013' OR museum.Open_Year < '2008'\nRETURN count(*)",
        "question": "How many museums were opened after 2013 or before 2008?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "gold_sql2cypher": "MATCH (ship:`battle_death.ship`)\nWHERE ship.disposition_of_ship = 'Captured'\nRETURN count(*)",
        "pre_sql": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "pred_sql2cypher": "MATCH (ship:`battle_death.ship`)\nWHERE ship.disposition_of_ship = 'Captured'\nRETURN count(*)",
        "question": "How many ships ended up being 'Captured'?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "gold_sql2cypher": "MATCH (ship:`battle_death.ship`)\nRETURN ship.name,ship.tonnage\nORDER BY ship.name DESC",
        "pre_sql": "select name, tonnage from ship order by name desc",
        "pred_sql2cypher": "MATCH (ship:`battle_death.ship`)\nRETURN ship.name,ship.tonnage\nORDER BY ship.name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "answers": [
            [
                "Three Brothers",
                "t"
            ],
            [
                "Mary",
                "t"
            ],
            [
                "Lettice",
                "t"
            ],
            [
                "HMS Avon",
                "391"
            ],
            [
                "HMS Atalanta",
                "225"
            ],
            [
                "Bon Accord",
                "t"
            ],
            [
                "Bacchus",
                "t"
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "gold_sql2cypher": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander <> 'Boril'\nRETURN battle.name,battle.result",
        "pre_sql": "select name, result from battle where bulgarian_commander!= 'Boril'",
        "pred_sql2cypher": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander <> 'Boril'\nRETURN battle.name,battle.result",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "answers": [
            [
                "Battle of Adrianople",
                "Bulgarian victory"
            ],
            [
                "Battle of Serres",
                "Bulgarian victory"
            ],
            [
                "Battle of Rusion",
                "Bulgarian victory"
            ],
            [
                "Battle of Rodosto",
                "Bulgarian victory"
            ],
            [
                "Battle of Messinopolis",
                "Bulgarian victory"
            ],
            [
                "Siege of Constantinople",
                "Two Year Truce"
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "gold_sql2cypher": "MATCH (T1:`battle_death.battle`)-[]-(T2:`battle_death.ship`)\nWHERE T2.ship_type = 'Brig'\nRETURN DISTINCT T1.id,T1.name",
        "pre_sql": "select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "pred_sql2cypher": "MATCH (t1:`battle_death.battle`)-[]-(t2:`battle_death.ship`)\nWHERE t2.ship_type = 'Brig'\nRETURN DISTINCT t1.id,t1.name",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "answers": [
            [
                8,
                "Siege of Constantinople"
            ],
            [
                7,
                "Battle of Philippopolis"
            ],
            [
                6,
                "Battle of Boruy"
            ],
            [
                5,
                "Battle of Messinopolis"
            ],
            [
                4,
                "Battle of Rodosto"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
        "gold_sql2cypher": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "pre_sql": "select line_1, line_2 from addresses",
        "pred_sql2cypher": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "question": "What is the first and second line for all addresses?",
        "answers": [
            [
                "2294 Grant Square Apt. 235",
                "Apt. 370"
            ],
            [
                "3999 Aufderhar Ways Suite 593",
                "Apt. 388"
            ],
            [
                "67942 Carlotta Ferry Apt. 686",
                "Apt. 583"
            ],
            [
                "0144 Lamar Plaza Apt. 346",
                "Suite 703"
            ],
            [
                "858 Peggie Bypass Suite 212",
                "Apt. 335"
            ],
            [
                "16998 Mraz Lodge",
                "Apt. 689"
            ],
            [
                "193 Marlin Brook",
                "Apt. 406"
            ],
            [
                "202 Hessel Views Apt. 468",
                "Apt. 305"
            ],
            [
                "0643 Muller Vista",
                "Suite 383"
            ],
            [
                "7081 Eda Center",
                "Suite 830"
            ],
            [
                "9283 Schulist Falls Apt. 037",
                "Suite 239"
            ],
            [
                "979 Haag Shores Suite 656",
                "Apt. 468"
            ],
            [
                "492 Wilkinson Route",
                "Suite 865"
            ],
            [
                "186 Evan Motorway Apt. 409",
                "Suite 079"
            ],
            [
                "74046 Metz Walk Apt. 113",
                "Suite 674"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(*) FROM Courses",
        "gold_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "pre_sql": "select count(*) from courses",
        "pred_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "question": "How many courses in total are listed?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(*) FROM Courses",
        "gold_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "pre_sql": "select count(*) from courses",
        "pred_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "question": "How many courses are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "gold_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "pre_sql": "select course_description from courses where course_name ='math'",
        "pred_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "question": "What are the descriptions for all the math courses?",
        "answers": [
            [
                "q"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "gold_sql2cypher": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "pre_sql": "select zip_postcode from addresses where city = \"Port Chelsea\"",
        "pred_sql2cypher": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = \"Port Chelsea\"\nRETURN addresses.zip_postcode",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "answers": [
            [
                "148"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "gold_sql2cypher": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "pre_sql": "select zip_postcode from addresses where city = \"Port Chelsea\"",
        "pred_sql2cypher": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = \"Port Chelsea\"\nRETURN addresses.zip_postcode",
        "question": "What is the zip code for Port Chelsea?",
        "answers": [
            [
                "148"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "gold_sql2cypher": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "pre_sql": "select count(distinct department_id) from degree_programs",
        "pred_sql2cypher": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "question": "How many departments offer any degree?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "gold_sql2cypher": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "pre_sql": "select count(distinct department_id) from degree_programs",
        "pred_sql2cypher": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "question": "How many different departments offer degrees?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "gold_sql2cypher": "MATCH (T1:`student_transcripts_tracking.Departments`)-[]-(T2:`student_transcripts_tracking.Degree_Programs`)\nWHERE T1.department_name = 'engineer'\nRETURN count(*)",
        "pre_sql": "select count(*) from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id where t2.department_name = 'Engineering'",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Degree_Programs`)-[]-(t2:`student_transcripts_tracking.Departments`)\nWHERE t2.department_name = 'Engineering'\nRETURN count(*)",
        "question": "How many degrees does the engineering department have?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT section_name ,  section_description FROM Sections",
        "gold_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "pre_sql": "select section_name, section_description from sections",
        "pred_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "question": "What are the names and descriptions of all the sections?",
        "answers": [
            [
                "a",
                "non"
            ],
            [
                "b",
                "voluptatem"
            ],
            [
                "c",
                "qui"
            ],
            [
                "d",
                "voluptas"
            ],
            [
                "e",
                "ex"
            ],
            [
                "f",
                "doloremque"
            ],
            [
                "g",
                "provident"
            ],
            [
                "h",
                "et"
            ],
            [
                "j",
                "quis"
            ],
            [
                "k",
                "nesciunt"
            ],
            [
                "l",
                "ad"
            ],
            [
                "o",
                "et"
            ],
            [
                "p",
                "facilis"
            ],
            [
                "u",
                "reprehenderit"
            ],
            [
                "y",
                "qui"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT section_name ,  section_description FROM Sections",
        "gold_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "pre_sql": "select section_name, section_description from sections",
        "pred_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "question": "What are the names and descriptions for all the sections?",
        "answers": [
            [
                "a",
                "non"
            ],
            [
                "b",
                "voluptatem"
            ],
            [
                "c",
                "qui"
            ],
            [
                "d",
                "voluptas"
            ],
            [
                "e",
                "ex"
            ],
            [
                "f",
                "doloremque"
            ],
            [
                "g",
                "provident"
            ],
            [
                "h",
                "et"
            ],
            [
                "j",
                "quis"
            ],
            [
                "k",
                "nesciunt"
            ],
            [
                "l",
                "ad"
            ],
            [
                "o",
                "et"
            ],
            [
                "p",
                "facilis"
            ],
            [
                "u",
                "reprehenderit"
            ],
            [
                "y",
                "qui"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "gold_sql2cypher": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nRETURN DISTINCT T1.course_name",
        "pre_sql": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Courses`)-[]-(t2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nRETURN t1.course_name",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "answers": [
            [
                "math"
            ],
            [
                "math"
            ],
            [
                "os"
            ],
            [
                "en"
            ],
            [
                "la"
            ],
            [
                "la"
            ],
            [
                "nlp"
            ],
            [
                "ml"
            ],
            [
                "ml"
            ],
            [
                "ai"
            ],
            [
                "db"
            ],
            [
                "rs"
            ],
            [
                "rs"
            ],
            [
                "pl"
            ],
            [
                "pl"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "gold_sql2cypher": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nRETURN DISTINCT T1.course_name",
        "pre_sql": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Courses`)-[]-(t2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nRETURN t1.course_name",
        "question": "What are the names of all courses that have some students enrolled?",
        "answers": [
            [
                "math"
            ],
            [
                "math"
            ],
            [
                "os"
            ],
            [
                "en"
            ],
            [
                "la"
            ],
            [
                "la"
            ],
            [
                "nlp"
            ],
            [
                "ml"
            ],
            [
                "ml"
            ],
            [
                "ai"
            ],
            [
                "db"
            ],
            [
                "rs"
            ],
            [
                "rs"
            ],
            [
                "pl"
            ],
            [
                "pl"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "pre_sql": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "answers": [
            [
                "(096)889-8954x524"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "pre_sql": "select first_name, middle_name, last_name from students order by date_first_registered limit 1",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered\nLIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "pre_sql": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "pre_sql": "select first_name, middle_name, last_name from students order by date_first_registered limit 1",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered\nLIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "pre_sql": "select first_name, middle_name, last_name from students order by date_first_registered limit 1",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered\nLIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(*) FROM Transcripts",
        "gold_sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "pre_sql": "select count(*) from transcripts",
        "pred_sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "question": "How many transcripts are released?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(*) FROM Transcripts",
        "gold_sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "pre_sql": "select count(*) from transcripts",
        "pred_sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "question": "How many transcripts are listed?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "pre_sql": "select count(distinct current_address_id) from students",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "question": "How many different addresses do the students currently live?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "pre_sql": "select other_student_details from students order by other_student_details",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "answers": [
            [
                "assumenda"
            ],
            [
                "atque"
            ],
            [
                "autem"
            ],
            [
                "dolorum"
            ],
            [
                "et"
            ],
            [
                "facilis"
            ],
            [
                "laborum"
            ],
            [
                "nesciunt"
            ],
            [
                "non"
            ],
            [
                "omnis"
            ],
            [
                "omnis"
            ],
            [
                "qui"
            ],
            [
                "quia"
            ],
            [
                "rerum"
            ],
            [
                "voluptatem"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "pre_sql": "select title from cartoon order by title",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "question": "List the title of all cartoons in alphabetical order.",
        "answers": [
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Deep Cover for Batman!"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Evil Under the Sea!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Journey to the Center of the Bat!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "The Rise of the Blue Beetle!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "pre_sql": "select title from cartoon order by title",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "answers": [
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Deep Cover for Batman!"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Evil Under the Sea!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Journey to the Center of the Bat!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "The Rise of the Blue Beetle!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "pre_sql": "select title from cartoon where directed_by = \"Ben Jones\"",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "The Eyes of Despero!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "pre_sql": "select title from cartoon where directed_by = 'Ben Jones'",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "The Eyes of Despero!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "pre_sql": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "pre_sql": "select count(*) from cartoon where written_by = 'Joseph Kuhr'",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "pre_sql": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "pre_sql": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "pre_sql": "select content from tv_channel where series_name = 'Sky Radio'",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "question": "What is the content of the series Sky Radio?",
        "answers": [
            [
                "music"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "pre_sql": "select count(*) from tv_channel where language = 'English'",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "question": "How many TV Channel using language English?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "pre_sql": "select count(*) from tv_channel where language = 'English'",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "question": "How many TV Channels use the English language?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN tv_channel.Language,count(*)\nORDER BY tv_channel.Language ASC\nLIMIT 1",
        "pre_sql": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN tv_channel.Language,count(*)\nORDER BY tv_channel.Language ASC\nLIMIT 1",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "answers": [
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN tv_channel.Language,count(*)",
        "pre_sql": "select language, count(*) from tv_channel group by language",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN tv_channel.Language,count(*)",
        "question": "List each language and the number of TV Channels using it.",
        "answers": [
            [
                "Italian",
                12
            ],
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN tv_channel.Language,count(*)",
        "pre_sql": "select language, count(*) from tv_channel group by language",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN tv_channel.Language,count(*)",
        "question": "For each language, list the number of TV Channels that use it.",
        "answers": [
            [
                "Italian",
                12
            ],
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "pre_sql": "select episode from tv_series order by rating",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "answers": [
            [
                "The Hanged Man"
            ],
            [
                "Double Down"
            ],
            [
                "Home By Another Way"
            ],
            [
                "Keepers"
            ],
            [
                "Emily"
            ],
            [
                "Blowback"
            ],
            [
                "The Legend of Dylan McCleen"
            ],
            [
                "Winterland"
            ],
            [
                "The Year of the Rabbit"
            ],
            [
                "Game Three"
            ],
            [
                "Friendly Skies"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "pre_sql": "select episode from tv_series order by rating",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "question": "What are all of the episodes ordered by ratings?",
        "answers": [
            [
                "The Hanged Man"
            ],
            [
                "Double Down"
            ],
            [
                "Home By Another Way"
            ],
            [
                "Keepers"
            ],
            [
                "Emily"
            ],
            [
                "Blowback"
            ],
            [
                "The Legend of Dylan McCleen"
            ],
            [
                "Winterland"
            ],
            [
                "The Year of the Rabbit"
            ],
            [
                "Game Three"
            ],
            [
                "Friendly Skies"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "pre_sql": "select episode, rating from tv_series order by rating desc limit 3",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "answers": [
            [
                "A Love of a Lifetime",
                "5.8"
            ],
            [
                "Friendly Skies",
                "5.3"
            ],
            [
                "Game Three",
                "4.4"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "pre_sql": "select max(share), min(share) from tv_series",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "question": "What is the maximum and minimum share for the TV series?",
        "answers": [
            [
                9.0,
                5.0
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "pre_sql": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "answers": [
            [
                102.0,
                "701"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "pre_sql": "select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "answers": [
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "pre_sql": "select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "answers": [
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT count(*) FROM poker_player",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "pre_sql": "select count(*) from poker_player",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "question": "How many poker players are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT count(*) FROM poker_player",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "pre_sql": "select count(*) from poker_player",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "question": "Count the number of poker players.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "pre_sql": "select earnings from poker_player order by earnings desc",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "answers": [
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                142800.0
            ],
            [
                104871.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "pre_sql": "select earnings from poker_player order by earnings desc",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "answers": [
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                142800.0
            ],
            [
                104871.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "pre_sql": "select final_table_made, best_finish from poker_player",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "question": "List the final tables made and the best finishes of poker players.",
        "answers": [
            [
                42.0,
                1.0
            ],
            [
                10.0,
                2.0
            ],
            [
                21.0,
                1.0
            ],
            [
                19.0,
                2.0
            ],
            [
                26.0,
                3.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "pre_sql": "select final_table_made, best_finish from poker_player",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "question": "What are the final tables made and best finishes for all poker players?",
        "answers": [
            [
                42.0,
                1.0
            ],
            [
                10.0,
                2.0
            ],
            [
                21.0,
                1.0
            ],
            [
                19.0,
                2.0
            ],
            [
                26.0,
                3.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "pre_sql": "select money_rank from poker_player order by earnings desc limit 1",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "answers": [
            [
                58.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "pre_sql": "select money_rank from poker_player order by earnings desc limit 1",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "answers": [
            [
                58.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "pre_sql": "select max(final_table_made) from poker_player where earnings  < 200000",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "answers": [
            [
                26.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "gold_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "pre_sql": "select max(final_table_made) from poker_player where earnings  < 200000",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "answers": [
            [
                26.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "gold_sql2cypher": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "pre_sql": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "pred_sql2cypher": "MATCH (t1:`poker_player.poker_player`)-[]-(t2:`poker_player.people`)\nRETURN t2.Name",
        "question": "What are the names of poker players?",
        "answers": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "gold_sql2cypher": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "pre_sql": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "pred_sql2cypher": "MATCH (t1:`poker_player.poker_player`)-[]-(t2:`poker_player.people`)\nRETURN t2.Name",
        "question": "Return the names of all the poker players.",
        "answers": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "gold_sql2cypher": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "pre_sql": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc",
        "pred_sql2cypher": "MATCH (t1:`poker_player.poker_player`)-[]-(t2:`poker_player.people`)\nRETURN t2.Name\nORDER BY t1.Final_Table_Made ASC",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "answers": [
            [
                "Teodor Salparov"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Aleksey Ostapenko"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "gold_sql2cypher": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "pre_sql": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made asc",
        "pred_sql2cypher": "MATCH (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`)\nRETURN t1.Name\nORDER BY t2.Final_Table_Made ASC",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "answers": [
            [
                "Teodor Salparov"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Aleksey Ostapenko"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "gold_sql2cypher": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "pre_sql": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by earnings desc",
        "pred_sql2cypher": "MATCH (t1:`poker_player.poker_player`)-[]-(t2:`poker_player.people`)\nRETURN t2.Name\nORDER BY t1.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "answers": [
            [
                "Maksim Botin"
            ],
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality,count(*)",
        "pre_sql": "select nationality, count(*) from people group by nationality",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality,count(*)",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "answers": [
            [
                "Russia",
                6
            ],
            [
                "Bulgaria",
                1
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality,count(*)",
        "pre_sql": "select nationality, count(*) from people group by nationality",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality,count(*)",
        "question": "How many people are there of each nationality?",
        "answers": [
            [
                "Russia",
                6
            ],
            [
                "Bulgaria",
                1
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality\nORDER BY people.Nationality DESC\nLIMIT 1",
        "pre_sql": "select nationality from people group by nationality order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality\nORDER BY people.Nationality DESC\nLIMIT 1",
        "question": "What is the most common nationality of people?",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality\nORDER BY people.Nationality DESC\nLIMIT 1",
        "pre_sql": "select nationality from people group by nationality order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Nationality\nORDER BY people.Nationality DESC\nLIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(*) AS count\nWHERE count  >= 2\nRETURN Nationality",
        "pre_sql": "select nationality from people group by nationality having count(*) >= 2",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(*) AS count\nWHERE count  >= 2\nRETURN Nationality",
        "question": "What are the nationalities that are shared by at least two people?",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(*) AS count\nWHERE count  >= 2\nRETURN Nationality",
        "pre_sql": "select nationality from people group by nationality having count(*) >= 2",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(*) AS count\nWHERE count  >= 2\nRETURN Nationality",
        "question": "Return the nationalities for which there are two or more people.",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "pre_sql": "select name, birth_date from people order by name asc",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "answers": [
            [
                "Aleksey Ostapenko",
                "May 26, 1986"
            ],
            [
                "Maksim Botin",
                "July 14, 1983"
            ],
            [
                "Roman Bragin",
                "April 17, 1987"
            ],
            [
                "Semen Poltavskiy",
                "February 8, 1981"
            ],
            [
                "Sergey Grankin",
                "January 22, 1987"
            ],
            [
                "Teodor Salparov",
                "August 16, 1982"
            ],
            [
                "Yevgeni Sivozhelez",
                "August 8, 1986"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "pre_sql": "select name, birth_date from people order by name",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "answers": [
            [
                "Aleksey Ostapenko",
                "May 26, 1986"
            ],
            [
                "Maksim Botin",
                "July 14, 1983"
            ],
            [
                "Roman Bragin",
                "April 17, 1987"
            ],
            [
                "Semen Poltavskiy",
                "February 8, 1981"
            ],
            [
                "Sergey Grankin",
                "January 22, 1987"
            ],
            [
                "Teodor Salparov",
                "August 16, 1982"
            ],
            [
                "Yevgeni Sivozhelez",
                "August 8, 1986"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "pre_sql": "select name from people where nationality!= \"Russia\"",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "answers": [
            [
                "Teodor Salparov"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "pre_sql": "select name from people where nationality!= \"Russia\"",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "question": "What are the names of people who are not from Russia?",
        "answers": [
            [
                "Teodor Salparov"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE NOT (people)-[]-(:`poker_player.poker_player`)    \nRETURN people.Name",
        "pre_sql": "select name from people where people_id not in (select people_id from poker_player)",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE NOT (people)-[]-(:`poker_player.poker_player`)    \nRETURN people.Name",
        "question": "List the names of people that are not poker players.",
        "answers": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE NOT (people)-[]-(:`poker_player.poker_player`)    \nRETURN people.Name",
        "pre_sql": "select name from people where people_id not in (select people_id from poker_player)",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE NOT (people)-[]-(:`poker_player.poker_player`)    \nRETURN people.Name",
        "question": "What are the names of people who do not play poker?",
        "answers": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "pre_sql": "select count(distinct nationality) from people",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "question": "How many distinct nationalities are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "gold_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "pre_sql": "select count(distinct nationality) from people",
        "pred_sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "question": "Count the number of different nationalities.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT count(*) FROM area_code_state",
        "gold_sql2cypher": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(*)",
        "pre_sql": "select count(*) from area_code_state",
        "pred_sql2cypher": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(*)",
        "question": "How many states are there?",
        "answers": [
            [
                305
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "gold_sql2cypher": "MATCH (contestants:`voter_1.CONTESTANTS`)\nRETURN contestants.contestant_number,contestants.contestant_name\nORDER BY contestants.contestant_name DESC",
        "pre_sql": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "pred_sql2cypher": "MATCH (contestants:`voter_1.CONTESTANTS`)\nRETURN contestants.contestant_number,contestants.contestant_name\nORDER BY contestants.contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "answers": [
            [
                2,
                "Tabatha Gehling"
            ],
            [
                8,
                "Nita Coster"
            ],
            [
                11,
                "Loraine NygrenTania Mattioli"
            ],
            [
                9,
                "Kurt Walser"
            ],
            [
                3,
                "Kelly Clauss"
            ],
            [
                6,
                "Jessie Eichman"
            ],
            [
                4,
                "Jessie Alloway"
            ],
            [
                10,
                "Ericka Dieter"
            ],
            [
                1,
                "Edwina Burnam"
            ],
            [
                7,
                "Allie Rogalski"
            ],
            [
                5,
                "Alana Bregman"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "gold_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nRETURN votes.vote_id,votes.phone_number,votes.state",
        "pre_sql": "select vote_id, phone_number, state from votes",
        "pred_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nRETURN votes.vote_id,votes.phone_number,votes.state",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "answers": [
            [
                1,
                7182887233,
                "NY"
            ],
            [
                2,
                7148407040,
                "NY"
            ],
            [
                3,
                6209222712,
                "CA"
            ],
            [
                5,
                5112677315,
                "NJ\n"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "gold_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'CA'\nRETURN max(votes.created)",
        "pre_sql": "select created from votes where state = 'CA'",
        "pred_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'CA'\nRETURN votes.created",
        "question": "What is last date created of votes from the state 'CA'?",
        "answers": [
            [
                "2018-03-09 19:03:39"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "gold_sql2cypher": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE contestants.contestant_name <> 'Jessie Alloway'\nRETURN contestants.contestant_name",
        "pre_sql": "select contestant_name from contestants where contestant_name!= 'Jessie Alloway'",
        "pred_sql2cypher": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE contestants.contestant_name <> 'Jessie Alloway'\nRETURN contestants.contestant_name",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "answers": [
            [
                "Edwina Burnam"
            ],
            [
                "Tabatha Gehling"
            ],
            [
                "Kelly Clauss"
            ],
            [
                "Alana Bregman"
            ],
            [
                "Jessie Eichman"
            ],
            [
                "Allie Rogalski"
            ],
            [
                "Nita Coster"
            ],
            [
                "Kurt Walser"
            ],
            [
                "Ericka Dieter"
            ],
            [
                "Loraine NygrenTania Mattioli"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT DISTINCT state ,  created FROM votes",
        "gold_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nRETURN DISTINCT votes.state,votes.created",
        "pre_sql": "select distinct state, created from votes",
        "pred_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nRETURN DISTINCT votes.state,votes.created",
        "question": "What are the distinct states and create time of all votes?",
        "answers": [
            [
                "NY",
                "2018-03-09 19:03:21"
            ],
            [
                "NY",
                "2018-03-09 19:03:36"
            ],
            [
                "CA",
                "2018-03-09 19:03:39"
            ],
            [
                "NJ\n",
                "2018-03-09 19:03:40"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "gold_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'NY' OR votes.state = 'CA'\nRETURN count(*)",
        "pre_sql": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "pred_sql2cypher": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'NY' OR votes.state = 'CA'\nRETURN count(*)",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT count(*) FROM conductor",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "pre_sql": "select count(*) from conductor",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "question": "How many conductors are there?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT count(*) FROM conductor",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "pre_sql": "select count(*) from conductor",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "question": "Count the number of conductors.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "pre_sql": "select name from conductor order by age asc",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "answers": [
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Antal Brown"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "pre_sql": "select name from conductor order by age",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age",
        "question": "What are the names of conductors, ordered by age?",
        "answers": [
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Antal Brown"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "pre_sql": "select name from conductor where nationality!= 'USA'",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "answers": [
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Robert Craft"
            ],
            [
                "Michael Tilson Thomas"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "pre_sql": "select name from conductor where nationality!= 'USA'",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "answers": [
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Robert Craft"
            ],
            [
                "Michael Tilson Thomas"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "pre_sql": "select record_company from orchestra order by year_of_founded desc",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "answers": [
            [
                "Columbia Masterworks"
            ],
            [
                "Philips"
            ],
            [
                "Philips Classics Records"
            ],
            [
                "RCA"
            ],
            [
                "EMI"
            ],
            [
                "Koch Records / Naxos Records"
            ],
            [
                "Decca Records"
            ],
            [
                "Mercury Records"
            ],
            [
                "Deutsche Grammophon"
            ],
            [
                "Kultur"
            ],
            [
                "Decca Records"
            ],
            [
                "Delos Records"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "pre_sql": "select record_company from orchestra order by year_of_founded desc",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "answers": [
            [
                "Columbia Masterworks"
            ],
            [
                "Philips"
            ],
            [
                "Philips Classics Records"
            ],
            [
                "RCA"
            ],
            [
                "EMI"
            ],
            [
                "Koch Records / Naxos Records"
            ],
            [
                "Decca Records"
            ],
            [
                "Mercury Records"
            ],
            [
                "Deutsche Grammophon"
            ],
            [
                "Kultur"
            ],
            [
                "Decca Records"
            ],
            [
                "Delos Records"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT avg(Attendance) FROM SHOW",
        "gold_sql2cypher": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "pre_sql": "select avg(attendance) from show",
        "pred_sql2cypher": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "question": "What is the average attendance of shows?",
        "answers": [
            [
                1326.4
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT avg(Attendance) FROM SHOW",
        "gold_sql2cypher": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "pre_sql": "select avg(attendance) from show",
        "pred_sql2cypher": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "question": "Return the average attendance across all shows.",
        "answers": [
            [
                1326.4
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "gold_sql2cypher": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "pre_sql": "select max(share), min(share) from performance where type!= \"Live final\"",
        "pred_sql2cypher": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "answers": [
            [
                "44.7%",
                "22.7%"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "gold_sql2cypher": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "pre_sql": "select max(share), min(share) from performance where type!= \"Live final\"",
        "pred_sql2cypher": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "answers": [
            [
                "44.7%",
                "22.7%"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "pre_sql": "select count(distinct nationality) from conductor",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "question": "How many different nationalities do conductors have?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "pre_sql": "select count(distinct nationality) from conductor",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "question": "Count the number of different nationalities of conductors.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "pre_sql": "select name from conductor order by year_of_work desc",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "answers": [
            [
                "Robert Craft"
            ],
            [
                "Antal Brown"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Colin Davis"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "pre_sql": "select name from conductor order by year_of_work desc",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "answers": [
            [
                "Robert Craft"
            ],
            [
                "Antal Brown"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Colin Davis"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "pre_sql": "select name from conductor order by year_of_work desc limit 1",
        "pred_sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "answers": [
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "gold_sql2cypher": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "pre_sql": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1",
        "pred_sql2cypher": "MATCH (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`)\nWITH count(*) AS count, t1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "answers": []
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "gold_sql2cypher": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "pre_sql": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1",
        "pred_sql2cypher": "MATCH (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`)\nWITH count(*) AS count, t1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "answers": []
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "gold_sql2cypher": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "pre_sql": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where t2.year_of_founded > 2008",
        "pred_sql2cypher": "MATCH (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`)\nWHERE t2.Year_of_Founded > 2008\nRETURN t1.Name",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "answers": [
            [
                "Igor Stravinsky"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "gold_sql2cypher": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "pre_sql": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where t2.year_of_founded > 2008",
        "pred_sql2cypher": "MATCH (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`)\nWHERE t2.Year_of_Founded > 2008\nRETURN t1.Name",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "answers": [
            [
                "Igor Stravinsky"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company,count(*)",
        "pre_sql": "select record_company, count(*) from orchestra group by record_company",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company,count(*)",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "answers": [
            [
                "Mercury Records",
                1
            ],
            [
                "Columbia Masterworks",
                1
            ],
            [
                "Philips",
                1
            ],
            [
                "Kultur",
                1
            ],
            [
                "Decca Records",
                2
            ],
            [
                "Delos Records",
                1
            ],
            [
                "Deutsche Grammophon",
                1
            ],
            [
                "Philips Classics Records",
                1
            ],
            [
                "Koch Records / Naxos Records",
                1
            ],
            [
                "EMI",
                1
            ],
            [
                "RCA",
                1
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company,count(*)",
        "pre_sql": "select record_company, count(*) from orchestra group by record_company",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company,count(*)",
        "question": "How many orchestras does each record company manage?",
        "answers": [
            [
                "Mercury Records",
                1
            ],
            [
                "Columbia Masterworks",
                1
            ],
            [
                "Philips",
                1
            ],
            [
                "Kultur",
                1
            ],
            [
                "Decca Records",
                2
            ],
            [
                "Delos Records",
                1
            ],
            [
                "Deutsche Grammophon",
                1
            ],
            [
                "Philips Classics Records",
                1
            ],
            [
                "Koch Records / Naxos Records",
                1
            ],
            [
                "EMI",
                1
            ],
            [
                "RCA",
                1
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Major_Record_Format\nORDER BY orchestra.Major_Record_Format ASC",
        "pre_sql": "select major_record_format from orchestra group by major_record_format order by count(*) desc",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Major_Record_Format\nORDER BY orchestra.Major_Record_Format DESC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "answers": [
            [
                "DVD"
            ],
            [
                "CD / LP"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ],
            [
                "CD"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra)-[]-(:`orchestra.performance`)    \nRETURN orchestra.Orchestra",
        "pre_sql": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra)-[]-(:`orchestra.performance`)    \nRETURN orchestra.Orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "answers": [
            [
                "San Francisco Symphony Orchestra"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "pre_sql": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "gold_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "pre_sql": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "pred_sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT count(*) FROM Highschooler",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "pre_sql": "select count(*) from highschooler",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "question": "How many high schoolers are there?",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT count(*) FROM Highschooler",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "pre_sql": "select count(*) from highschooler",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "question": "Count the number of high schoolers.",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT name ,  grade FROM Highschooler",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "pre_sql": "select name, grade from highschooler",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "question": "Show the names and grades of each high schooler.",
        "answers": [
            [
                "Jordan",
                9
            ],
            [
                "Gabriel",
                9
            ],
            [
                "Tiffany",
                9
            ],
            [
                "Cassandra",
                9
            ],
            [
                "Haley",
                10
            ],
            [
                "Andrew",
                10
            ],
            [
                "Kris",
                10
            ],
            [
                "Brittany",
                10
            ],
            [
                "Alexis",
                11
            ],
            [
                "Austin",
                11
            ],
            [
                "Gabriel",
                11
            ],
            [
                "Jessica",
                11
            ],
            [
                "Jordan",
                12
            ],
            [
                "John",
                12
            ],
            [
                "Kyle",
                12
            ],
            [
                "Logan",
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT name ,  grade FROM Highschooler",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "pre_sql": "select name, grade from highschooler",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "question": "What are the names and grades for each high schooler?",
        "answers": [
            [
                "Jordan",
                9
            ],
            [
                "Gabriel",
                9
            ],
            [
                "Tiffany",
                9
            ],
            [
                "Cassandra",
                9
            ],
            [
                "Haley",
                10
            ],
            [
                "Andrew",
                10
            ],
            [
                "Kris",
                10
            ],
            [
                "Brittany",
                10
            ],
            [
                "Alexis",
                11
            ],
            [
                "Austin",
                11
            ],
            [
                "Gabriel",
                11
            ],
            [
                "Jessica",
                11
            ],
            [
                "Jordan",
                12
            ],
            [
                "John",
                12
            ],
            [
                "Kyle",
                12
            ],
            [
                "Logan",
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "pre_sql": "select distinct grade from highschooler",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN DISTINCT highschooler.grade",
        "question": "Show all the grades of the high schoolers.",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "pre_sql": "select distinct grade from highschooler",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN DISTINCT highschooler.grade",
        "question": "What is the grade of each high schooler?",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "pre_sql": "select distinct grade from highschooler where name = 'Kyle'",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN DISTINCT highschooler.grade",
        "question": "What grade is Kyle in?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "pre_sql": "select distinct grade from highschooler where name = 'Kyle'",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN DISTINCT highschooler.grade",
        "question": "Return the grade for the high schooler named Kyle.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "pre_sql": "select name from highschooler where grade = 10",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "question": "Show the names of all high schoolers in grade 10.",
        "answers": [
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "pre_sql": "select name from highschooler where grade = 10",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "question": "What are the names of all high schoolers in grade 10?",
        "answers": [
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "pre_sql": "select id from highschooler where name = 'Kyle'",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "question": "Show the ID of the high schooler named Kyle.",
        "answers": [
            [
                1934
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "pre_sql": "select id from highschooler where name = 'Kyle'",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "question": "What is Kyle's id?",
        "answers": [
            [
                1934
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "pre_sql": "select count(*) from highschooler where grade = 9 or grade = 10",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "pre_sql": "select count(*) from highschooler where grade = 9 or grade = 10",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade,count(*)",
        "pre_sql": "select grade, count(*) from highschooler group by grade",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade,count(*)",
        "question": "How many high schoolers are in each grade?",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                4
            ],
            [
                11,
                4
            ],
            [
                12,
                4
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade\nORDER BY highschooler.grade DESC\nLIMIT 1",
        "pre_sql": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade\nORDER BY highschooler.grade DESC\nLIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade\nORDER BY highschooler.grade DESC\nLIMIT 1",
        "pre_sql": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade\nORDER BY highschooler.grade DESC\nLIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "pre_sql": "select distinct grade from highschooler group by grade having count(*) >= 4",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN DISTINCT grade",
        "question": "Show me all grades that have at least 4 students.",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "gold_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "pre_sql": "select grade from highschooler group by grade having count(*) >= 4",
        "pred_sql2cypher": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "question": "Which grades have 4 or more high schoolers?",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH T1.first_name AS first_name, T1.role_code AS role_code, count(*) AS count, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "pre_sql": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Professionals`)-[]-(t2:`dog_kennels.Treatments`)\nWITH t1.professional_id AS professional_id, t1.role_code AS role_code, t1.first_name AS first_name, count(*) AS count\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "answers": [
            [
                4,
                "Veterenarian",
                "Vernice"
            ],
            [
                6,
                "Veterenarian",
                "Ruben"
            ],
            [
                8,
                "Employee",
                "Karley"
            ],
            [
                9,
                "Veterenarian",
                "Monte"
            ],
            [
                10,
                "Employee",
                "Domenica"
            ],
            [
                14,
                "Employee",
                "Sigurd"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH T1.first_name AS first_name, T1.role_code AS role_code, count(*) AS count, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "pre_sql": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Professionals`)-[]-(t2:`dog_kennels.Treatments`)\nWITH t1.professional_id AS professional_id, t1.role_code AS role_code, t1.first_name AS first_name, count(*) AS count\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "answers": [
            [
                4,
                "Veterenarian",
                "Vernice"
            ],
            [
                6,
                "Veterenarian",
                "Ruben"
            ],
            [
                8,
                "Employee",
                "Karley"
            ],
            [
                9,
                "Veterenarian",
                "Monte"
            ],
            [
                10,
                "Employee",
                "Domenica"
            ],
            [
                14,
                "Employee",
                "Sigurd"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1, count(T1.breed_name) AS cnt\nRETURN T1.breed_name\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Breeds`)-[]-(t2:`dog_kennels.Dogs`)\nWITH t1, count(t1.breed_name) AS cnt\nRETURN t1.breed_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "answers": [
            [
                "Bulldog"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1, count(T1.breed_name) AS cnt\nRETURN T1.breed_name\nORDER BY cnt DESC\nLIMIT 1",
        "pre_sql": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Breeds`)-[]-(t2:`dog_kennels.Dogs`)\nWITH t1, count(t1.breed_name) AS cnt\nRETURN t1.breed_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "answers": [
            [
                "Bulldog"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH T1.cell_number AS cell_number, count(*) AS count, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "pre_sql": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Professionals`)-[]-(t2:`dog_kennels.Treatments`)\nWITH t1.professional_id AS professional_id, t1.cell_number AS cell_number, count(*) AS count\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "answers": [
            [
                4,
                "00230569697"
            ],
            [
                6,
                "139-321-7313"
            ],
            [
                8,
                "328.842.3792"
            ],
            [
                9,
                "962-983-8109x3509"
            ],
            [
                10,
                "461-801-2600"
            ],
            [
                14,
                "1-185-137-1945x409"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH T1.cell_number AS cell_number, count(*) AS count, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "pre_sql": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Professionals`)-[]-(t2:`dog_kennels.Treatments`)\nWITH t1.professional_id AS professional_id, t1.cell_number AS cell_number, count(*) AS count\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "answers": [
            [
                4,
                "00230569697"
            ],
            [
                6,
                "139-321-7313"
            ],
            [
                8,
                "328.842.3792"
            ],
            [
                9,
                "962-983-8109x3509"
            ],
            [
                10,
                "461-801-2600"
            ],
            [
                14,
                "1-185-137-1945x409"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "pre_sql": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Treatments`)-[]-(t2:`dog_kennels.Professionals`)\nRETURN t1.date_of_treatment,t2.first_name",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "answers": [
            [
                "2018-03-08 05:26:23",
                "Vernice"
            ],
            [
                "2018-03-11 04:23:15",
                "Vernice"
            ],
            [
                "2018-03-13 12:22:58",
                "Danny"
            ],
            [
                "2018-03-24 22:25:58",
                "Ruben"
            ],
            [
                "2018-03-15 19:10:02",
                "Ruben"
            ],
            [
                "2018-02-28 17:09:43",
                "Velva"
            ],
            [
                "2018-02-26 09:08:53",
                "Karley"
            ],
            [
                "2018-03-01 04:14:46",
                "Karley"
            ],
            [
                "2018-03-04 20:33:43",
                "Monte"
            ],
            [
                "2018-03-19 04:39:54",
                "Monte"
            ],
            [
                "2018-03-16 10:27:36",
                "Monte"
            ],
            [
                "2018-03-14 19:10:40",
                "Domenica"
            ],
            [
                "2018-03-15 20:25:34",
                "Domenica"
            ],
            [
                "2018-03-10 11:45:58",
                "Sigurd"
            ],
            [
                "2018-03-23 13:52:10",
                "Sigurd"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "pre_sql": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.dog_id",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Owners`)-[]-(t2:`dog_kennels.Dogs`)\nRETURN t1.first_name,t2.name",
        "question": "What are each owner's first name and their dogs's name?",
        "answers": [
            [
                "Nora",
                "Mavis"
            ],
            [
                "Melisa",
                "Bessie"
            ],
            [
                "Jaclyn",
                "Kacey"
            ],
            [
                "Jaclyn",
                "Narciso"
            ],
            [
                "Johann",
                "Merritt"
            ],
            [
                "Kade",
                "Troy"
            ],
            [
                "Emelie",
                "Jeffrey"
            ],
            [
                "Rolando",
                "Jesus"
            ],
            [
                "Lorenz",
                "Evangeline"
            ],
            [
                "Gay",
                "Hipolito"
            ],
            [
                "Orlando",
                "Holden"
            ],
            [
                "Cindy",
                "Betty"
            ],
            [
                "Rachelle",
                "Houston"
            ],
            [
                "Rachelle",
                "Lyric"
            ],
            [
                "Rachelle",
                "George"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "pre_sql": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.dog_id where t1.state = 'Virginia'",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Owners`)-[]-(t2:`dog_kennels.Dogs`)\nWHERE t1.state = 'Virginia'\nRETURN t1.first_name,t2.name",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "answers": [
            [
                "Melisa",
                "Bessie"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "pre_sql": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.dog_id where t1.state = \"Virginia\"",
        "pred_sql2cypher": "MATCH (t1:`dog_kennels.Owners`)-[]-(t2:`dog_kennels.Dogs`)\nWHERE t1.state = 'Virginia'\nRETURN t1.first_name,t2.name",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "answers": [
            [
                "Melisa",
                "Bessie"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "gold_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "pre_sql": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "pred_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "answers": [
            [
                "uboehm@example.org"
            ],
            [
                "mekhi.little@example.org"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "gold_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "pre_sql": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "pred_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "answers": [
            [
                "uboehm@example.org"
            ],
            [
                "mekhi.little@example.org"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
        "gold_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "pre_sql": "select date_arrived, date_departed from dogs",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "answers": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
        "gold_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "pre_sql": "select date_arrived, date_departed from dogs",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "question": "List the arrival date and the departure date for all the dogs.",
        "answers": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "gold_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "pre_sql": "select count(distinct dog_id) from treatments",
        "pred_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "question": "Count the number of dogs that went through a treatment.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "gold_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "pre_sql": "select count(distinct professional_id) from treatments",
        "pred_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "question": "Find the number of professionals who have ever treated dogs.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "pre_sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "pred_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "answers": [
            [
                407
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "pre_sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "pred_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "answers": [
            [
                407
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT max(age) FROM Dogs",
        "gold_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "pre_sql": "select age from dogs order by age desc limit 1",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.age\nORDER BY dogs.age DESC\nLIMIT 1",
        "question": "What is the age of the oldest dog?",
        "answers": [
            [
                "9"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT max(age) FROM Dogs",
        "gold_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "pre_sql": "select age from dogs order by age desc limit 1",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.age\nORDER BY dogs.age DESC\nLIMIT 1",
        "question": "Tell me the age of the oldest dog.",
        "answers": [
            [
                "9"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "gold_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "pre_sql": "select charge_type, charge_amount from charges",
        "pred_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "answers": [
            [
                "Daily Accommodation",
                98
            ],
            [
                "Drugs",
                322
            ],
            [
                "Health Check",
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "gold_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "pre_sql": "select charge_type, charge_amount from charges",
        "pred_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "question": "List each charge type and its amount.",
        "answers": [
            [
                "Daily Accommodation",
                98
            ],
            [
                "Drugs",
                322
            ],
            [
                "Health Check",
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT max(charge_amount) FROM Charges",
        "gold_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "pre_sql": "select charge_amount from charges order by charge_amount desc limit 1",
        "pred_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_amount\nORDER BY charges.charge_amount DESC\nLIMIT 1",
        "question": "How much does the most expensive charge type costs?",
        "answers": [
            [
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT max(charge_amount) FROM Charges",
        "gold_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "pre_sql": "select charge_amount from charges order by charge_type desc limit 1",
        "pred_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_amount\nORDER BY charges.charge_type DESC\nLIMIT 1",
        "question": "What is the charge amount of the most expensive charge type?",
        "answers": [
            [
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "gold_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "pre_sql": "select email_address, cell_number, home_phone from professionals",
        "pred_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "answers": [
            [
                "deanna.schuster@example.com",
                "(275)939-2435x80863",
                "+71(6)2898266914"
            ],
            [
                "lucile.shanahan@example.org",
                "889-940-2676",
                "+02(1)0259033559"
            ],
            [
                "uboehm@example.org",
                "(369)908-7311x065",
                "325-155-0801x7005"
            ],
            [
                "lourdes.lowe@example.net",
                "00230569697",
                "312.216.3352"
            ],
            [
                "mekhi.little@example.org",
                "011.193.9081x3186",
                "1-609-566-2752x25197"
            ],
            [
                "jacynthe.mclaughlin@example.net",
                "139-321-7313",
                "+43(5)1132733868"
            ],
            [
                "lambert62@example.org",
                "499-434-0215x1628",
                "022.529.0550x1319"
            ],
            [
                "goyette.roosevelt@example.net",
                "328.842.3792",
                "891.475.2256"
            ],
            [
                "schneider.kathryne@example.org",
                "962-983-8109x3509",
                "320-508-6023"
            ],
            [
                "jerrod.bahringer@example.org",
                "461-801-2600",
                "(230)338-3342x585"
            ],
            [
                "west.eula@example.net",
                "609-405-2990",
                "(920)304-4499x59146"
            ],
            [
                "marquardt.furman@example.org",
                "1-181-670-9466",
                "246-951-0080x76716"
            ],
            [
                "delphine29@example.com",
                "880-659-7577x736",
                "346.594.3739"
            ],
            [
                "cole.margarita@example.org",
                "1-185-137-1945x409",
                "971.048.3763x9404"
            ],
            [
                "jeichmann@example.com",
                "1-258-285-4707x8020",
                "1-138-287-3775"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "gold_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "pre_sql": "select email_address, cell_number, home_phone from professionals",
        "pred_sql2cypher": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "question": "What are the email, cell phone and home phone of each professional?",
        "answers": [
            [
                "deanna.schuster@example.com",
                "(275)939-2435x80863",
                "+71(6)2898266914"
            ],
            [
                "lucile.shanahan@example.org",
                "889-940-2676",
                "+02(1)0259033559"
            ],
            [
                "uboehm@example.org",
                "(369)908-7311x065",
                "325-155-0801x7005"
            ],
            [
                "lourdes.lowe@example.net",
                "00230569697",
                "312.216.3352"
            ],
            [
                "mekhi.little@example.org",
                "011.193.9081x3186",
                "1-609-566-2752x25197"
            ],
            [
                "jacynthe.mclaughlin@example.net",
                "139-321-7313",
                "+43(5)1132733868"
            ],
            [
                "lambert62@example.org",
                "499-434-0215x1628",
                "022.529.0550x1319"
            ],
            [
                "goyette.roosevelt@example.net",
                "328.842.3792",
                "891.475.2256"
            ],
            [
                "schneider.kathryne@example.org",
                "962-983-8109x3509",
                "320-508-6023"
            ],
            [
                "jerrod.bahringer@example.org",
                "461-801-2600",
                "(230)338-3342x585"
            ],
            [
                "west.eula@example.net",
                "609-405-2990",
                "(920)304-4499x59146"
            ],
            [
                "marquardt.furman@example.org",
                "1-181-670-9466",
                "246-951-0080x76716"
            ],
            [
                "delphine29@example.com",
                "880-659-7577x736",
                "346.594.3739"
            ],
            [
                "cole.margarita@example.org",
                "1-185-137-1945x409",
                "971.048.3763x9404"
            ],
            [
                "jeichmann@example.com",
                "1-258-285-4707x8020",
                "1-138-287-3775"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT count(*) FROM singer",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "pre_sql": "select count(*) from singer",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "question": "How many singers are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT count(*) FROM singer",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "pre_sql": "select count(*) from singer",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "question": "What is the count of singers?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "pre_sql": "select name from singer order by net_worth_millions asc",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "answers": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "pre_sql": "select name from singer order by net_worth_millions asc",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "answers": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "pre_sql": "select birth_year, citizenship from singer",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "question": "What are the birth year and citizenship of singers?",
        "answers": [
            [
                1944.0,
                "France"
            ],
            [
                1948.0,
                "United States"
            ],
            [
                1949.0,
                "United States"
            ],
            [
                1942.0,
                "Chile"
            ],
            [
                1940.0,
                "United States"
            ],
            [
                1953.0,
                "Australia"
            ],
            [
                1962.0,
                "Germany"
            ],
            [
                1961.0,
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "pre_sql": "select birth_year, citizenship from singer",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "question": "What are the birth years and citizenships of the singers?",
        "answers": [
            [
                1944.0,
                "France"
            ],
            [
                1948.0,
                "United States"
            ],
            [
                1949.0,
                "United States"
            ],
            [
                1942.0,
                "Chile"
            ],
            [
                1940.0,
                "United States"
            ],
            [
                1953.0,
                "Australia"
            ],
            [
                1962.0,
                "Germany"
            ],
            [
                1961.0,
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "pre_sql": "select name from singer where citizenship!= 'France'",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "pre_sql": "select name from singer where citizenship!= \"France\"",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "question": "What are the names of the singers who are not French citizens?",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "pre_sql": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "pre_sql": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "pre_sql": "select name from singer order by net_worth_millions desc limit 1",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "answers": [
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "pre_sql": "select name from singer order by net_worth_millions desc limit 1",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "answers": [
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,count(*)",
        "pre_sql": "select citizenship, count(*) from singer group by citizenship",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,count(*)",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "answers": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,count(*)",
        "pre_sql": "select citizenship, count(*) from singer group by citizenship",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,count(*)",
        "question": "For each citizenship, how many singers are from that country?",
        "answers": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship\nORDER BY singer.Citizenship DESC\nLIMIT 1",
        "pre_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship\nORDER BY singer.Citizenship DESC\nLIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship\nORDER BY singer.Citizenship DESC\nLIMIT 1",
        "pre_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship\nORDER BY singer.Citizenship DESC\nLIMIT 1",
        "question": "What is the most common singer citizenship ?",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,max(singer.Net_Worth_Millions)",
        "pre_sql": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,max(singer.Net_Worth_Millions)",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "answers": [
            [
                "France",
                30.0
            ],
            [
                "United States",
                28.8
            ],
            [
                "Chile",
                17.4
            ],
            [
                "Australia",
                17.0
            ],
            [
                "Germany",
                14.3
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,max(singer.Net_Worth_Millions)",
        "pre_sql": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,max(singer.Net_Worth_Millions)",
        "question": "For each citizenship, what is the maximum net worth?",
        "answers": [
            [
                "France",
                30.0
            ],
            [
                "United States",
                28.8
            ],
            [
                "Chile",
                17.4
            ],
            [
                "Australia",
                17.0
            ],
            [
                "Germany",
                14.3
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "gold_sql2cypher": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "pre_sql": "select t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id having count(*) > 1",
        "pred_sql2cypher": "MATCH (t1:`singer.song`)-[]-(t2:`singer.singer`)\nWITH t2.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Show the names of singers that have more than one song.",
        "answers": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "gold_sql2cypher": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "pre_sql": "select t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id having count(*) > 1",
        "pred_sql2cypher": "MATCH (t1:`singer.song`)-[]-(t2:`singer.singer`)\nWITH t2.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "What are the names of the singers that have more than one songs?",
        "answers": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer)-[]-(:`singer.song`)    \nRETURN singer.Name",
        "pre_sql": "select name from singer where singer_id not in (select singer_id from song)",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer)-[]-(:`singer.song`)    \nRETURN singer.Name",
        "question": "List the name of singers that do not have any song.",
        "answers": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer)-[]-(:`singer.song`)    \nRETURN singer.Name",
        "pre_sql": "select name from singer where singer_id not in (select singer_id from song)",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer)-[]-(:`singer.song`)    \nRETURN singer.Name",
        "question": "What is the sname of every sing that does not have any song?",
        "answers": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "real_estate_properties",
        "gold_sql": "SELECT count(*) FROM Other_Available_Features",
        "gold_sql2cypher": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`)\nRETURN count(*)",
        "pre_sql": "select count(*) from other_available_features",
        "pred_sql2cypher": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`)\nRETURN count(*)",
        "question": "How many available features are there in total?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "real_estate_properties",
        "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "gold_sql2cypher": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`)\nRETURN T2.property_type_description",
        "pre_sql": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "pred_sql2cypher": "MATCH (t1:`real_estate_properties.Ref_Property_Types`)-[]-(t2:`real_estate_properties.Properties`)\nRETURN t1.property_type_description",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "answers": [
            [
                "House, Bungalow, etc."
            ],
            [
                "House, Bungalow, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Field, Meadow."
            ],
            [
                "Other, to be determined."
            ],
            [
                "Other, to be determined."
            ],
            [
                "Other, to be determined."
            ],
            [
                "Other, to be determined."
            ],
            [
                "Shop, Retail Outlet."
            ],
            [
                "Shop, Retail Outlet."
            ]
        ]
    }
]