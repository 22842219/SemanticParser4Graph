[
    {
        "db_id": "concert_singer",
        "index": 5,
        "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "gold_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "gold_ans": [
            [
                34.5,
                25,
                43
            ]
        ],
        "pre_sql": "select avg(age), min(age), max(age) from singer where is_male = 'F'",
        "pred_sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Is_male = 'F'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "pred_ans": [
            [
                46.5,
                41,
                52
            ]
        ],
        "question": "What is the average, minimum, and maximum age for all French singers?"
    },
    {
        "db_id": "concert_singer",
        "index": 16,
        "gold_sql": "select avg(capacity) ,  max(capacity) from stadium",
        "gold_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "gold_ans": [
            [
                10621.666666666666,
                52500
            ]
        ],
        "pre_sql": "select average, max(capacity) from stadium",
        "pred_sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Average,max(stadium.Capacity)",
        "pred_ans": [
            [
                2106,
                10104
            ],
            [
                1477,
                11998
            ],
            [
                864,
                2000
            ],
            [
                730,
                52500
            ],
            [
                642,
                3808
            ],
            [
                638,
                4125
            ],
            [
                637,
                3100
            ],
            [
                615,
                4000
            ],
            [
                552,
                3960
            ]
        ],
        "question": "What is the average and maximum capacities for all stadiums ?"
    },
    {
        "db_id": "pets_1",
        "index": 40,
        "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "pre_sql": "select count(*) from pets where pettype = \"dog\" order by pet_age asc limit 1",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.PetType = 'dog'\nRETURN count(*)\nORDER BY pets.pet_age ASC\nLIMIT 1",
        "question": "How much does the youngest dog weigh?"
    },
    {
        "db_id": "pets_1",
        "index": 44,
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.Age > 20\nRETURN count(*)",
        "gold_ans": [
            [
                0
            ]
        ],
        "pre_sql": "select count(*), t1.petid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.age > 20",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Pets`)-[t1:`pets_1.Has_Pet`]-(t3:`pets_1.Student`)\nWHERE t3.Age > 20\nRETURN count(*),t1.PetID",
        "pred_ans": [],
        "question": "How many pets are owned by students that have an age greater than 20?"
    },
    {
        "db_id": "pets_1",
        "index": 45,
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-(T3:`pets_1.Pets`)\nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'\nRETURN count(*)",
        "gold_ans": [
            [
                2
            ]
        ],
        "pre_sql": "select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.sex = 'F'",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Pets`)-[t1:`pets_1.Has_Pet`]-(t3:`pets_1.Student`)\nWHERE t3.Sex = 'F'\nRETURN count(*)",
        "pred_ans": [
            [
                3
            ]
        ],
        "question": "Find the number of dog pets that are raised by female students (with sex F)."
    },
    {
        "db_id": "pets_1",
        "index": 46,
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "gold_sql2cypher": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-(T3:`pets_1.Pets`)\nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'\nRETURN count(*)",
        "gold_ans": [
            [
                2
            ]
        ],
        "pre_sql": "select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.sex = 'F'",
        "pred_sql2cypher": "MATCH (t2:`pets_1.Pets`)-[t1:`pets_1.Has_Pet`]-(t3:`pets_1.Student`)\nWHERE t3.Sex = 'F'\nRETURN count(*)",
        "pred_ans": [
            [
                3
            ]
        ],
        "question": "How many dog pets are raised by female students?"
    },
    {
        "db_id": "pets_1",
        "index": 52,
        "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "gold_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "gold_ans": [
            [
                "dog",
                9.3
            ]
        ],
        "pre_sql": "select pettype, min(weight) from pets group by pettype order by count(*) asc limit 1",
        "pred_sql2cypher": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,min(pets.weight)\nORDER BY pets.PetType ASC\nLIMIT 1",
        "pred_ans": [
            [
                "cat",
                12.0
            ]
        ],
        "question": "What type of pet is the youngest animal, and how much does it weigh?"
    },
    {
        "db_id": "pets_1",
        "index": 64,
        "gold_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "gold_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-()\nRETURN count(*),t1.StuID",
        "gold_ans": [
            [
                1,
                1001
            ],
            [
                2,
                1002
            ]
        ],
        "pre_sql": "select t1.stuid, count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "pred_sql2cypher": "MATCH (t1:`pets_1.Student`)-[t2:`pets_1.Has_Pet`]-()\nRETURN t1.StuID,count(*)",
        "pred_ans": [
            [
                1001,
                1
            ],
            [
                1002,
                2
            ]
        ],
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names ."
    },
    {
        "db_id": "car_1",
        "index": 76,
        "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "gold_sql2cypher": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nRETURN T1.FullName,T1.Id,count(*)",
        "gold_ans": [
            [
                "American Motor Company",
                1,
                1
            ],
            [
                "Volkswagen",
                2,
                2
            ],
            [
                "BMW",
                3,
                1
            ],
            [
                "General Motors",
                4,
                5
            ],
            [
                "Ford Motor Company",
                5,
                3
            ],
            [
                "Chrysler",
                6,
                4
            ],
            [
                "Citroen",
                7,
                1
            ],
            [
                "Nissan Motors",
                8,
                2
            ],
            [
                "Fiat",
                9,
                1
            ],
            [
                "Honda",
                11,
                1
            ],
            [
                "Mazda",
                12,
                1
            ],
            [
                "Daimler Benz",
                13,
                2
            ],
            [
                "Opel",
                14,
                1
            ],
            [
                "Peugeaut",
                15,
                1
            ],
            [
                "Renault",
                16,
                1
            ],
            [
                "Saab",
                17,
                1
            ],
            [
                "Subaru",
                18,
                1
            ],
            [
                "Toyota",
                19,
                2
            ],
            [
                "Triumph",
                20,
                1
            ],
            [
                "Volvo",
                21,
                1
            ],
            [
                "Kia Motors",
                22,
                1
            ],
            [
                "Hyundai",
                23,
                1
            ]
        ],
        "pre_sql": "select t1.fullname, t2.maker from car_makers as t1 join model_list as t2 on t1.maker = t2.maker group by t2.maker",
        "pred_sql2cypher": "MATCH (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`)\nRETURN t1.FullName,t2.Maker",
        "pred_ans": [
            [
                "American Motor Company",
                1
            ],
            [
                "Volkswagen",
                2
            ],
            [
                "Volkswagen",
                2
            ],
            [
                "BMW",
                3
            ],
            [
                "General Motors",
                4
            ],
            [
                "General Motors",
                4
            ],
            [
                "General Motors",
                4
            ],
            [
                "General Motors",
                4
            ],
            [
                "General Motors",
                4
            ],
            [
                "Ford Motor Company",
                5
            ],
            [
                "Ford Motor Company",
                5
            ],
            [
                "Ford Motor Company",
                5
            ],
            [
                "Chrysler",
                6
            ],
            [
                "Chrysler",
                6
            ],
            [
                "Chrysler",
                6
            ],
            [
                "Chrysler",
                6
            ],
            [
                "Citroen",
                7
            ],
            [
                "Nissan Motors",
                8
            ],
            [
                "Nissan Motors",
                8
            ],
            [
                "Fiat",
                9
            ],
            [
                "Honda",
                11
            ],
            [
                "Mazda",
                12
            ],
            [
                "Daimler Benz",
                13
            ],
            [
                "Daimler Benz",
                13
            ],
            [
                "Opel",
                14
            ],
            [
                "Peugeaut",
                15
            ],
            [
                "Renault",
                16
            ],
            [
                "Saab",
                17
            ],
            [
                "Subaru",
                18
            ],
            [
                "Toyota",
                19
            ],
            [
                "Toyota",
                19
            ],
            [
                "Triumph",
                20
            ],
            [
                "Volvo",
                21
            ],
            [
                "Kia Motors",
                22
            ],
            [
                "Hyundai",
                23
            ]
        ],
        "question": "What is the full name of each car maker, along with its id and how many models it produces?"
    },
    {
        "db_id": "car_1",
        "index": 81,
        "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "gold_sql2cypher": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)-[]-(T3:`car_1.car_makers`)\nRETURN T1.Continent,count(*)",
        "gold_ans": [
            [
                "america",
                4
            ],
            [
                "europe",
                11
            ],
            [
                "asia",
                7
            ]
        ],
        "pre_sql": "select t2.fullname, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.id group by t1.contid",
        "pred_sql2cypher": "MATCH (t1:`car_1.continents`)-[]-(t2:`car_1.car_makers`)\nRETURN t2.FullName,count(*)",
        "pred_ans": [],
        "question": "How many car makers are there in each continents? List the continent name and the count."
    },
    {
        "db_id": "car_1",
        "index": 83,
        "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "gold_sql2cypher": "MATCH (t1:`car_1.model_list`)-[]-(t2:`car_1.car_makers`)\nRETURN count(*),t2.FullName",
        "gold_ans": [
            [
                1,
                "American Motor Company"
            ],
            [
                2,
                "Volkswagen"
            ],
            [
                1,
                "BMW"
            ],
            [
                5,
                "General Motors"
            ],
            [
                3,
                "Ford Motor Company"
            ],
            [
                4,
                "Chrysler"
            ],
            [
                1,
                "Citroen"
            ],
            [
                2,
                "Nissan Motors"
            ],
            [
                1,
                "Fiat"
            ],
            [
                1,
                "Honda"
            ],
            [
                1,
                "Mazda"
            ],
            [
                2,
                "Daimler Benz"
            ],
            [
                1,
                "Opel"
            ],
            [
                1,
                "Peugeaut"
            ],
            [
                1,
                "Renault"
            ],
            [
                1,
                "Saab"
            ],
            [
                1,
                "Subaru"
            ],
            [
                2,
                "Toyota"
            ],
            [
                1,
                "Triumph"
            ],
            [
                1,
                "Volvo"
            ],
            [
                1,
                "Kia Motors"
            ],
            [
                1,
                "Hyundai"
            ]
        ],
        "pre_sql": "select count(*), t1.maker from car_makers as t1 join model_list as t2 on t1.maker = t2.maker group by t1.maker",
        "pred_sql2cypher": "MATCH (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`)\nRETURN count(*),t1.Maker",
        "pred_ans": [
            [
                1,
                "amc"
            ],
            [
                2,
                "volkswagen"
            ],
            [
                1,
                "bmw"
            ],
            [
                5,
                "gm"
            ],
            [
                3,
                "ford"
            ],
            [
                4,
                "chrysler"
            ],
            [
                1,
                "citroen"
            ],
            [
                2,
                "nissan"
            ],
            [
                1,
                "fiat"
            ],
            [
                1,
                "honda"
            ],
            [
                1,
                "mazda"
            ],
            [
                2,
                "daimler benz"
            ],
            [
                1,
                "opel"
            ],
            [
                1,
                "peugeaut"
            ],
            [
                1,
                "renault"
            ],
            [
                1,
                "saab"
            ],
            [
                1,
                "subaru"
            ],
            [
                2,
                "toyota"
            ],
            [
                1,
                "triumph"
            ],
            [
                1,
                "volvo"
            ],
            [
                1,
                "kia"
            ],
            [
                1,
                "hyundai"
            ]
        ],
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name ."
    },
    {
        "db_id": "car_1",
        "index": 84,
        "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "gold_sql2cypher": "MATCH (T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nRETURN count(*),T2.FullName,T2.Id",
        "gold_ans": [
            [
                1,
                "American Motor Company",
                1
            ],
            [
                2,
                "Volkswagen",
                2
            ],
            [
                1,
                "BMW",
                3
            ],
            [
                5,
                "General Motors",
                4
            ],
            [
                3,
                "Ford Motor Company",
                5
            ],
            [
                4,
                "Chrysler",
                6
            ],
            [
                1,
                "Citroen",
                7
            ],
            [
                2,
                "Nissan Motors",
                8
            ],
            [
                1,
                "Fiat",
                9
            ],
            [
                1,
                "Honda",
                11
            ],
            [
                1,
                "Mazda",
                12
            ],
            [
                2,
                "Daimler Benz",
                13
            ],
            [
                1,
                "Opel",
                14
            ],
            [
                1,
                "Peugeaut",
                15
            ],
            [
                1,
                "Renault",
                16
            ],
            [
                1,
                "Saab",
                17
            ],
            [
                1,
                "Subaru",
                18
            ],
            [
                2,
                "Toyota",
                19
            ],
            [
                1,
                "Triumph",
                20
            ],
            [
                1,
                "Volvo",
                21
            ],
            [
                1,
                "Kia Motors",
                22
            ],
            [
                1,
                "Hyundai",
                23
            ]
        ],
        "pre_sql": "select count(*), t1.maker, t1.fullname from car_makers as t1 join model_list as t2 on t1.maker = t2.maker group by t1.maker",
        "pred_sql2cypher": "MATCH (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`)\nRETURN count(*),t1.Maker,t1.FullName",
        "pred_ans": [
            [
                1,
                "amc",
                "American Motor Company"
            ],
            [
                2,
                "volkswagen",
                "Volkswagen"
            ],
            [
                1,
                "bmw",
                "BMW"
            ],
            [
                5,
                "gm",
                "General Motors"
            ],
            [
                3,
                "ford",
                "Ford Motor Company"
            ],
            [
                4,
                "chrysler",
                "Chrysler"
            ],
            [
                1,
                "citroen",
                "Citroen"
            ],
            [
                2,
                "nissan",
                "Nissan Motors"
            ],
            [
                1,
                "fiat",
                "Fiat"
            ],
            [
                1,
                "honda",
                "Honda"
            ],
            [
                1,
                "mazda",
                "Mazda"
            ],
            [
                2,
                "daimler benz",
                "Daimler Benz"
            ],
            [
                1,
                "opel",
                "Opel"
            ],
            [
                1,
                "peugeaut",
                "Peugeaut"
            ],
            [
                1,
                "renault",
                "Renault"
            ],
            [
                1,
                "saab",
                "Saab"
            ],
            [
                1,
                "subaru",
                "Subaru"
            ],
            [
                2,
                "toyota",
                "Toyota"
            ],
            [
                1,
                "triumph",
                "Triumph"
            ],
            [
                1,
                "volvo",
                "Volvo"
            ],
            [
                1,
                "kia",
                "Kia Motors"
            ],
            [
                1,
                "hyundai",
                "Hyundai"
            ]
        ],
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?"
    },
    {
        "db_id": "car_1",
        "index": 87,
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "gold_sql2cypher": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "gold_ans": [
            [
                3
            ]
        ],
        "pre_sql": "select count(*) from car_makers where country = \"france\"",
        "pred_sql2cypher": "MATCH (car_makers:`car_1.car_makers`)\nWHERE car_makers.Country = 'france'\nRETURN count(*)",
        "pred_ans": [
            [
                0
            ]
        ],
        "question": "How many car makers are there in france?"
    },
    {
        "db_id": "car_1",
        "index": 88,
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "gold_sql2cypher": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "gold_ans": [
            [
                3
            ]
        ],
        "pre_sql": "select count(*) from car_makers where country = \"france\"",
        "pred_sql2cypher": "MATCH (car_makers:`car_1.car_makers`)\nWHERE car_makers.Country = 'france'\nRETURN count(*)",
        "pred_ans": [
            [
                0
            ]
        ],
        "question": "What is the number of makers of care in France?"
    },
    {
        "db_id": "car_1",
        "index": 89,
        "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "gold_sql2cypher": "MATCH (T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)-[]-(T3:`car_1.countries`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "gold_ans": [
            [
                13
            ]
        ],
        "pre_sql": "select count(*) from countries where countryname = \"usa\"",
        "pred_sql2cypher": "MATCH (countries:`car_1.countries`)\nWHERE countries.CountryName = 'usa'\nRETURN count(*)",
        "pred_ans": [
            [
                1
            ]
        ],
        "question": "How many car models are produced in the usa?"
    },
    {
        "db_id": "car_1",
        "index": 91,
        "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "gold_ans": [
            [
                4141
            ]
        ],
        "pre_sql": "select min(weight), cylinders from cars_data where year = 1974 order by cylinders desc limit 8",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1974\nRETURN min(cars_data.Weight),cars_data.Cylinders\nORDER BY cars_data.Cylinders DESC\nLIMIT 8",
        "pred_ans": [
            [
                4141,
                8
            ],
            [
                2875,
                6
            ],
            [
                1649,
                4
            ]
        ],
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?"
    },
    {
        "db_id": "car_1",
        "index": 92,
        "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "gold_ans": [
            [
                4141
            ]
        ],
        "pre_sql": "select min(weight), cylinders from cars_data where year = 1974 group by cylinders",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1974\nRETURN min(cars_data.Weight),cars_data.Cylinders",
        "pred_ans": [
            [
                2875,
                6
            ],
            [
                1649,
                4
            ],
            [
                4141,
                8
            ]
        ],
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?"
    },
    {
        "db_id": "car_1",
        "index": 103,
        "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nRETURN max(cars_data.Accelerate),cars_data.Cylinders",
        "gold_ans": [
            [
                22.2,
                8
            ],
            [
                24.8,
                4
            ],
            [
                21.0,
                6
            ],
            [
                13.5,
                3
            ],
            [
                20.1,
                5
            ]
        ],
        "pre_sql": "select accelerate from cars_data group by accelerate order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nRETURN cars_data.Accelerate\nORDER BY cars_data.Accelerate DESC\nLIMIT 1",
        "pred_ans": [
            [
                24.8
            ]
        ],
        "question": "What is the maximum accelerate for different number of cylinders?"
    },
    {
        "db_id": "car_1",
        "index": 110,
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "gold_sql2cypher": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "gold_ans": [
            [
                1
            ]
        ],
        "pre_sql": "select count(*) from car_makers where maker = \"American Motor Company\"",
        "pred_sql2cypher": "MATCH (car_makers:`car_1.car_makers`)\nWHERE car_makers.Maker = 'American Motor Company'\nRETURN count(*)",
        "pred_ans": [
            [
                0
            ]
        ],
        "question": "What is the number of car models created by the car maker American Motor Company?"
    },
    {
        "db_id": "car_1",
        "index": 113,
        "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "gold_ans": [
            [
                1970
            ],
            [
                1971
            ],
            [
                1972
            ],
            [
                1973
            ],
            [
                1974
            ],
            [
                1975
            ],
            [
                1976
            ],
            [
                1977
            ],
            [
                1978
            ],
            [
                1979
            ],
            [
                1980
            ],
            [
                1981
            ],
            [
                1982
            ]
        ],
        "pre_sql": "select year from cars_data where weight  < 3000 and weight > 4000",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Weight < 3000 AND cars_data.Weight > 4000\nRETURN cars_data.Year",
        "pred_ans": [],
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?"
    },
    {
        "db_id": "car_1",
        "index": 114,
        "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "gold_ans": [
            [
                1970
            ],
            [
                1971
            ],
            [
                1972
            ],
            [
                1973
            ],
            [
                1974
            ],
            [
                1975
            ],
            [
                1976
            ],
            [
                1977
            ],
            [
                1978
            ],
            [
                1979
            ],
            [
                1980
            ],
            [
                1981
            ],
            [
                1982
            ]
        ],
        "pre_sql": "select distinct year from cars_data where weight  < 4000 and year > 3000",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Weight < 4000 AND cars_data.Year > 3000\nRETURN DISTINCT cars_data.Year",
        "pred_ans": [],
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"
    },
    {
        "db_id": "car_1",
        "index": 115,
        "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "gold_sql2cypher": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "pre_sql": "select count(*) from cars_data as t1 join car_makers as t2 on t1.id = t2.maker where t2.fullname = 'Volvo' order by t1.accelerate asc limit 1",
        "pred_sql2cypher": "MATCH (t1:`car_1.cars_data`)-[]-(t2:`car_1.car_makers`)\nWHERE t2.FullName = 'Volvo'\nRETURN count(*)\nORDER BY t1.Accelerate ASC\nLIMIT 1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?"
    },
    {
        "db_id": "car_1",
        "index": 121,
        "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "gold_ans": [
            [
                "null"
            ]
        ],
        "pre_sql": "select max(mpg), min(mpg), cylinders from cars_data where cylinders >= 8 group by mpg",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders >= 8\nRETURN max(cars_data.MPG),min(cars_data.MPG),cars_data.Cylinders",
        "pred_ans": [
            [
                "null",
                "10",
                8
            ]
        ],
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?"
    },
    {
        "db_id": "car_1",
        "index": 122,
        "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "gold_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "gold_ans": [
            [
                "null"
            ]
        ],
        "pre_sql": "select max(mpg), min(cylinders) from cars_data where cylinders = 8",
        "pred_sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8\nRETURN max(cars_data.MPG),min(cars_data.Cylinders)",
        "pred_ans": [
            [
                "null",
                8
            ]
        ],
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?"
    },
    {
        "db_id": "flight_2",
        "index": 124,
        "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "gold_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "gold_ans": [
            [
                "USA"
            ]
        ],
        "pre_sql": "select country from airlines where abbreviation = \"JetBlue Airways\"",
        "pred_sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'JetBlue Airways'\nRETURN airlines.Country",
        "pred_ans": [],
        "question": "What country is Jetblue Airways affiliated with?"
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 189,
        "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*),employee.City",
        "gold_ans": [
            [
                3,
                "Bristol"
            ],
            [
                3,
                "Bath"
            ],
            [
                2,
                "Wasps"
            ],
            [
                1,
                "Sale"
            ],
            [
                1,
                "Leicester"
            ]
        ],
        "pre_sql": "select city, count(*) from employee group by city",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.City,count(*)",
        "pred_ans": [
            [
                "Bristol",
                3
            ],
            [
                "Bath",
                3
            ],
            [
                "Wasps",
                2
            ],
            [
                "Sale",
                1
            ],
            [
                "Leicester",
                1
            ]
        ],
        "question": "What is the number of employees from each city?"
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 190,
        "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "gold_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*),employee.City",
        "gold_ans": [
            [
                3,
                "Bristol"
            ],
            [
                3,
                "Bath"
            ],
            [
                2,
                "Wasps"
            ],
            [
                1,
                "Sale"
            ],
            [
                1,
                "Leicester"
            ]
        ],
        "pre_sql": "select city, count(*) from employee group by city",
        "pred_sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.City,count(*)",
        "pred_ans": [
            [
                "Bristol",
                3
            ],
            [
                "Bath",
                3
            ],
            [
                "Wasps",
                2
            ],
            [
                "Sale",
                1
            ],
            [
                "Leicester",
                1
            ]
        ],
        "question": "Count the number of employees for each city."
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 193,
        "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(*),shop.Location",
        "gold_ans": [
            [
                1,
                "Valkeakoski"
            ],
            [
                1,
                "Helsinki"
            ],
            [
                1,
                "Espoo"
            ],
            [
                1,
                "Turku"
            ],
            [
                1,
                "Jakobstad"
            ],
            [
                1,
                "Kotka"
            ],
            [
                1,
                "Kuopio"
            ],
            [
                1,
                "Lahti"
            ],
            [
                1,
                "Mariehamn"
            ]
        ],
        "pre_sql": "select location, count(*) from shop group by location",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Location,count(*)",
        "pred_ans": [
            [
                "Valkeakoski",
                1
            ],
            [
                "Helsinki",
                1
            ],
            [
                "Espoo",
                1
            ],
            [
                "Turku",
                1
            ],
            [
                "Jakobstad",
                1
            ],
            [
                "Kotka",
                1
            ],
            [
                "Kuopio",
                1
            ],
            [
                "Lahti",
                1
            ],
            [
                "Mariehamn",
                1
            ]
        ],
        "question": "Find the number of shops in each location."
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 194,
        "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(*),shop.Location",
        "gold_ans": [
            [
                1,
                "Valkeakoski"
            ],
            [
                1,
                "Helsinki"
            ],
            [
                1,
                "Espoo"
            ],
            [
                1,
                "Turku"
            ],
            [
                1,
                "Jakobstad"
            ],
            [
                1,
                "Kotka"
            ],
            [
                1,
                "Kuopio"
            ],
            [
                1,
                "Lahti"
            ],
            [
                1,
                "Mariehamn"
            ]
        ],
        "pre_sql": "select location, count(*) from shop group by location",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Location,count(*)",
        "pred_ans": [
            [
                "Valkeakoski",
                1
            ],
            [
                "Helsinki",
                1
            ],
            [
                "Espoo",
                1
            ],
            [
                "Turku",
                1
            ],
            [
                "Jakobstad",
                1
            ],
            [
                "Kotka",
                1
            ],
            [
                "Kuopio",
                1
            ],
            [
                "Lahti",
                1
            ],
            [
                "Mariehamn",
                1
            ]
        ],
        "question": "How many shops are there in each location?"
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 203,
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nWITH t1, count(t1.Employee_ID) AS cnt\nRETURN t1.Name\nORDER BY cnt DESC\nLIMIT 1",
        "gold_ans": [
            [
                "George Chuter"
            ]
        ],
        "pre_sql": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.year_awarded desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nRETURN t1.Name\nORDER BY t2.Year_awarded DESC\nLIMIT 1",
        "pred_ans": [
            [
                "Matt Stevens"
            ]
        ],
        "question": "find the name of employee who was awarded the most times in the evaluation."
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 204,
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nWITH t1, count(t1.Employee_ID) AS cnt\nRETURN t1.Name\nORDER BY cnt DESC\nLIMIT 1",
        "gold_ans": [
            [
                "George Chuter"
            ]
        ],
        "pre_sql": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.year_awarded desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.employee`)-[]-(t2:`employee_hire_evaluation.evaluation`)\nRETURN t1.Name\nORDER BY t2.Year_awarded DESC\nLIMIT 1",
        "pred_ans": [
            [
                "Matt Stevens"
            ]
        ],
        "question": "Which employee received the most awards in evaluations? Give me the employee name."
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 212,
        "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop)-[]-(:`employee_hire_evaluation.hiring`)    \nRETURN shop.Name",
        "gold_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "pre_sql": "select name from shop where shop_id not in (select shop_id from employee)",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop)-[]-(:`employee_hire_evaluation.employee`)    \nRETURN shop.Name",
        "pred_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "question": "Which shops run with no employees? Find the shop names"
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 213,
        "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "gold_sql2cypher": "MATCH (t1:`employee_hire_evaluation.hiring`)-[]-(t2:`employee_hire_evaluation.shop`)\nRETURN count(*),t2.Name",
        "gold_ans": [
            [
                2,
                "FC Haka"
            ],
            [
                1,
                "HJK"
            ],
            [
                1,
                "FC Inter"
            ],
            [
                1,
                "FF Jaro"
            ],
            [
                1,
                "FC KooTeePee"
            ],
            [
                1,
                "FC Lahti"
            ]
        ],
        "pre_sql": "select t1.name, count(*) from shop as t1 join hiring as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "pred_sql2cypher": "MATCH (t1:`employee_hire_evaluation.shop`)-[]-(t2:`employee_hire_evaluation.hiring`)\nRETURN t1.Name,count(*)",
        "pred_ans": [
            [
                "FC Haka",
                2
            ],
            [
                "HJK",
                1
            ],
            [
                "FC Inter",
                1
            ],
            [
                "FF Jaro",
                1
            ],
            [
                "FC KooTeePee",
                1
            ],
            [
                "FC Lahti",
                1
            ]
        ],
        "question": "Find the number of employees hired in each shop; show the shop name as well."
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 215,
        "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "gold_ans": [
            [
                9
            ]
        ],
        "pre_sql": "select count(distinct location) from shop",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.None)",
        "pred_ans": [
            [
                0
            ]
        ],
        "question": "How many different store locations are there?"
    },
    {
        "db_id": "employee_hire_evaluation",
        "index": 216,
        "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "gold_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "gold_ans": [
            [
                9
            ]
        ],
        "pre_sql": "select count(distinct location) from shop",
        "pred_sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.None)",
        "pred_ans": [
            [
                0
            ]
        ],
        "question": "Count the number of distinct store locations."
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "index": 249,
        "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "gold_sql2cypher": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)-[]-(T3:`cre_Doc_Template_Mgt.Documents`)\nRETURN DISTINCT T1.Template_Type_Description",
        "gold_ans": [
            [
                "Presentation"
            ],
            [
                "Advertisement"
            ],
            [
                "Paper"
            ],
            [
                "Book"
            ]
        ],
        "pre_sql": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code",
        "pred_sql2cypher": "MATCH (t1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(t2:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT t1.Template_Type_Description",
        "pred_ans": [
            [
                "Presentation"
            ],
            [
                "CV"
            ],
            [
                "Advertisement"
            ],
            [
                "Paper"
            ],
            [
                "Book"
            ]
        ],
        "question": "What are the distinct template type descriptions for the templates ever used by any document?"
    },
    {
        "db_id": "course_teach",
        "index": 282,
        "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "gold_ans": [
            [
                "Farnworth Municipal Borough"
            ]
        ],
        "pre_sql": "select min(age) from teacher",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN min(teacher.Age)",
        "pred_ans": [
            [
                "26"
            ]
        ],
        "question": "Where is the youngest teacher from?"
    },
    {
        "db_id": "course_teach",
        "index": 286,
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Hometown DESC\nLIMIT 1",
        "gold_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "pre_sql": "select hometown from teacher order by age desc limit 1",
        "pred_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age DESC\nLIMIT 1",
        "pred_ans": [
            [
                "Kearsley Urban District"
            ]
        ],
        "question": "What is the most commmon hometowns for teachers?"
    },
    {
        "db_id": "course_teach",
        "index": 288,
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "gold_sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "gold_ans": [],
        "pre_sql": "select t2.hometown from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown having count(*) >= 2",
        "pred_sql2cypher": "MATCH (t2:`course_teach.teacher`)-[t1:`course_teach.course_arrange`]-()\nWITH t2.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "pred_ans": [
            [
                "Little Lever Urban District"
            ]
        ],
        "question": "What are the towns from which at least two teachers come from?"
    },
    {
        "db_id": "museum_visit",
        "index": 301,
        "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "gold_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership <= 4\nRETURN avg(visitor.Age)",
        "gold_ans": [
            [
                36.0
            ]
        ],
        "pre_sql": "select avg(age) from visitor where level_of_membership!= 4",
        "pred_sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership <> 4\nRETURN avg(visitor.Age)",
        "pred_ans": [
            [
                34.5
            ]
        ],
        "question": "What is the average age of the visitors whose membership level is not higher than 4?"
    },
    {
        "db_id": "museum_visit",
        "index": 305,
        "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "gold_sql2cypher": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Name = 'Plaza Museum'\nRETURN museum.Num_of_Staff,museum.Open_Year",
        "gold_ans": [
            [
                62,
                "2000"
            ]
        ],
        "pre_sql": "select open_year, num_of_staff from museum where name = \"Plaza Museum\"",
        "pred_sql2cypher": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Name = 'Plaza Museum'\nRETURN museum.Open_Year,museum.Num_of_Staff",
        "pred_ans": [
            [
                "2000",
                62
            ]
        ],
        "question": "What are the opening year and staff number of the museum named Plaza Museum?"
    },
    {
        "db_id": "battle_death",
        "index": 311,
        "gold_sql": "SELECT name ,  date FROM battle",
        "gold_sql2cypher": "MATCH (battle:`battle_death.battle`)\nRETURN battle.name,battle.date",
        "gold_ans": [
            [
                "Battle of Adrianople",
                "14 April 1205"
            ],
            [
                "Battle of Serres",
                "June 1205"
            ],
            [
                "Battle of Rusion",
                "31 January 1206"
            ],
            [
                "Battle of Rodosto",
                "February 1206"
            ],
            [
                "Battle of Messinopolis",
                "4 September 1207"
            ],
            [
                "Battle of Boruy",
                "June 1205"
            ],
            [
                "Battle of Philippopolis",
                "31 June 1208"
            ],
            [
                "Siege of Constantinople",
                "1235"
            ]
        ],
        "pre_sql": "select name, date, result from battle",
        "pred_sql2cypher": "MATCH (battle:`battle_death.battle`)\nRETURN battle.name,battle.date,battle.result",
        "pred_ans": [
            [
                "Battle of Adrianople",
                "14 April 1205",
                "Bulgarian victory"
            ],
            [
                "Battle of Serres",
                "June 1205",
                "Bulgarian victory"
            ],
            [
                "Battle of Rusion",
                "31 January 1206",
                "Bulgarian victory"
            ],
            [
                "Battle of Rodosto",
                "February 1206",
                "Bulgarian victory"
            ],
            [
                "Battle of Messinopolis",
                "4 September 1207",
                "Bulgarian victory"
            ],
            [
                "Battle of Boruy",
                "June 1205",
                "Bulgarian victory"
            ],
            [
                "Battle of Philippopolis",
                "31 June 1208",
                "Latin victory"
            ],
            [
                "Siege of Constantinople",
                "1235",
                "Two Year Truce"
            ]
        ],
        "question": "List the name, date and result of each battle."
    },
    {
        "db_id": "battle_death",
        "index": 316,
        "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle",
        "gold_sql2cypher": "MATCH (battle:`battle_death.battle`)\nRETURN count(DISTINCT battle.result)",
        "gold_ans": [
            [
                3
            ]
        ],
        "pre_sql": "select count(distinct result) from battle",
        "pred_sql2cypher": "MATCH (battle:`battle_death.battle`)\nRETURN count(DISTINCT battle.None)",
        "pred_ans": [
            [
                0
            ]
        ],
        "question": "How many different results are there for the battles?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 322,
        "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "gold_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "pre_sql": "select count (course_id ) from courses where course_name = \"math\"",
        "pred_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = math\nRETURN count(courses.course_id)",
        "question": "How is the math course described?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 323,
        "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "gold_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "pre_sql": "select course_description from courses where course_name = \"math\"",
        "pred_sql2cypher": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = math\nRETURN courses.course_description",
        "question": "What are the descriptions for all the math courses?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 335,
        "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "gold_sql2cypher": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH T1.course_name AS course_name, count(*) AS count, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "gold_ans": [
            [
                "dl",
                9
            ],
            [
                "math",
                2
            ],
            [
                "nlp",
                8
            ],
            [
                "ds",
                1
            ],
            [
                "fr",
                5
            ],
            [
                "cal",
                7
            ],
            [
                "db",
                12
            ],
            [
                "pl",
                14
            ],
            [
                "en",
                4
            ],
            [
                "la",
                6
            ],
            [
                "ml",
                10
            ]
        ],
        "pre_sql": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*)  < 2",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Courses`)-[]-(t2:`student_transcripts_tracking.Sections`)\nWITH t1.course_name AS course_name, t1.course_id AS course_id, count(*) AS count\nWHERE count  < 2\nRETURN course_name,course_id",
        "pred_ans": [
            [
                "dl",
                9
            ],
            [
                "math",
                2
            ],
            [
                "cal",
                7
            ],
            [
                "db",
                12
            ],
            [
                "en",
                4
            ],
            [
                "la",
                6
            ],
            [
                "ml",
                10
            ]
        ],
        "question": "What are the names and ids of every course with less than 2 sections?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 340,
        "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "gold_sql2cypher": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "gold_ans": [
            [
                "error"
            ]
        ],
        "pre_sql": "select t1.department_description from departments as t1 join departments as t2 on t1.department_id = t2.department_id where t2.department_name like '%computer%'",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Departments`)-[]-(t2:`student_transcripts_tracking.Departments`)\nWHERE t2.department_name =~'.*[C|c]omputer.*'\nRETURN t1.department_description",
        "pred_ans": [],
        "question": "What is the description of the department whose name has the substring the computer?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 346,
        "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1, count(T1.degree_summary_name) AS cnt\nRETURN T1.degree_summary_name\nORDER BY cnt DESC\nLIMIT 1",
        "gold_ans": [
            [
                "Bachelor"
            ]
        ],
        "pre_sql": "select t1.degree_program_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Degree_Programs`)-[]-(t2:`student_transcripts_tracking.Student_Enrolment`)\nWITH t1, count(t1.degree_program_id) AS cnt\nRETURN t1.degree_program_id\nORDER BY cnt DESC\nLIMIT 1",
        "pred_ans": [
            [
                9
            ]
        ],
        "question": "Find the kind of program which most number of students are enrolled in?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 349,
        "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1, count(T1.degree_program_id) AS cnt\nRETURN T1.degree_program_id,T1.degree_summary_name\nORDER BY cnt DESC\nLIMIT 1",
        "gold_ans": [
            [
                9,
                "Bachelor"
            ]
        ],
        "pre_sql": "select t1.degree_program_id, t1.degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Degree_Programs`)-[]-(t2:`student_transcripts_tracking.Student_Enrolment`)\nWITH t1, count(t1.degree_program_id) AS cnt\nRETURN t1.degree_program_id,t1.degree_summary_description\nORDER BY cnt DESC\nLIMIT 1",
        "pred_ans": [
            [
                9,
                "voluptas"
            ]
        ],
        "question": "What is the program id and the summary of the degree that has the most students enrolled?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 352,
        "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "pre_sql": "select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = Timmothy AND students.last_name = Ward\nRETURN students.cell_mobile_number",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 353,
        "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'timmothy' AND students.last_name = 'ward'\nRETURN students.cell_mobile_number",
        "pre_sql": "select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = Timmothy AND students.last_name = Ward\nRETURN students.cell_mobile_number",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 354,
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "gold_ans": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ],
        "pre_sql": "select first_name, middle_name, last_name from students",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name",
        "pred_ans": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ],
            [
                "Hobart",
                "Lorenz",
                "Balistreri"
            ],
            [
                "Warren",
                "Violet",
                "Gleichner"
            ],
            [
                "Jarvis",
                "Aaliyah",
                "Carroll"
            ],
            [
                "Milton",
                "Vaughn",
                "Christiansen"
            ],
            [
                "Stanford",
                "Mona",
                "Rogahn"
            ],
            [
                "Frida",
                "Aisha",
                "Huel"
            ],
            [
                "Delaney",
                "Judd",
                "Ankunding"
            ],
            [
                "Reva",
                "Golda",
                "Osinski"
            ],
            [
                "Helga",
                "Cleve",
                "Mohr"
            ],
            [
                "Gregg",
                "Mossie",
                "Schuppe"
            ],
            [
                "Orrin",
                "Neal",
                "Kemmer"
            ],
            [
                "Deon",
                "Brooklyn",
                "Weimann"
            ],
            [
                "Jordy",
                "Osborne",
                "Rempel"
            ],
            [
                "Jett",
                "Alberta",
                "Jaskolski"
            ]
        ],
        "question": "Who is the first student to register? List the first name, middle name and last name."
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 355,
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "gold_ans": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ],
        "pre_sql": "select first_name, middle_name, last_name from students",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name",
        "pred_ans": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ],
            [
                "Hobart",
                "Lorenz",
                "Balistreri"
            ],
            [
                "Warren",
                "Violet",
                "Gleichner"
            ],
            [
                "Jarvis",
                "Aaliyah",
                "Carroll"
            ],
            [
                "Milton",
                "Vaughn",
                "Christiansen"
            ],
            [
                "Stanford",
                "Mona",
                "Rogahn"
            ],
            [
                "Frida",
                "Aisha",
                "Huel"
            ],
            [
                "Delaney",
                "Judd",
                "Ankunding"
            ],
            [
                "Reva",
                "Golda",
                "Osinski"
            ],
            [
                "Helga",
                "Cleve",
                "Mohr"
            ],
            [
                "Gregg",
                "Mossie",
                "Schuppe"
            ],
            [
                "Orrin",
                "Neal",
                "Kemmer"
            ],
            [
                "Deon",
                "Brooklyn",
                "Weimann"
            ],
            [
                "Jordy",
                "Osborne",
                "Rempel"
            ],
            [
                "Jett",
                "Alberta",
                "Jaskolski"
            ]
        ],
        "question": "What is the first, middle, and last name of the first student to register?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 356,
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "gold_ans": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ],
        "pre_sql": "select first_name, middle_name, last_name from students order by ssn asc limit 1",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.ssn ASC\nLIMIT 1",
        "pred_ans": [
            [
                "Milton",
                "Vaughn",
                "Christiansen"
            ]
        ],
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name."
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 357,
        "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "gold_ans": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ],
        "pre_sql": "select first_name, middle_name, last_name from students order by ssn asc limit 1;",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.ssn ASC\nLIMIT 1",
        "pred_ans": [
            [
                "Milton",
                "Vaughn",
                "Christiansen"
            ]
        ],
        "question": "What is the first, middle, and last name of the earliest school graduate?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 358,
        "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "gold_ans": [
            [
                "Timmothy"
            ],
            [
                "Hobart"
            ],
            [
                "Warren"
            ],
            [
                "Jarvis"
            ],
            [
                "Stanford"
            ],
            [
                "Frida"
            ],
            [
                "Delaney"
            ],
            [
                "Reva"
            ],
            [
                "Helga"
            ],
            [
                "Gregg"
            ],
            [
                "Orrin"
            ],
            [
                "Deon"
            ],
            [
                "Jordy"
            ],
            [
                "Jett"
            ]
        ],
        "pre_sql": "select distinct permanent_address_id, first_name from students where current_address_id = (select current_address_id from students)",
        "pred_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWITH students.current_address_id AS current_address_id\nMATCH (students:`student_transcripts_tracking.Students`)\nWHERE  students.current_address_id =  current_address_id \nRETURN DISTINCT students.permanent_address_id,students.first_name",
        "pred_ans": [
            [
                15,
                "Timmothy"
            ],
            [
                5,
                "Hobart"
            ],
            [
                11,
                "Jordy"
            ],
            [
                5,
                "Warren"
            ],
            [
                9,
                "Milton"
            ],
            [
                8,
                "Deon"
            ],
            [
                11,
                "Jarvis"
            ],
            [
                3,
                "Stanford"
            ],
            [
                3,
                "Frida"
            ],
            [
                14,
                "Helga"
            ],
            [
                5,
                "Delaney"
            ],
            [
                15,
                "Reva"
            ],
            [
                9,
                "Jett"
            ],
            [
                4,
                "Gregg"
            ],
            [
                9,
                "Orrin"
            ]
        ],
        "question": "Whose permanent address is different from his or her current address? List his or her first name."
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 359,
        "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "gold_sql2cypher": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "gold_ans": [
            [
                "Timmothy"
            ],
            [
                "Hobart"
            ],
            [
                "Warren"
            ],
            [
                "Jarvis"
            ],
            [
                "Stanford"
            ],
            [
                "Frida"
            ],
            [
                "Delaney"
            ],
            [
                "Reva"
            ],
            [
                "Helga"
            ],
            [
                "Gregg"
            ],
            [
                "Orrin"
            ],
            [
                "Deon"
            ],
            [
                "Jordy"
            ],
            [
                "Jett"
            ]
        ],
        "pre_sql": "select t1.first_name from students as t1 join students as t2 on t1.student_id = t2.student_id where t2.permanent_address_id!= t2.current_address_id",
        "pred_sql2cypher": "MATCH (t1:`student_transcripts_tracking.Students`)-[]-(t2:`student_transcripts_tracking.Students`)\nWHERE t2.permanent_address_id <> t2.current_address_id\nRETURN t1.first_name",
        "pred_ans": [],
        "question": "What is the first name of the student whose permanent address is different from his or her current one?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 364,
        "gold_sql": "SELECT count(*) FROM Transcripts",
        "gold_sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "gold_ans": [
            [
                15
            ]
        ],
        "pre_sql": "select count(*) from transcripts where transcript_date = (select max(transcript_date) from transcripts)",
        "pred_sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nWITH max(transcripts.transcript_date) AS transcript_date\nMATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nWHERE  transcripts.transcript_date =  transcript_date \nRETURN count(*)",
        "pred_ans": [
            [
                1
            ]
        ],
        "question": "How many transcripts are released?"
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 372,
        "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "gold_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "gold_ans": [
            [
                "et"
            ]
        ],
        "pre_sql": "select distinct section_name from sections",
        "pred_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN DISTINCT sections.section_name",
        "pred_ans": [
            [
                "a"
            ],
            [
                "b"
            ],
            [
                "c"
            ],
            [
                "d"
            ],
            [
                "e"
            ],
            [
                "f"
            ],
            [
                "g"
            ],
            [
                "h"
            ],
            [
                "j"
            ],
            [
                "k"
            ],
            [
                "l"
            ],
            [
                "o"
            ],
            [
                "p"
            ],
            [
                "u"
            ],
            [
                "y"
            ]
        ],
        "question": "Describe the section h."
    },
    {
        "db_id": "student_transcripts_tracking",
        "index": 373,
        "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "gold_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "pre_sql": "select section_description from sections where section_name = \"h\";",
        "pred_sql2cypher": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = h\nRETURN sections.section_description",
        "question": "What is the description for the section named h?"
    },
    {
        "db_id": "tvshow",
        "index": 396,
        "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "gold_sql2cypher": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "gold_ans": [
            [
                "Sky Radio"
            ]
        ],
        "pre_sql": "select t2.series_name from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.title = \"The rise of the Blue Beetle!\"",
        "pred_sql2cypher": "MATCH (t1:`tvshow.Cartoon`)-[]-(t2:`tvshow.TV_Channel`)\nWHERE t1.Title = 'The rise of the Blue Beetle!'\nRETURN t2.series_name",
        "pred_ans": [],
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name."
    },
    {
        "db_id": "tvshow",
        "index": 397,
        "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "gold_sql2cypher": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "gold_ans": [
            [
                "Sky Radio"
            ]
        ],
        "pre_sql": "select t2.series_name from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.title = \"The rise of the Blue Beetle\"",
        "pred_sql2cypher": "MATCH (t1:`tvshow.Cartoon`)-[]-(t2:`tvshow.TV_Channel`)\nWHERE t1.Title = 'The rise of the Blue Beetle'\nRETURN t2.series_name",
        "pred_ans": [],
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?"
    },
    {
        "db_id": "tvshow",
        "index": 403,
        "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "gold_ans": [
            [
                "A Love of a Lifetime",
                "5.8"
            ],
            [
                "Friendly Skies",
                "5.3"
            ],
            [
                "Game Three",
                "4.4"
            ]
        ],
        "pre_sql": "select t2.episode, t1.rating from tv_series as t1 join tv_series as t2 on t1.id = t2.id group by t2.episode order by count(*) desc limit 3",
        "pred_sql2cypher": "MATCH (t1:`tvshow.TV_series`)-[]-(t2:`tvshow.TV_series`)\nWITH t1, count(t2.Episode) AS cnt, t2\nRETURN t2.Episode,t1.Rating\nORDER BY cnt DESC\nLIMIT 3",
        "pred_ans": [],
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?"
    },
    {
        "db_id": "tvshow",
        "index": 404,
        "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "gold_ans": [
            [
                9.0,
                5.0
            ]
        ],
        "pre_sql": "select min(share), max(share) from tv_series",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN min(tv_series.Share),max(tv_series.Share)",
        "pred_ans": [
            [
                5.0,
                9.0
            ]
        ],
        "question": "What is minimum and maximum share of TV series?"
    },
    {
        "db_id": "tvshow",
        "index": 406,
        "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "gold_ans": [
            [
                "September 24, 2007"
            ]
        ],
        "pre_sql": "select air_date from tv_series where episode = \"A love of a Lifetime\"",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A love of a Lifetime'\nRETURN tv_series.Air_Date",
        "pred_ans": [],
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?"
    },
    {
        "db_id": "tvshow",
        "index": 407,
        "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "gold_ans": [
            [
                "September 24, 2007"
            ]
        ],
        "pre_sql": "select air_date from tv_series where episode = \"A love of a Lifetime\"",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A love of a Lifetime'\nRETURN tv_series.Air_Date",
        "pred_ans": [],
        "question": "When did the episode \"A Love of a Lifetime\" air?"
    },
    {
        "db_id": "tvshow",
        "index": 408,
        "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "gold_ans": [
            [
                43.0
            ]
        ],
        "pre_sql": "select weekly_rank from tv_series where episode = \"A love of a Lifetime\"",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "pred_ans": [],
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?"
    },
    {
        "db_id": "tvshow",
        "index": 409,
        "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "gold_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "gold_ans": [
            [
                43.0
            ]
        ],
        "pre_sql": "select weekly_rank from tv_series where episode = \"A love of a Lifetime\"",
        "pred_sql2cypher": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "pred_ans": [],
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?"
    },
    {
        "db_id": "tvshow",
        "index": 414,
        "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN count(*),cartoon.Directed_by",
        "gold_ans": [
            [
                4,
                "Ben Jones"
            ],
            [
                4,
                "Brandon Vietti"
            ],
            [
                4,
                "Michael Chang"
            ]
        ],
        "pre_sql": "select directed_by, count(*) from cartoon group by directed_by",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Directed_by,count(*)",
        "pred_ans": [
            [
                "Ben Jones",
                4
            ],
            [
                "Brandon Vietti",
                4
            ],
            [
                "Michael Chang",
                4
            ]
        ],
        "question": "Find the number of cartoons directed by each of the listed directors."
    },
    {
        "db_id": "tvshow",
        "index": 415,
        "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "gold_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN count(*),cartoon.Directed_by",
        "gold_ans": [
            [
                4,
                "Ben Jones"
            ],
            [
                4,
                "Brandon Vietti"
            ],
            [
                4,
                "Michael Chang"
            ]
        ],
        "pre_sql": "select directed_by, count(*) from cartoon group by directed_by",
        "pred_sql2cypher": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Directed_by,count(*)",
        "pred_ans": [
            [
                "Ben Jones",
                4
            ],
            [
                "Brandon Vietti",
                4
            ],
            [
                "Michael Chang",
                4
            ]
        ],
        "question": "How many cartoons did each director create?"
    },
    {
        "db_id": "tvshow",
        "index": 419,
        "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "gold_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "gold_ans": [
            [
                "Sky Famiglia + Sky HD",
                "MTV Live HD"
            ]
        ],
        "pre_sql": "select package_option, series_name from tv_channel where hight_definition_tv = 'Option'",
        "pred_sql2cypher": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'Option'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "pred_ans": [],
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?"
    },
    {
        "db_id": "tvshow",
        "index": 420,
        "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "gold_sql2cypher": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "gold_ans": [
            [
                "United Kingdom"
            ],
            [
                "Italy"
            ]
        ],
        "pre_sql": "select t2.country from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id join tv_series as t3 on t1.id = t3.id where t1.written_by = 'Todd Casey'",
        "pred_sql2cypher": "MATCH (t1:`tvshow.Cartoon`)-[]-(t2:`tvshow.TV_Channel`)-[]-(t3:`tvshow.TV_series`)\nWHERE t1.Written_by = 'Todd Casey'\nRETURN t2.Country",
        "pred_ans": [
            [
                "Italy"
            ],
            [
                "Italy"
            ]
        ],
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?"
    },
    {
        "db_id": "poker_player",
        "index": 444,
        "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "gold_ans": [
            [
                68.0
            ]
        ],
        "pre_sql": "select money_rank from poker_player order by best_finish desc limit 1",
        "pred_sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Best_Finish DESC\nLIMIT 1",
        "pred_ans": [
            [
                154.0
            ]
        ],
        "question": "What is the money rank of the tallest poker player?"
    },
    {
        "db_id": "voter_1",
        "index": 462,
        "gold_sql": "SELECT count(*) FROM area_code_state",
        "gold_sql2cypher": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(*)",
        "gold_ans": [
            [
                305
            ]
        ],
        "pre_sql": "select count(distinct state) from area_code_state",
        "pred_sql2cypher": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(DISTINCT area_code_state.state)",
        "pred_ans": [
            [
                51
            ]
        ],
        "question": "How many states are there?"
    },
    {
        "db_id": "dog_kennels",
        "index": 545,
        "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "gold_ans": [
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ]
        ],
        "pre_sql": "select date_arrived, date_departed from dogs",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "pred_ans": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ],
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?"
    },
    {
        "db_id": "dog_kennels",
        "index": 546,
        "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "gold_sql2cypher": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "gold_ans": [
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ]
        ],
        "pre_sql": "select date_arrived, date_departed from dogs",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "pred_ans": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ],
        "question": "Find the arriving date and the departing date of the dogs that received a treatment."
    },
    {
        "db_id": "dog_kennels",
        "index": 557,
        "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "gold_sql2cypher": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "gold_ans": [
            [
                "Johann",
                "Fisher",
                "zboncak.madonna@example.net"
            ],
            [
                "Cindy",
                "Schmitt",
                "wpfeffer@example.net"
            ]
        ],
        "pre_sql": "select first_name, last_name, email_address from owners where first_name like '%north%'",
        "pred_sql2cypher": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.first_name =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "pred_ans": [],
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email."
    },
    {
        "db_id": "dog_kennels",
        "index": 558,
        "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "gold_sql2cypher": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "gold_ans": [
            [
                "Johann",
                "Fisher",
                "zboncak.madonna@example.net"
            ],
            [
                "Cindy",
                "Schmitt",
                "wpfeffer@example.net"
            ]
        ],
        "pre_sql": "select first_name, last_name, email_address from owners where last_name like '%north%'",
        "pred_sql2cypher": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.last_name =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "pred_ans": [],
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'."
    },
    {
        "db_id": "dog_kennels",
        "index": 559,
        "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "gold_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "gold_ans": [
            [
                407
            ]
        ],
        "pre_sql": "select cost_of_treatment from treatments order by cost_of_treatment desc limit 1",
        "pred_sql2cypher": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.cost_of_treatment DESC\nLIMIT 1",
        "pred_ans": [
            [
                945
            ]
        ],
        "question": "How much does the most recent treatment cost?"
    },
    {
        "db_id": "dog_kennels",
        "index": 561,
        "gold_sql": "SELECT max(age) FROM Dogs",
        "gold_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "gold_ans": [
            [
                "9"
            ]
        ],
        "pre_sql": "select age from dogs order by date_of_birth desc limit 1",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.age\nORDER BY dogs.date_of_birth DESC\nLIMIT 1",
        "pred_ans": [
            [
                "4"
            ]
        ],
        "question": "What is the age of the oldest dog?"
    },
    {
        "db_id": "dog_kennels",
        "index": 562,
        "gold_sql": "SELECT max(age) FROM Dogs",
        "gold_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "gold_ans": [
            [
                "9"
            ]
        ],
        "pre_sql": "select age from dogs order by date_of_birth desc limit 1",
        "pred_sql2cypher": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.age\nORDER BY dogs.date_of_birth DESC\nLIMIT 1",
        "pred_ans": [
            [
                "4"
            ]
        ],
        "question": "Tell me the age of the oldest dog."
    },
    {
        "db_id": "dog_kennels",
        "index": 565,
        "gold_sql": "SELECT max(charge_amount) FROM Charges",
        "gold_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "pre_sql": "select charge_type, count(*) from charges order by charge_amount desc limit 1",
        "pred_sql2cypher": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,count(*)\nORDER BY charges.charge_amount DESC\nLIMIT 1",
        "question": "How much does the most expensive charge type costs?"
    },
    {
        "db_id": "singer",
        "index": 580,
        "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "gold_ans": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "pre_sql": "select name from singer where citizenship!= \"French\"",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'French'\nRETURN singer.Name",
        "pred_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "question": "What are the names of the singers who are not French citizens?"
    },
    {
        "db_id": "singer",
        "index": 590,
        "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "gold_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship,max(singer.Net_Worth_Millions)",
        "gold_ans": [
            [
                "France",
                30.0
            ],
            [
                "United States",
                28.8
            ],
            [
                "Chile",
                17.4
            ],
            [
                "Australia",
                17.0
            ],
            [
                "Germany",
                14.3
            ]
        ],
        "pre_sql": "select citizenship from singer order by net_worth_millions desc limit 1",
        "pred_sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.Citizenship\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "pred_ans": [
            [
                "France"
            ]
        ],
        "question": "For each citizenship, what is the maximum net worth?"
    },
    {
        "db_id": "real_estate_properties",
        "index": 601,
        "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "gold_sql2cypher": "MATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'House'\nRETURN properties.property_name  AS property_name \nUNION\nMATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'Apartment' AND properties.room_count > 1\nRETURN properties.property_name  AS property_name",
        "gold_ans": [
            [
                "park"
            ],
            [
                "the cole"
            ],
            [
                "parc east"
            ],
            [
                "vogue"
            ],
            [
                "longacre"
            ],
            [
                "renoir"
            ],
            [
                "ten tower"
            ],
            [
                "parc coliseum"
            ]
        ],
        "pre_sql": "select property_name from properties where room_count > 1 union select property_name from properties where property_type_code = 'House' group by property_name having count(*) > 1",
        "pred_sql2cypher": "MATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.room_count > 1\nRETURN properties.property_name  AS property_name \nUNION\nMATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'House'\nWITH count(*) AS count, properties.property_name AS property_name\nWHERE count  > 1\nRETURN property_name",
        "pred_ans": [
            [
                "park"
            ],
            [
                "prism"
            ],
            [
                "riverside"
            ],
            [
                "parc east"
            ],
            [
                "high line"
            ],
            [
                "avalon"
            ],
            [
                "vogue"
            ],
            [
                "longacre"
            ],
            [
                "renoir"
            ],
            [
                "murray hill"
            ],
            [
                "ten tower"
            ],
            [
                "chelsea"
            ],
            [
                "wall street"
            ],
            [
                "parc coliseum"
            ]
        ],
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?"
    }
]