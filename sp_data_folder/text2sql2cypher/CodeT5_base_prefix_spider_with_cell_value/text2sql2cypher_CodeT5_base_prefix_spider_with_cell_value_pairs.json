[
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "How many singers do we have?",
        "seq_out": "select count(*) from singer",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the total number of singers?",
        "seq_out": "select count(*) from singer",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "seq_out": "select name, country, age from singer order by age desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names, countries, and ages for every singer in descending order of age?",
        "seq_out": "select name, country, age from singer order by age desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country ( France ) , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country ( France ) , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the average, minimum, and maximum age of all singers from France?",
        "seq_out": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select song_name, song_release_year from singer order by age asc limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the name and the release year of the song by the youngest singer.",
        "seq_out": "select song_name, song_release_year from singer order by age limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select song_name, song_release_year from singer order by age asc limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names and release years for all the songs of the youngest singer?",
        "seq_out": "select song_name, song_release_year from singer order by age limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are all distinct countries where singers above age 20 are from?",
        "seq_out": "select distinct country from singer where age > 20",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are  the different countries with singers above age 20?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are  the different countries with singers above age 20?",
        "seq_out": "select distinct country from singer where age > 20",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show all countries and the number of singers in each country.",
        "seq_out": "select country, count(*) from singer group by country",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "How many singers are from each country?",
        "seq_out": "select country, count(*) from singer group by country",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select song_name from singer where age > (select avg(age) from singer)",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "List all song names by singers above the average age.",
        "seq_out": "select song_name from singer where age > (select avg(age) from singer)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select song_name from singer where age > (select avg(age) from singer)",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are all the song names by singers who are older than average?",
        "seq_out": "select song_name from singer where age > (select avg(age) from singer)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "seq_out": "select location, name from stadium where capacity between 5000 and 10000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "seq_out": "select location, name from stadium where capacity between 5000 and 10000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, capacity from stadium order by highest desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and capacity for the stadium with highest average attendance?",
        "seq_out": "select name, capacity from stadium order by average desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, capacity from stadium order by highest desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and capacity for the stadium with the highest average attendance?",
        "seq_out": "select name, capacity from stadium order by average desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from concert where year = 2014 or year = 2015",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts are there in year 2014 or 2015?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "How many concerts are there in year 2014 or 2015?",
        "seq_out": "select count(*) from concert where year = 2014 or year = 2015",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from concert where year = 2014 or year = 2015",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "How many concerts occurred in 2014 or 2015?",
        "seq_out": "select count(*) from concert where year = 2014 or year = 2015",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the stadium name and the number of concerts in each stadium.",
        "seq_out": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "For each stadium, how many concerts play there?",
        "seq_out": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "seq_out": "select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2013 group by t1.stadium_id order by count(*) desc limit 1",
        "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "seq_out": "select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select year from concert group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Which year has most number of concerts?",
        "seq_out": "select year from concert group by year order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select year from concert group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the year that had the most concerts?",
        "seq_out": "select year from concert group by year order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the stadium names without any concert.",
        "seq_out": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names of the stadiums without any concerts?",
        "seq_out": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "List singer names and number of concerts for each singer.",
        "seq_out": "select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names of the singers and number of concerts for each person?",
        "seq_out": "select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t1.country from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%hey%'",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "seq_out": "select name, country from singer where song_name like '%hey%'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the number of pets whose weight is heavier than 10.",
        "seq_out": "select count(*) from pets where weight > 10",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "How many pets have a greater weight than 10?",
        "seq_out": "select count(*) from pets where weight > 10",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(weight), pettype from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "seq_out": "select max(weight), pettype from pets group by pettype",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(weight), t1.pettype from pets as t1 join has_pet as t2 on t1.petid = t2.petid group by t1.pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "List the maximum weight and type for each type of pet.",
        "seq_out": "select max(weight), pettype from pets group by pettype",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the number of distinct type of pets.",
        "seq_out": "select count(distinct pettype) from pets",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "How many different types of pet are there?",
        "seq_out": "select count(distinct pettype) from pets",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight",
        "text_in": "Find the first name of students who have cat or dog pet.",
        "seq_out": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select pettype, weight from pets order by pet_age asc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the type and weight of the youngest pet.",
        "seq_out": "select pettype, weight from pets order by pet_age limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What is the id and weight of every pet who is older than 1?",
        "seq_out": "select petid, weight from pets where pet_age > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(weight), pettype from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the average weight for each pet type.",
        "seq_out": "select avg(weight), pettype from pets group by pettype",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(weight), pettype from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What is the average weight for each type of pet?",
        "seq_out": "select avg(weight), pettype from pets group by pettype",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What are the different first names and ages of the students who do have pets?",
        "seq_out": "select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct petid), stuid from has_pet group by stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the number of pets for each student who has any pet and student id.",
        "seq_out": "select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t2.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the first name and gender of student who have more than one pet.",
        "seq_out": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t2.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What is the first name and gender of the all the students who have more than one pet?",
        "seq_out": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many continents are there?",
        "seq_out": "select count(*) from continents;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of continents?",
        "seq_out": "select count(*) from continents;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many countries are listed?",
        "seq_out": "select count(*) from countries;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many countries exist?",
        "seq_out": "select count(*) from countries;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fullname, t2.maker, count(*) from car_makers as t1 join model_list as t2 on t1.maker = t2.maker group by t2.maker",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many models does each car maker produce? List maker full name, id and the number.",
        "seq_out": "select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of the cars with horsepower more than 150?",
        "seq_out": "select count(*) from cars_data where horsepower > 150;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of cars with a horsepower greater than 150?",
        "seq_out": "select count(*) from cars_data where horsepower > 150;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(accelerate), cylinders from cars_data group by cylinders",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the maximum accelerate for all the different cylinders?",
        "seq_out": "select max(accelerate), cylinders from cars_data group by cylinders;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many cars have more than 4 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 4;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of cars with more than 4 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 4;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many cars were produced in 1980?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "how many cars were produced in 1980?",
        "seq_out": "select count(*) from cars_data where year = 1980;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "In 1980, how many cars were made?",
        "seq_out": "select count(*) from cars_data where year = 1980;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from car_makers where fullname = \"American Motor Company\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many car models were produced by the maker with full name American Motor Company?",
        "seq_out": "select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many cars has over 6 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 6;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of carsw ith over 6 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 6;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which country does Airline \"JetBlue Airways\" belong to?",
        "seq_out": "select country from airlines where airline = \"JetBlue Airways\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "seq_out": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline, abbreviation from airlines where country = \"USA\"",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "List all airline names and their abbreviations in \"USA\".",
        "seq_out": "select airline, abbreviation from airlines where country = \"USA\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline, abbreviation from airlines where country = \"USA\"",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are the airline names and abbreviations for airlines in the USA?",
        "seq_out": "select airline, abbreviation from airlines where country = \"USA\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportcode, airportname from airports where city = \"Anthony\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "List the airport code and name in the city of Anthony.",
        "seq_out": "select airportcode, airportname from airports where city = \"Anthony\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportcode, airportname from airports where city = \"Anthony\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the airport code and airport name corresonding to the city Anthony.",
        "seq_out": "select airportcode, airportname from airports where city = \"Anthony\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many airlines do we have?",
        "seq_out": "select count(*) from airlines",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What is the total number of airlines?",
        "seq_out": "select count(*) from airlines",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many airports do we have?",
        "seq_out": "select count(*) from airports",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Return the number of  airports.",
        "seq_out": "select count(*) from airports",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airline has abbreviation 'UAL'?",
        "seq_out": "select airline from airlines where abbreviation = \"UAL\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline from airlines where abbreviation = \"UAL\"",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the airline with abbreviation 'UAL'.",
        "seq_out": "select airline from airlines where abbreviation = \"UAL\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from USA?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many airlines are from USA?",
        "seq_out": "select count(*) from airlines where country = \"USA\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines where country = \"USA\"",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Return the number of airlines in the USA.",
        "seq_out": "select count(*) from airlines where country = \"USA\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which city and country is the Alton airport at?",
        "seq_out": "select city, country from airports where airportname = \"Alton\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the city and country for the Alton airport.",
        "seq_out": "select city, country from airports where airportname = \"Alton\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "text_in": "What is the airport name for airport 'AKO'?",
        "seq_out": "select airportname from airports where airportcode = \"AKO\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "text_in": "Return the name of the airport with code 'AKO'.",
        "seq_out": "select airportname from airports where airportcode = \"AKO\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where city = 'Aberdeen'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are airport names at City 'Aberdeen'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are airport names at City 'Aberdeen'?",
        "seq_out": "select airportname from airports where city = \"Aberdeen\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where city = 'Aberdeen'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are the names of airports in Aberdeen?",
        "seq_out": "select airportname from airports where city = \"Aberdeen\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"APG\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "How many flights depart from 'APG'?",
        "seq_out": "select count(*) from flights where sourceairport = \"APG\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"APG\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "Count the number of flights departing from 'APG'.",
        "seq_out": "select count(*) from flights where sourceairport = \"APG\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where destairport = \"ATO\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights have destination ATO?",
        "seq_out": "select count(*) from flights where destairport = \"ATO\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"Aberdeen\" and destairport = \"Ashley\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"Aberdeen\" and destairport = \"Ashley\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights fly from Aberdeen to Ashley?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.airline = t2.airline where t2.sourceairport = \"AHD\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "Which airlines have a flight with source airport AHD?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.airline = t2.airline where t2.sourceairport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "What are airlines that have flights arriving at airport 'AHD'?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "What are flight numbers of flights departing from Airport \"APG\"?",
        "seq_out": "select flightno from flights where sourceairport = \"APG\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "Give the flight numbers of flights leaving from APG.",
        "seq_out": "select flightno from flights where sourceairport = \"APG\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "seq_out": "select flightno from flights where destairport = \"APG\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "Give the flight numbers of flights landing at APG.",
        "seq_out": "select flightno from flights where destairport = \"APG\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where city not in (select city from flights)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Find the name of airports which do not have any flight in and out.",
        "seq_out": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where city not in (select city from flights)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airports do not have departing or arriving flights?",
        "seq_out": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "How many employees are there?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "How many employees are there?",
        "seq_out": "select count(*) from employee",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of employees",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Count the number of employees",
        "seq_out": "select count(*) from employee",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Sort employee names by their age in ascending order.",
        "seq_out": "select name from employee order by age",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "List the names of employees and sort in ascending order of age.",
        "seq_out": "select name from employee order by age",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city from employee where age  < 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Which cities do more than one employee under age 30 come from?",
        "seq_out": "select city from employee where age < 30 group by city having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city from employee where age  < 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the cities that have more than one employee under age 30.",
        "seq_out": "select city from employee where age < 30 group by city having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select manager_name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the manager name and district of the shop whose number of products is the largest.",
        "seq_out": "select manager_name, district from shop order by number_products desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select manager_name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What are the manager name and district of the shop that sells the largest number of products?",
        "seq_out": "select manager_name, district from shop order by number_products desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "find the minimum and maximum number of products of all stores.",
        "seq_out": "select min(number_products), max(number_products) from shop",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What are the minimum and maximum number of products across all the shops?",
        "seq_out": "select min(number_products), max(number_products) from shop",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, location, district from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Return the name, location and district of all shops in descending order of number of products.",
        "seq_out": "select name, location, district from shop order by number_products desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, location, district from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "seq_out": "select name, location, district from shop order by number_products desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from shop where number_products > (select avg(number_products) from shop)",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the names of stores whose number products is more than the average number of products.",
        "seq_out": "select name from shop where number_products > (select avg(number_products) from shop)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from shop where number_products > (select avg(number_products) from shop)",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Which shops' number products is above the average? Give me the shop names.",
        "seq_out": "select name from shop where number_products > (select avg(number_products) from shop)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the name of the employee who got the highest one time bonus.",
        "seq_out": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Which employee received the biggest bonus? Give me the employee name.",
        "seq_out": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the names of employees who never won any award in the evaluation.",
        "seq_out": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What are the names of the employees who never received any evaluation?",
        "seq_out": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from shop as t1 join hiring as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What is the name of the shop that is hiring the largest number of employees?",
        "seq_out": "select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from shop where shop_id not in (select shop_id from hiring)",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the name of the shops that do not hire any employee.",
        "seq_out": "select name from shop where shop_id not in (select shop_id from hiring)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*), t1.name from shop as t1 join hiring as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "For each shop, return the number of employees working there and the name of the shop.",
        "seq_out": "select count(*), t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.name",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many documents do we have?",
        "seq_out": "select count(*) from documents",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of documents.",
        "seq_out": "select count(*) from documents",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "List document IDs, document names, and document descriptions for all documents.",
        "seq_out": "select document_id, document_name, document_description from documents",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids, names, and descriptions for all documents?",
        "seq_out": "select document_id, document_name, document_description from documents",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "seq_out": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "seq_out": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct template_id) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many different templates do all document use?",
        "seq_out": "select count(distinct template_id) from documents",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct template_id) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of different templates used for documents.",
        "seq_out": "select count(distinct template_id) from documents",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates where template_type_code = 'PPT'",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many documents are using the template with type code 'PPT'?",
        "seq_out": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates where template_type_code = 'PPT'",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of documents that use the PPT template type.",
        "seq_out": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, count(*) from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template ids and number of documents using each template.",
        "seq_out": "select template_id, count(*) from documents group by template_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_id, count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are all different template ids used for documents, and how many times were each of them used?",
        "seq_out": "select template_id, count(*) from documents group by template_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_id from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show ids for all templates that are used by more than one document.",
        "seq_out": "select template_id from documents group by template_id having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_id from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the template ids of any templates used in more than a single document?",
        "seq_out": "select template_id from documents group by template_id having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many templates do we have?",
        "seq_out": "select count(*) from templates",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of templates.",
        "seq_out": "select count(*) from templates",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, version_number, template_type_code from templates",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show template ids, version numbers, and template type codes for all templates.",
        "seq_out": "select template_id, version_number, template_type_code from templates",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, version_number, template_type_code from templates",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids, version numbers, and type codes for each template?",
        "seq_out": "select template_id, version_number, template_type_code from templates",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct template_type_code from templates",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all distinct template type codes for all templates.",
        "seq_out": "select distinct template_type_code from templates",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct template_type_code from templates",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the different template type codes?",
        "seq_out": "select distinct template_type_code from templates",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select version_number, template_type_code from templates where version_number > 5",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the version number and template type code for the template with version number later than 5?",
        "seq_out": "select version_number, template_type_code from templates where version_number > 5",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select version_number, template_type_code from templates where version_number > 5",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "seq_out": "select version_number, template_type_code from templates where version_number > 5",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes and number of templates for each.",
        "seq_out": "select template_type_code, count(*) from templates group by template_type_code",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the different template type codes, and how many templates correspond to each?",
        "seq_out": "select template_type_code, count(*) from templates group by template_type_code",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes with less than three templates.",
        "seq_out": "select template_type_code from templates group by template_type_code having count(*) < 3",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the codes of template types that have fewer than 3 templates?",
        "seq_out": "select template_type_code from templates group by template_type_code having count(*) < 3",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the template type code of the template used by document with the name \"Data base\"?",
        "seq_out": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the template type code of the template that is used by a document named Data base.",
        "seq_out": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes and descriptions.",
        "seq_out": "select template_type_code, template_type_description from ref_template_types",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the type codes and descriptions for all template types?",
        "seq_out": "select template_type_code, template_type_description from ref_template_types",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many paragraphs in total?",
        "seq_out": "select count(*) from paragraphs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of paragraphs.",
        "seq_out": "select count(*) from paragraphs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents where document_name = 'Summer Show'",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many paragraphs for the document with name 'Summer Show'?",
        "seq_out": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents where document_name = 'Summer Show'",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of paragraphs in the document named 'Summer Show'.",
        "seq_out": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select other_details from paragraphs where paragraph_text = 'Korea'",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Korea ) , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Korea ) , other_details",
        "text_in": "Show paragraph details for paragraph with text 'Korea ' .",
        "seq_out": "select other_details from paragraphs where paragraph_text like 'korea'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select other_details from paragraphs where paragraph_text = 'Korea'",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Korea ) , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Korea ) , other_details",
        "text_in": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "seq_out": "select other_details from paragraphs where paragraph_text like 'korea'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "seq_out": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "seq_out": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = \"Customer reviews\"",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all paragraph texts for the document \"Customer reviews\".",
        "seq_out": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "seq_out": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "seq_out": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "List all document ids with at least two paragraphs.",
        "seq_out": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids of documents that have 2 or more paragraphs?",
        "seq_out": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document id and name with greatest number of paragraphs?",
        "seq_out": "select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the id and name of the document with the most paragraphs.",
        "seq_out": "select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document id with least number of paragraphs?",
        "seq_out": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the id of the document with the fewest paragraphs.",
        "seq_out": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many teachers are there?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "How many teachers are there?",
        "seq_out": "select count(*) from teacher",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of teachers?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the total count of teachers?",
        "seq_out": "select count(*) from teacher",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "List the names of teachers in ascending order of age.",
        "seq_out": "select name from teacher order by age asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers ordered by ascending age?",
        "seq_out": "select name from teacher order by age asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the age and hometown of teachers?",
        "seq_out": "select age, hometown from teacher",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the age and hometown of every teacher?",
        "seq_out": "select age, hometown from teacher",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where hometown!= \"Little lever Urban District\"",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "text_in": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "seq_out": "select name from teacher where hometown != \"little lever urban district\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where hometown!= \"Little lever Urban District\"",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "seq_out": "select name from teacher where hometown != \"little lever urban district\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show the name of teachers aged either 32 or 33?",
        "seq_out": "select name from teacher where age = 32 or age = 33",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers who are aged either 32 or 33?",
        "seq_out": "select name from teacher where age = 32 or age = 33",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown from teacher order by age asc limit 1",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the hometown of the youngest teacher?",
        "seq_out": "select hometown from teacher order by age asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show different hometown of teachers and the number of teachers from each hometown.",
        "seq_out": "select hometown, count(*) from teacher group by hometown",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "For each hometown, how many teachers are there?",
        "seq_out": "select hometown, count(*) from teacher group by hometown",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown from teacher group by hometown order by count(*) desc limit 1",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "List the most common hometown of teachers.",
        "seq_out": "select hometown from teacher group by hometown order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown from teacher group by hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the hometowns shared by at least two teachers.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show the hometowns shared by at least two teachers.",
        "seq_out": "select hometown from teacher group by hometown having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show names of teachers that teach at least two courses.",
        "seq_out": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from visitor where age  < 30",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many visitors below age 30 are there?",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "How many visitors below age 30 are there?",
        "seq_out": "select count(*) from visitor where age < 30",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "seq_out": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "seq_out": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(num_of_staff) from museum where open_year  < 2009",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the average number of staff working for the museums that were open before 2009.",
        "seq_out": "select avg(num_of_staff) from museum where open_year < 2009",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by count(*) desc limit 1",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the name and age of the visitor who bought the most tickets at once.",
        "seq_out": "select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from museum where open_year > 2013 or open_year  < 2008",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "How many museums were opened after 2013 or before 2008?",
        "seq_out": "select count(*) from museum where open_year > 2013 or open_year < 2008",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many ships ended up being 'Captured'?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "How many ships ended up being 'Captured'?",
        "seq_out": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, result from battle where bulgarian_commander!= 'Boril'",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander ( Boril ) , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander ( Boril ) , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "seq_out": "select name, result from battle where bulgarian_commander != 'Boril'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type ( Brig ) , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type ( Brig ) , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "seq_out": "select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander ( Kaloyan ) , latin_commander ( Baldwin I ) , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander ( Kaloyan ) , latin_commander ( Baldwin I ) , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "seq_out": "select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select note from death where note like '%east%'",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the notes of the death events which has substring 'East'?",
        "seq_out": "select note from death where note like '%east%'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select line_1, line_2 from addresses",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "what are all the addresses including line 1 and line 2?",
        "seq_out": "select line_1, line_2 from addresses",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from courses",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many courses in total are listed?",
        "seq_out": "select count(*) from courses",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from courses",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many courses are there?",
        "seq_out": "select count(*) from courses",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select zip_postcode from addresses where city = \"Port Chelsea\"",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the zip code of the address in the city Port Chelsea?",
        "seq_out": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select zip_postcode from addresses where city = \"Port Chelsea\"",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the zip code for Port Chelsea?",
        "seq_out": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct department_id) from degree_programs",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many departments offer any degree?",
        "seq_out": "select count(distinct department_id) from degree_programs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct department_id) from degree_programs",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many different departments offer degrees?",
        "seq_out": "select count(distinct department_id) from degree_programs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct degree_summary_name) from degree_programs",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many different degree names are offered?",
        "seq_out": "select count(distinct degree_summary_name) from degree_programs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct degree_summary_name) from degree_programs",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many different degrees are offered?",
        "seq_out": "select count(distinct degree_summary_name) from degree_programs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names and descriptions of all the sections?",
        "seq_out": "select section_name, section_description from sections",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names and descriptions for all the sections?",
        "seq_out": "select section_name, section_description from sections",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name from sections order by section_name asc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "List the section_name in reversed lexicographical order.",
        "seq_out": "select section_name from sections order by section_name desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name from sections order by section_name",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names of the sections in reverse alphabetical order?",
        "seq_out": "select section_name from sections order by section_name desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the degree summary name that has the most number of students enrolled?",
        "seq_out": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are all the course names of the courses which ever have students enrolled in?",
        "seq_out": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all courses that have some students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names of all courses that have some students enrolled?",
        "seq_out": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the earliest date of a transcript release, and what details can you tell me?",
        "seq_out": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from transcripts",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are listed?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many transcripts are listed?",
        "seq_out": "select count(*) from transcripts",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the last transcript release date?",
        "seq_out": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last transcript released?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "When was the last transcript released?",
        "seq_out": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select other_student_details from students order by other_student_details asc",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "List all the student details in reversed lexicographical order.",
        "seq_out": "select other_student_details from students order by other_student_details desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select other_student_details from students order by other_student_details",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What other details can you tell me about students in reverse alphabetical order?",
        "seq_out": "select other_student_details from students order by other_student_details desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon order by title asc",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the title of all cartoons in alphabetical order.",
        "seq_out": "select title from cartoon order by title",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon order by title asc",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the titles of the cartoons sorted alphabetically?",
        "seq_out": "select title from cartoon order by title",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "List all cartoon directed by \"Ben Jones\".",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "What are the names of all cartoons directed by Ben Jones?",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "text_in": "How many cartoons were written by \"Joseph Kuhr\"?",
        "seq_out": "select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "text_in": "What is the number of cartoones written by Joseph Kuhr?",
        "seq_out": "select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "select content from tv_channel where series_name = \"Sky Radio\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the content of the series Sky Radio?",
        "seq_out": "select content from tv_channel where series_name = \"Sky Radio\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "select package_option from tv_channel where series_name = \"Sky Radio\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct package_option from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "seq_out": "select package_option from tv_channel where series_name = \"Sky Radio\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "How many TV Channel using language English?",
        "seq_out": "select count(*) from tv_channel where language = \"English\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "How many TV Channels use the English language?",
        "seq_out": "select count(*) from tv_channel where language = \"English\";",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "seq_out": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "seq_out": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List each language and the number of TV Channels using it.",
        "seq_out": "select language, count(*) from tv_channel group by language",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "For each language, list the number of TV Channels that use it.",
        "seq_out": "select language, count(*) from tv_channel group by language",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the Episode of all TV series sorted by rating.",
        "seq_out": "select episode from tv_series order by rating",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are all of the episodes ordered by ratings?",
        "seq_out": "select episode from tv_series order by rating",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode, rating from tv_series order by rating desc limit 3",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "seq_out": "select episode, rating from tv_series order by rating desc limit 3;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(share), min(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the maximum and minimum share for the TV series?",
        "seq_out": "select max(share), min(share) from tv_series;",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "Find the production code and channel of the most recently aired cartoon .",
        "seq_out": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "seq_out": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many poker players are there?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "How many poker players are there?",
        "seq_out": "select count(*) from poker_player",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Count the number of poker players.",
        "seq_out": "select count(*) from poker_player",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the earnings of poker players in descending order.",
        "seq_out": "select earnings from poker_player order by earnings desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the earnings of poker players, ordered descending by value?",
        "seq_out": "select earnings from poker_player order by earnings desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the final tables made and the best finishes of poker players.",
        "seq_out": "select final_table_made, best_finish from poker_player",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the final tables made and best finishes for all poker players?",
        "seq_out": "select final_table_made, best_finish from poker_player",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(earnings) from poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the average earnings of poker players?",
        "seq_out": "select avg(earnings) from poker_player",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(earnings) from poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the average earnings across all poker players.",
        "seq_out": "select avg(earnings) from poker_player",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the money rank of the poker player with the highest earnings?",
        "seq_out": "select money_rank from poker_player order by earnings desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the money rank of the player with the greatest earnings.",
        "seq_out": "select money_rank from poker_player order by earnings desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(final_table_made) from poker_player where earnings  < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "seq_out": "select max(final_table_made) from poker_player where earnings < 200000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(final_table_made) from poker_player where earnings  < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "seq_out": "select max(final_table_made) from poker_player where earnings < 200000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of poker players?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the names of all the poker players.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players whose earnings is higher than 300000?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Give the names of poker players who have earnings above 300000.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the names of poker players ordered by the final tables made in ascending order.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings asc limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the birth date of the poker player with the lowest earnings?",
        "seq_out": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings asc limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the birth date of the poker player with the lowest earnings.",
        "seq_out": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the money rank of the poker player with the greatest height.",
        "seq_out": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players in descending order of earnings?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the names of poker players sorted by their earnings descending.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are different nationalities of people and the corresponding number of people from each nation?",
        "seq_out": "select nationality, count(*) from people group by nationality",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "How many people are there of each nationality?",
        "seq_out": "select nationality, count(*) from people group by nationality",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the most common nationality of people?",
        "seq_out": "select nationality from people group by nationality order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Give the nationality that is most common across all people.",
        "seq_out": "select nationality from people group by nationality order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the nationalities that are shared by at least two people?",
        "seq_out": "select nationality from people group by nationality having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the nationalities for which there are two or more people.",
        "seq_out": "select nationality from people group by nationality having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, birth_date from people order by name asc",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the names and birth dates of people in ascending alphabetical order of name.",
        "seq_out": "select name, birth_date from people order by name asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, birth_date from people order by name asc",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "seq_out": "select name, birth_date from people order by name asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where nationality!= \"Russia\"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "text_in": "Show names of people whose nationality is not \"Russia\".",
        "seq_out": "select name from people where nationality != \"Russia\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where nationality!= \"Russia\"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "text_in": "What are the names of people who are not from Russia?",
        "seq_out": "select name from people where nationality != \"Russia\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the names of people that are not poker players.",
        "seq_out": "select name from people where people_id not in (select people_id from poker_player)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of people who do not play poker?",
        "seq_out": "select name from people where people_id not in (select people_id from poker_player)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct nationality) from people",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct nationalities are there?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "How many distinct nationalities are there?",
        "seq_out": "select count(distinct nationality) from people",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct nationality) from people",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different nationalities.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Count the number of different nationalities.",
        "seq_out": "select count(distinct nationality) from people",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "List the contestant numbers and names, ordered by contestant name descending.",
        "seq_out": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select vote_id, phone_number, state from votes",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "List the vote ids, phone numbers and states of all votes.",
        "seq_out": "select vote_id, phone_number, state from votes",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(area_code), min(area_code) from area_code_state",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the maximum and minimum values of area codes?",
        "seq_out": "select max(area_code), min(area_code) from area_code_state",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select created from votes where state = 'CA'",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state ( CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA ) , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state ( CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA ) , contestant_number , created",
        "text_in": "What is last date created of votes from the state 'CA'?",
        "seq_out": "select max(created) from votes where state = 'CA'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select contestant_name from contestants where contestant_name!= 'Jessie Alloway'",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Jessie Alloway ) | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Jessie Alloway ) | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "seq_out": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct state, created from votes",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and create time of all votes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the distinct states and create time of all votes?",
        "seq_out": "select distinct state, created from votes",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "seq_out": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "seq_out": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state ( CA , NY ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( NY , CA ) , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state ( CA , NY ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( NY , CA ) , contestant_number , created",
        "text_in": "What are the number of votes from state 'NY' or 'CA'?",
        "seq_out": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.created, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number where t2.contestant_name = 'Tabatha Gehling'",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Tabatha Gehling ) | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Tabatha Gehling ) | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "seq_out": "select t2.created, t2.state, t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many conductors are there?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "How many conductors are there?",
        "seq_out": "select count(*) from conductor",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of conductors.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Count the number of conductors.",
        "seq_out": "select count(*) from conductor",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List the names of conductors in ascending order of age.",
        "seq_out": "select name from conductor order by age asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by age",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors, ordered by age?",
        "seq_out": "select name from conductor order by age asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor where nationality!= \"USA\"",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors whose nationalities are not \"USA\"?",
        "seq_out": "select name from conductor where nationality != 'USA'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor where nationality!= \"USA\"",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the names of conductors that do not have the nationality \"USA\".",
        "seq_out": "select name from conductor where nationality != 'USA'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "seq_out": "select record_company from orchestra order by year_of_founded desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "seq_out": "select record_company from orchestra order by year_of_founded desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What is the average attendance of shows?",
        "seq_out": "select avg(attendance) from show",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the average attendance across all shows.",
        "seq_out": "select avg(attendance) from show",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "seq_out": "select max(share), min(share) from performance where type != \"Live final\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "seq_out": "select max(share), min(share) from performance where type != \"Live final\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "How many different nationalities do conductors have?",
        "seq_out": "select count(distinct nationality) from conductor",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Count the number of different nationalities of conductors.",
        "seq_out": "select count(distinct nationality) from conductor",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List names of conductors in descending order of years of work.",
        "seq_out": "select name from conductor order by year_of_work desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "seq_out": "select name from conductor order by year_of_work desc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List the name of the conductor with the most years of work.",
        "seq_out": "select name from conductor order by year_of_work desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What is the name of the conductor who has worked the greatest number of years?",
        "seq_out": "select name from conductor order by year_of_work desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Show the names of conductors that have conducted more than one orchestras.",
        "seq_out": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors who have conducted at more than one orchestra?",
        "seq_out": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Please show the different record companies and the corresponding number of orchestras.",
        "seq_out": "select record_company, count(*) from orchestra group by record_company",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "How many orchestras does each record company manage?",
        "seq_out": "select record_company, count(*) from orchestra group by record_company",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Please show the record formats of orchestras in ascending order of count.",
        "seq_out": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select major_record_format from orchestra group by major_record_format order by count(*) desc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the major record formats of orchestras, sorted by their frequency?",
        "seq_out": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the orchestras that do not have any performances?",
        "seq_out": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "seq_out": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Count the number of orchestras that have CD or DVD as their record format.",
        "seq_out": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many high schoolers are there?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many high schoolers are there?",
        "seq_out": "select count(*) from highschooler",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of high schoolers.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Count the number of high schoolers.",
        "seq_out": "select count(*) from highschooler",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names and grades of each high schooler.",
        "seq_out": "select name, grade from highschooler",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names and grades for each high schooler?",
        "seq_out": "select name, grade from highschooler",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show all the grades of the high schoolers.",
        "seq_out": "select grade from highschooler",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What is the grade of each high schooler?",
        "seq_out": "select grade from highschooler",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler where name = 'Kyle'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What grade is Kyle in?",
        "seq_out": "select grade from highschooler where name = \"Kyle\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler where name = 'Kyle'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Return the grade for the high schooler named Kyle.",
        "seq_out": "select grade from highschooler where name = \"Kyle\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all high schoolers in grade 10.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of all high schoolers in grade 10.",
        "seq_out": "select name from highschooler where grade = 10",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all high schoolers in grade 10?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of all high schoolers in grade 10?",
        "seq_out": "select name from highschooler where grade = 10",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select id from highschooler where name = 'Kyle'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the ID of the high schooler named Kyle.",
        "seq_out": "select id from highschooler where name = \"Kyle\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select id from highschooler where name = 'Kyle'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What is Kyle's id?",
        "seq_out": "select id from highschooler where name = \"Kyle\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many high schoolers are there in grade 9 or 10?",
        "seq_out": "select count(*) from highschooler where grade = 9 or grade = 10",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Count the number of high schoolers in grades 9 or 10.",
        "seq_out": "select count(*) from highschooler where grade = 9 or grade = 10",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the number of high schoolers for each grade.",
        "seq_out": "select grade, count(*) from highschooler group by grade",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many high schoolers are in each grade?",
        "seq_out": "select grade, count(*) from highschooler group by grade",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Which grade has the most high schoolers?",
        "seq_out": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Return the grade that has the greatest number of high schoolers.",
        "seq_out": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show me all grades that have at least 4 students.",
        "seq_out": "select grade from highschooler group by grade having count(*) >= 4",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Which grades have 4 or more high schoolers?",
        "seq_out": "select grade from highschooler group by grade having count(*) >= 4",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "seq_out": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "seq_out": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What is the name of the breed with the most dogs?",
        "seq_out": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which breed do the most dogs have? Give me the breed name.",
        "seq_out": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "seq_out": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "seq_out": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the date of each treatment, together with the first name of the professional who operated it.",
        "seq_out": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the date and the operating professional's first name of each treatment?",
        "seq_out": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List pairs of the owner's first name and the dogs's name.",
        "seq_out": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are each owner's first name and their dogs's name?",
        "seq_out": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "seq_out": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "seq_out": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the arriving date and the departing date of all the dogs?",
        "seq_out": "select date_arrived, date_departed from dogs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the arrival date and the departure date for all the dogs.",
        "seq_out": "select date_arrived, date_departed from dogs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct dog_id) from treatments",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How many dogs went through any treatments?",
        "seq_out": "select count(distinct dog_id) from treatments",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct dog_id) from treatments",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Count the number of dogs that went through a treatment.",
        "seq_out": "select count(distinct dog_id) from treatments",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct professional_id) from treatments",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How many professionals have performed any treatment to dogs?",
        "seq_out": "select count(distinct professional_id) from treatments",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(distinct professional_id) from treatments",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the number of professionals who have ever treated dogs.",
        "seq_out": "select count(distinct professional_id) from treatments",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select role_code, street, city, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "seq_out": "select role_code, street, city, state from professionals where city like '%west%'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select role_code, street, city, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "seq_out": "select role_code, street, city, state from professionals where city like '%west%'",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Show me the cost of the most recently performed treatment.",
        "seq_out": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_type, charge_amount from charges",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How much does each charge type costs? List both charge type and amount.",
        "seq_out": "select charge_type, charge_amount from charges",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_type, charge_amount from charges",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List each charge type and its amount.",
        "seq_out": "select charge_type, charge_amount from charges",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_amount from charges order by charge_type desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What is the charge amount of the most expensive charge type?",
        "seq_out": "select max(charge_amount) from charges",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address, cell_number, home_phone from professionals",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the email, cell phone and home phone of all the professionals.",
        "seq_out": "select email_address, cell_number, home_phone from professionals",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address, cell_number, home_phone from professionals",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the email, cell phone and home phone of each professional?",
        "seq_out": "select email_address, cell_number, home_phone from professionals",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct breed_code, size_code from dogs",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the distinct breed type and size type combinations for dogs.",
        "seq_out": "select distinct breed_code, size_code from dogs",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "How many singers are there?",
        "seq_out": "select count(*) from singer",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the count of singers?",
        "seq_out": "select count(*) from singer",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "List the name of singers in ascending order of net worth.",
        "seq_out": "select name from singer order by net_worth_millions asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of singers ordered by ascending net worth?",
        "seq_out": "select name from singer order by net_worth_millions asc",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the birth year and citizenship of singers?",
        "seq_out": "select birth_year, citizenship from singer",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the birth years and citizenships of the singers?",
        "seq_out": "select birth_year, citizenship from singer",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where citizenship!= \"France\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship ( France ) | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship ( France ) | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "List the name of singers whose citizenship is not \"France\".",
        "seq_out": "select name from singer where citizenship != \"France\"",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show the name of singers whose birth year is either 1948 or 1949?",
        "seq_out": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "seq_out": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer order by net_worth_millions desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the name of the singer with the largest net worth?",
        "seq_out": "select name from singer order by net_worth_millions desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t2.singer_id order by count(*) desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the name of the singer who is worth the most?",
        "seq_out": "select name from singer order by net_worth_millions desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show different citizenship of singers and the number of singers of each citizenship.",
        "seq_out": "select citizenship, count(*) from singer group by citizenship",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "For each citizenship, how many singers are from that country?",
        "seq_out": "select citizenship, count(*) from singer group by citizenship",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Please show the most common citizenship of singers.",
        "seq_out": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the most common singer citizenship ?",
        "seq_out": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "seq_out": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show titles of songs and names of singers.",
        "seq_out": "select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the song titles and singer names?",
        "seq_out": "select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show distinct names of singers that have songs with sales more than 300000.",
        "seq_out": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "what are the different names of the singers that have sales more than 300000?",
        "seq_out": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show the names of singers that have more than one song.",
        "seq_out": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of the singers that have more than one songs?",
        "seq_out": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "List the name of singers that do not have any song.",
        "seq_out": "select name from singer where singer_id not in (select singer_id from song)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the sname of every sing that does not have any song?",
        "seq_out": "select name from singer where singer_id not in (select singer_id from song)",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from other_available_features",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available features are there in total?",
        "db_id": "real_estate_properties",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "time",
            "time",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        },
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "struct_in": "| real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "text_in": "How many available features are there in total?",
        "seq_out": "select count(*) from other_available_features",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "db_id": "real_estate_properties",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "time",
            "time",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        },
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "struct_in": "| real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "text_in": "Show the property type descriptions of properties belonging to that code.",
        "seq_out": "select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code = t2.property_type_code group by t1.property_type_code",
        "description": "task: spider",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    }
]