[
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "text2sql": "select count(*) from singer",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM singer",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "text2sql": "select count(*) from singer",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM singer",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "text2sql": "select name, country, age from singer order by age desc",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.name,singer.country,singer.age\nORDER BY singer.age DESC",
        "sql_ground": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "answers": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "text2sql": "select name, country, age from singer order by age desc",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.name,singer.country,singer.age\nORDER BY singer.age DESC",
        "sql_ground": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "answers": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "text2sql": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.country = 'France'\nRETURN avg(singer.age),min(singer.age),max(singer.age)",
        "sql_ground": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "answers": [
            [
                34.5,
                25,
                43
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "text2sql": "select song_name, song_release_year from singer order by age limit 1",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.song_name,singer.song_release_year\nORDER BY singer.age\nLIMIT 1",
        "sql_ground": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "answers": [
            [
                "Love",
                "2016"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "text2sql": "select song_name, song_release_year from singer order by age asc limit 1",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.song_name,singer.song_release_year\nORDER BY singer.age ASC\nLIMIT 1",
        "sql_ground": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "answers": [
            [
                "Love",
                "2016"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "text2sql": "select distinct country from singer where age > 20",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.age > 20\nRETURN DISTINCT singer.country",
        "sql_ground": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "answers": [
            [
                "Netherlands"
            ],
            [
                "United States"
            ],
            [
                "France"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "text2sql": "select distinct country from singer where age > 20",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.age > 20\nRETURN DISTINCT singer.country",
        "sql_ground": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "answers": [
            [
                "Netherlands"
            ],
            [
                "United States"
            ],
            [
                "France"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "text2sql": "select country, count(*) from singer group by country",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWITH singer.country AS country, count(singer.country) AS count\nRETURN country,count",
        "sql_ground": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "answers": [
            [
                "Netherlands",
                1
            ],
            [
                "United States",
                1
            ],
            [
                "France",
                4
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "text2sql": "select country, count(*) from singer group by country",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWITH singer.country AS country, count(singer.country) AS count\nRETURN country,count",
        "sql_ground": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "answers": [
            [
                "Netherlands",
                1
            ],
            [
                "United States",
                1
            ],
            [
                "France",
                4
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "text2sql": "select location, name from stadium where capacity between 5000 and 10000",
        "sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.capacity<=10000\nRETURN stadium.location,stadium.name",
        "sql_ground": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "answers": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "text2sql": "select location, name from stadium where capacity between 5000 and 10000",
        "sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.capacity<=10000\nRETURN stadium.location,stadium.name",
        "sql_ground": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "answers": []
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "text2sql": "select avg(capacity), max(capacity) from stadium",
        "sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.capacity),max(stadium.capacity)",
        "sql_ground": "select avg(capacity) ,  max(capacity) from stadium",
        "answers": [
            [
                10621.666666666666,
                52500
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "text2sql": "select name, capacity from stadium order by average desc limit 1",
        "sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.name,stadium.capacity\nORDER BY stadium.average DESC\nLIMIT 1",
        "sql_ground": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "answers": [
            [
                "Stark's Park",
                10104
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "text2sql": "select name, capacity from stadium order by average desc limit 1",
        "sql2cypher": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.name,stadium.capacity\nORDER BY stadium.average DESC\nLIMIT 1",
        "sql_ground": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "answers": [
            [
                "Stark's Park",
                10104
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "text2sql": "select name, country from singer where song_name like '%Hey%'",
        "sql2cypher": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.song_name =~'.*[H|h]ey.*'\nRETURN singer.name,singer.country",
        "sql_ground": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "answers": [
            [
                "Justin Brown",
                "France"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "text2sql": "select count(*) from pets where weight > 10",
        "sql2cypher": "MATCH (pets:`pets_1.pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM pets WHERE weight  >  10",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "How many pets have a greater weight than 10?",
        "text2sql": "select count(*) from pets where weight > 10",
        "sql2cypher": "MATCH (pets:`pets_1.pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM pets WHERE weight  >  10",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet.",
        "text2sql": "select major, age from student where stuid not in (select stuid from has_pet)",
        "sql2cypher": "MATCH (student:`pets_1.student`)\nWHERE NOT (student:`pets_1.student`)-[]-(:`pets_1.has_pet`)\nRETURN student.major,student.age",
        "sql_ground": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "answers": [
            [
                600,
                18
            ],
            [
                600,
                19
            ],
            [
                600,
                21
            ],
            [
                600,
                20
            ],
            [
                600,
                26
            ],
            [
                600,
                18
            ],
            [
                600,
                18
            ],
            [
                600,
                20
            ],
            [
                600,
                19
            ],
            [
                600,
                17
            ],
            [
                600,
                22
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                600,
                16
            ],
            [
                600,
                17
            ],
            [
                600,
                27
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                520,
                22
            ],
            [
                520,
                19
            ],
            [
                540,
                17
            ],
            [
                520,
                20
            ],
            [
                540,
                18
            ],
            [
                520,
                18
            ],
            [
                520,
                19
            ],
            [
                520,
                18
            ],
            [
                550,
                20
            ],
            [
                100,
                17
            ],
            [
                550,
                21
            ],
            [
                550,
                20
            ],
            [
                550,
                20
            ],
            [
                550,
                18
            ],
            [
                50,
                18
            ],
            [
                50,
                26
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "text2sql": "select major, age from student where stuid not in (select stuid from has_pet)",
        "sql2cypher": "MATCH (student:`pets_1.student`)\nWHERE NOT (student:`pets_1.student`)-[]-(:`pets_1.has_pet`)\nRETURN student.major,student.age",
        "sql_ground": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "answers": [
            [
                600,
                18
            ],
            [
                600,
                19
            ],
            [
                600,
                21
            ],
            [
                600,
                20
            ],
            [
                600,
                26
            ],
            [
                600,
                18
            ],
            [
                600,
                18
            ],
            [
                600,
                20
            ],
            [
                600,
                19
            ],
            [
                600,
                17
            ],
            [
                600,
                22
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                600,
                16
            ],
            [
                600,
                17
            ],
            [
                600,
                27
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                520,
                22
            ],
            [
                520,
                19
            ],
            [
                540,
                17
            ],
            [
                520,
                20
            ],
            [
                540,
                18
            ],
            [
                520,
                18
            ],
            [
                520,
                19
            ],
            [
                520,
                18
            ],
            [
                550,
                20
            ],
            [
                100,
                17
            ],
            [
                550,
                21
            ],
            [
                550,
                20
            ],
            [
                550,
                20
            ],
            [
                550,
                18
            ],
            [
                50,
                18
            ],
            [
                50,
                26
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet.",
        "text2sql": "select pettype, weight from pets order by pet_age limit 1",
        "sql2cypher": "MATCH (pets:`pets_1.pets`)\nRETURN pets.pettype,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "sql_ground": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "answers": [
            [
                "dog",
                9.3
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "text2sql": "select petid, weight from pets where pet_age > 1",
        "sql2cypher": "MATCH (pets:`pets_1.pets`)\nWHERE pets.pet_age > 1\nRETURN pets.petid,pets.weight",
        "sql_ground": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "answers": [
            [
                2001,
                12.0
            ],
            [
                2002,
                13.4
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "text2sql": "select petid, weight from pets where pet_age > 1",
        "sql2cypher": "MATCH (pets:`pets_1.pets`)\nWHERE pets.pet_age > 1\nRETURN pets.petid,pets.weight",
        "sql_ground": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "answers": [
            [
                2001,
                12.0
            ],
            [
                2002,
                13.4
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many continents are there?",
        "text2sql": "select count(*) from continents",
        "sql2cypher": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CONTINENTS;",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of continents?",
        "text2sql": "select count(*) from continents",
        "sql2cypher": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CONTINENTS;",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "text2sql": "select count(*) from countries",
        "sql2cypher": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM COUNTRIES;",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many countries exist?",
        "text2sql": "select count(*) from countries",
        "sql2cypher": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM COUNTRIES;",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?",
        "text2sql": "select distinct model from model_list where year > 1980",
        "sql2cypher": "MATCH (model_list:`car_1.model_list`)\nWHERE 'year' > 1980\nRETURN DISTINCT model_list.model",
        "sql_ground": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "answers": []
    },
    {
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?",
        "text2sql": "select model from car_names where year > 1980",
        "sql2cypher": "MATCH (car_names:`car_1.car_names`)\nWHERE 'year' > 1980\nRETURN car_names.model",
        "sql_ground": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "answers": []
    },
    {
        "db_id": "car_1",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "text2sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders = 8 AND cars_data.year = 1974\nRETURN min(cars_data.weight)",
        "sql_ground": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "answers": [
            [
                4141
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "text2sql": "select maker, model from model_list",
        "sql2cypher": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.maker,model_list.model",
        "sql_ground": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "answers": [
            [
                1,
                "amc"
            ],
            [
                2,
                "audi"
            ],
            [
                3,
                "bmw"
            ],
            [
                4,
                "buick"
            ],
            [
                4,
                "cadillac"
            ],
            [
                5,
                "capri"
            ],
            [
                4,
                "chevrolet"
            ],
            [
                6,
                "chrysler"
            ],
            [
                7,
                "citroen"
            ],
            [
                8,
                "datsun"
            ],
            [
                6,
                "dodge"
            ],
            [
                9,
                "fiat"
            ],
            [
                5,
                "ford"
            ],
            [
                10,
                "hi"
            ],
            [
                11,
                "honda"
            ],
            [
                12,
                "mazda"
            ],
            [
                13,
                "mercedes"
            ],
            [
                13,
                "mercedes-benz"
            ],
            [
                5,
                "mercury"
            ],
            [
                8,
                "nissan"
            ],
            [
                4,
                "oldsmobile"
            ],
            [
                14,
                "opel"
            ],
            [
                15,
                "peugeot"
            ],
            [
                6,
                "plymouth"
            ],
            [
                4,
                "pontiac"
            ],
            [
                16,
                "renault"
            ],
            [
                17,
                "saab"
            ],
            [
                18,
                "subaru"
            ],
            [
                19,
                "toyota"
            ],
            [
                20,
                "triumph"
            ],
            [
                2,
                "volkswagen"
            ],
            [
                21,
                "volvo"
            ],
            [
                22,
                "kia"
            ],
            [
                23,
                "hyundai"
            ],
            [
                6,
                "jeep"
            ],
            [
                19,
                "scion"
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What are the makers and models?",
        "text2sql": "select maker, model from model_list",
        "sql2cypher": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.maker,model_list.model",
        "sql_ground": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "answers": [
            [
                1,
                "amc"
            ],
            [
                2,
                "audi"
            ],
            [
                3,
                "bmw"
            ],
            [
                4,
                "buick"
            ],
            [
                4,
                "cadillac"
            ],
            [
                5,
                "capri"
            ],
            [
                4,
                "chevrolet"
            ],
            [
                6,
                "chrysler"
            ],
            [
                7,
                "citroen"
            ],
            [
                8,
                "datsun"
            ],
            [
                6,
                "dodge"
            ],
            [
                9,
                "fiat"
            ],
            [
                5,
                "ford"
            ],
            [
                10,
                "hi"
            ],
            [
                11,
                "honda"
            ],
            [
                12,
                "mazda"
            ],
            [
                13,
                "mercedes"
            ],
            [
                13,
                "mercedes-benz"
            ],
            [
                5,
                "mercury"
            ],
            [
                8,
                "nissan"
            ],
            [
                4,
                "oldsmobile"
            ],
            [
                14,
                "opel"
            ],
            [
                15,
                "peugeot"
            ],
            [
                6,
                "plymouth"
            ],
            [
                4,
                "pontiac"
            ],
            [
                16,
                "renault"
            ],
            [
                17,
                "saab"
            ],
            [
                18,
                "subaru"
            ],
            [
                19,
                "toyota"
            ],
            [
                20,
                "triumph"
            ],
            [
                2,
                "volkswagen"
            ],
            [
                21,
                "volvo"
            ],
            [
                22,
                "kia"
            ],
            [
                23,
                "hyundai"
            ],
            [
                6,
                "jeep"
            ],
            [
                19,
                "scion"
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "text2sql": "select model from car_names group by model order by count(*) desc limit 1",
        "sql2cypher": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.model AS model, count(car_names.model) AS count\nRETURN model\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "answers": [
            [
                "ford"
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many cars have more than 4 cylinders?",
        "text2sql": "select count(*) from cars_data where cylinders > 4",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders > 4\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with more than 4 cylinders?",
        "text2sql": "select count(*) from cars_data where cylinders > 4",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders > 4\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "how many cars were produced in 1980?",
        "text2sql": "select count(*) from cars_data where year = 1980",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.year = 1980\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "answers": [
            [
                29
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "In 1980, how many cars were made?",
        "text2sql": "select count(*) from cars_data where year = 1980",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.year = 1980\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "answers": [
            [
                29
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "text2sql": "select count(*) from car_makers where fullname = \"American Motor Company\"",
        "sql2cypher": "MATCH (car_makers:`car_1.car_makers`)\nWHERE car_makers.fullname = 'American Motor Company'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "text2sql": "select year from cars_data where accelerate between 3000 and 4000",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.accelerate<=4000\nRETURN cars_data.year",
        "sql_ground": "select distinct year from cars_data where weight between 3000 and 4000;",
        "answers": []
    },
    {
        "db_id": "car_1",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "text2sql": "select distinct year from cars_data where accelerate between 4000 and 3000",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 4000<=cars_data.accelerate<=3000\nRETURN DISTINCT cars_data.year",
        "sql_ground": "select distinct year from cars_data where weight between 3000 and 4000;",
        "answers": []
    },
    {
        "db_id": "car_1",
        "question": "How many cars has over 6 cylinders?",
        "text2sql": "select count(*) from cars_data where cylinders > 6",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders > 6\nRETURN count(*)",
        "sql_ground": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "answers": [
            [
                108
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "text2sql": "select count(*) from cars_data where cylinders > 6",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders > 6\nRETURN count(*)",
        "sql_ground": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "answers": [
            [
                108
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "text2sql": "select max(mpg) from cars_data where cylinders >= 8 or year  < 1980",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders >= 8 OR cars_data.year < 1980\nRETURN max(cars_data.mpg)",
        "sql_ground": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "answers": [
            [
                "null"
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "text2sql": "select max(mpg) from cars_data where cylinders >= 8 or year  < 1980",
        "sql2cypher": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.cylinders >= 8 OR cars_data.year < 1980\nRETURN max(cars_data.mpg)",
        "sql_ground": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "answers": [
            [
                "null"
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "text2sql": "select model from model_list where lighter > 3500 and maker!= 'Ford Motor Company'",
        "sql2cypher": "MATCH (model_list:`car_1.model_list`)\nWHERE 'lighter' > 3500 AND model_list.maker <> 'Ford Motor Company'\nRETURN model_list.model",
        "sql_ground": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "text2sql": "select country from airlines where airline = \"JetBlue Airways\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.airline = 'JetBlue Airways'\nRETURN airlines.country",
        "sql_ground": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "What country is Jetblue Airways affiliated with?",
        "text2sql": "select country from airlines where airline = \"JetBlue Airways\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.airline = 'JetBlue Airways'\nRETURN airlines.country",
        "sql_ground": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "text2sql": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.airline = 'JetBlue Airways'\nRETURN airlines.abbreviation",
        "sql_ground": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "answers": [
            [
                "JetBlue"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "text2sql": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.airline = 'JetBlue Airways'\nRETURN airlines.abbreviation",
        "sql_ground": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "answers": [
            [
                "JetBlue"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "text2sql": "select airline, abbreviation from airlines where country = \"USA\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.country = 'USA'\nRETURN airlines.airline,airlines.abbreviation",
        "sql_ground": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "answers": [
            [
                "United Airlines",
                "UAL"
            ],
            [
                "US Airways",
                "USAir"
            ],
            [
                "Delta Airlines",
                "Delta"
            ],
            [
                "Southwest Airlines",
                "Southwest"
            ],
            [
                "American Airlines",
                "American"
            ],
            [
                "Northwest Airlines",
                "Northwest"
            ],
            [
                "Continental Airlines",
                "Continental"
            ],
            [
                "JetBlue Airways",
                "JetBlue"
            ],
            [
                "Frontier Airlines",
                "Frontier"
            ],
            [
                "AirTran Airways",
                "AirTran"
            ],
            [
                "Allegiant Air",
                "Allegiant"
            ],
            [
                "Virgin America",
                "Virgin"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "text2sql": "select airline, abbreviation from airlines where country = 'USA'",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.country = 'USA'\nRETURN airlines.airline,airlines.abbreviation",
        "sql_ground": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "answers": [
            [
                "United Airlines",
                "UAL"
            ],
            [
                "US Airways",
                "USAir"
            ],
            [
                "Delta Airlines",
                "Delta"
            ],
            [
                "Southwest Airlines",
                "Southwest"
            ],
            [
                "American Airlines",
                "American"
            ],
            [
                "Northwest Airlines",
                "Northwest"
            ],
            [
                "Continental Airlines",
                "Continental"
            ],
            [
                "JetBlue Airways",
                "JetBlue"
            ],
            [
                "Frontier Airlines",
                "Frontier"
            ],
            [
                "AirTran Airways",
                "AirTran"
            ],
            [
                "Allegiant Air",
                "Allegiant"
            ],
            [
                "Virgin America",
                "Virgin"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "List the airport code and name in the city of Anthony.",
        "text2sql": "select airportcode, airportname from airports where city = \"Anthony\"",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.city = 'Anthony'\nRETURN airports.airportcode,airports.airportname",
        "sql_ground": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "text2sql": "select airportcode, airportname from airports where city = \"Anthony\"",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.city = 'Anthony'\nRETURN airports.airportcode,airports.airportname",
        "sql_ground": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "How many airlines do we have?",
        "text2sql": "select count(*) from airlines",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM AIRLINES",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "What is the total number of airlines?",
        "text2sql": "select count(*) from airlines",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM AIRLINES",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many airports do we have?",
        "text2sql": "select count(*) from airports",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM AIRPORTS",
        "answers": [
            [
                100
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "text2sql": "select count(*) from airports",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM AIRPORTS",
        "answers": [
            [
                100
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Which airline has abbreviation 'UAL'?",
        "text2sql": "select airline from airlines where abbreviation = 'UAL'",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.abbreviation = 'UAL'\nRETURN airlines.airline",
        "sql_ground": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "answers": [
            [
                "United Airlines"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Give the airline with abbreviation 'UAL'.",
        "text2sql": "select airline from airlines where abbreviation = 'UAL'",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.abbreviation = 'UAL'\nRETURN airlines.airline",
        "sql_ground": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "answers": [
            [
                "United Airlines"
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many airlines are from USA?",
        "text2sql": "select count(*) from airlines where country = \"USA\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.country = 'USA'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of airlines in the USA.",
        "text2sql": "select count(*) from airlines where country = \"USA\"",
        "sql2cypher": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.country = 'USA'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "text2sql": "select city, country from airports where airportname = \"Alton\"",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.airportname = 'Alton'\nRETURN airports.city,airports.country",
        "sql_ground": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "text2sql": "select city, country from airports where airportname = \"Alton\"",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.airportname = 'Alton'\nRETURN airports.city,airports.country",
        "sql_ground": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "text2sql": "select airportname from airports where airportcode = 'AKO'",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.airportcode = 'AKO'\nRETURN airports.airportname",
        "sql_ground": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "answers": [
            [
                "Colorado Plains Regional Airport "
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the name of the airport with code 'AKO'.",
        "text2sql": "select airportname from airports where airportcode = 'AKO'",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.airportcode = 'AKO'\nRETURN airports.airportname",
        "sql_ground": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "answers": [
            [
                "Colorado Plains Regional Airport "
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "What are airport names at City 'Aberdeen'?",
        "text2sql": "select airportname from airports where city = 'Aberdeen'",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.city = 'Aberdeen'\nRETURN airports.airportname",
        "sql_ground": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airports in Aberdeen?",
        "text2sql": "select airportname from airports where city = \"Aberdeen\"",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE airports.city = 'Aberdeen'\nRETURN airports.airportname",
        "sql_ground": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from 'APG'?",
        "text2sql": "select count(*) from flights where sourceairport = \"APG\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'APG'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of flights departing from 'APG'.",
        "text2sql": "select count(*) from flights where sourceairport = \"APG\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'APG'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "text2sql": "select count(*) from flights where destairport = \"ATO\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.destairport = 'ATO'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "text2sql": "select count(*) from flights where sourceairport = \"Aberdeen\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'Aberdeen'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "text2sql": "select flightno from flights where airline = \"United Airlines\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.airline = 'United Airlines'\nRETURN flights.flightno",
        "sql_ground": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "text2sql": "select flightno from flights where sourceairport = \"APG\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'APG'\nRETURN flights.flightno",
        "sql_ground": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights landing at APG.",
        "text2sql": "select flightno from flights where sourceairport = \"APG\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'APG'\nRETURN flights.flightno",
        "sql_ground": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "text2sql": "select flightno from flights where sourceairport = \"Aberdeen\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'Aberdeen'\nRETURN flights.flightno",
        "sql_ground": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "text2sql": "select flightno from flights where sourceairport = \"Aberdeen\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'Aberdeen'\nRETURN flights.flightno",
        "sql_ground": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "text2sql": "select flightno from flights where sourceairport = \"Aberdeen\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.sourceairport = 'Aberdeen'\nRETURN flights.flightno",
        "sql_ground": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "answers": []
    },
    {
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "text2sql": "select count(*) from flights where city = \"Aberdeen\" or city = \"Abilene\"",
        "sql2cypher": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE 'city' = 'Aberdeen' OR 'city' = 'Abilene'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "text2sql": "select airportname from airports where airportcode not in (select sourceairport, destairport)",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE ['airportcode']\nRETURN airports.airportname",
        "sql_ground": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "answers": [
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Virginia Highlands "
            ],
            [
                "Ada "
            ],
            [
                "Adak Island Ns "
            ],
            [
                "Lenawee County "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Ainsworth "
            ],
            [
                "Akhiok SPB "
            ],
            [
                "Spb "
            ],
            [
                "Akiak "
            ],
            [
                "Colorado Plains Regional Airport "
            ],
            [
                "Akron/canton Regional "
            ],
            [
                "Fulton International "
            ],
            [
                "Akutan "
            ],
            [
                "Alakanuk "
            ],
            [
                "NAS "
            ],
            [
                "Holloman AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Albany NAS "
            ],
            [
                "Dougherty County "
            ],
            [
                "Albany International "
            ],
            [
                "Albany "
            ],
            [
                "Albert Lea "
            ],
            [
                "Albuquerque International "
            ],
            [
                "Aleknagik "
            ],
            [
                "Aleneva "
            ],
            [
                "Thomas C Russell Fld "
            ],
            [
                "Alexandria International "
            ],
            [
                "Esler Field "
            ],
            [
                "Alexandria "
            ],
            [
                "Alexandria Bay "
            ],
            [
                "Algona "
            ],
            [
                "International "
            ],
            [
                "George Downer "
            ],
            [
                "Alitak SPB "
            ],
            [
                "Allakaket "
            ],
            [
                "Alliance "
            ],
            [
                "Gratiot Community "
            ],
            [
                "Alpena County Regional "
            ],
            [
                "Alpine "
            ],
            [
                "Alton "
            ],
            [
                "Altus AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Alyeska "
            ],
            [
                "Rick Husband Amarillo International "
            ],
            [
                "Tradewind "
            ],
            [
                "Ambler "
            ],
            [
                "Amchitka "
            ],
            [
                "Municipal "
            ],
            [
                "Ames "
            ],
            [
                "Zahns "
            ],
            [
                "Amook "
            ],
            [
                "Anacortes "
            ],
            [
                "USN Heliport "
            ],
            [
                "Orange County Steel Salvage Heliport "
            ],
            [
                "Anaktuvuk "
            ],
            [
                "Elmendorf Afb "
            ],
            [
                "Ted Stevens Anchorage International Airport "
            ],
            [
                "Merrill Field "
            ],
            [
                "Municipal "
            ],
            [
                "Anderson "
            ],
            [
                "Andrews "
            ],
            [
                "Angel Fire "
            ],
            [
                "Tri-State Steuben Cty "
            ],
            [
                "Angoon "
            ],
            [
                "Rollang Field "
            ],
            [
                "Aniak "
            ],
            [
                "Anita Bay "
            ],
            [
                "Municipal "
            ],
            [
                "Lee "
            ],
            [
                "Annette Island "
            ],
            [
                "Anniston Metropolitan "
            ],
            [
                "Ft Mcclellan Bus Trml "
            ],
            [
                "Reilly AHP "
            ],
            [
                "Anthony "
            ],
            [
                "Antlers "
            ],
            [
                "Anvik "
            ],
            [
                "Municipal "
            ],
            [
                "Apple Valley "
            ],
            [
                "Outagamie County "
            ],
            [
                "Municipal "
            ],
            [
                "Arcata "
            ],
            [
                "Arctic Village "
            ],
            [
                "Downtown "
            ],
            [
                "Ardmore Municipal Arpt "
            ],
            [
                "US Army Heliport "
            ],
            [
                "Artesia "
            ],
            [
                "Asbury Park "
            ],
            [
                "Ashland "
            ],
            [
                "Ashley "
            ],
            [
                "Aspen "
            ],
            [
                "Astoria "
            ],
            [
                "Athens "
            ],
            [
                "Ohio University "
            ],
            [
                "McMinn County "
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?",
        "text2sql": "select airportname from airports where airportcode not in (select sourceairport from flights)",
        "sql2cypher": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.airportname",
        "sql_ground": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "answers": [
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Virginia Highlands "
            ],
            [
                "Ada "
            ],
            [
                "Adak Island Ns "
            ],
            [
                "Lenawee County "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Ainsworth "
            ],
            [
                "Akhiok SPB "
            ],
            [
                "Spb "
            ],
            [
                "Akiak "
            ],
            [
                "Colorado Plains Regional Airport "
            ],
            [
                "Akron/canton Regional "
            ],
            [
                "Fulton International "
            ],
            [
                "Akutan "
            ],
            [
                "Alakanuk "
            ],
            [
                "NAS "
            ],
            [
                "Holloman AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Albany NAS "
            ],
            [
                "Dougherty County "
            ],
            [
                "Albany International "
            ],
            [
                "Albany "
            ],
            [
                "Albert Lea "
            ],
            [
                "Albuquerque International "
            ],
            [
                "Aleknagik "
            ],
            [
                "Aleneva "
            ],
            [
                "Thomas C Russell Fld "
            ],
            [
                "Alexandria International "
            ],
            [
                "Esler Field "
            ],
            [
                "Alexandria "
            ],
            [
                "Alexandria Bay "
            ],
            [
                "Algona "
            ],
            [
                "International "
            ],
            [
                "George Downer "
            ],
            [
                "Alitak SPB "
            ],
            [
                "Allakaket "
            ],
            [
                "Alliance "
            ],
            [
                "Gratiot Community "
            ],
            [
                "Alpena County Regional "
            ],
            [
                "Alpine "
            ],
            [
                "Alton "
            ],
            [
                "Altus AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Alyeska "
            ],
            [
                "Rick Husband Amarillo International "
            ],
            [
                "Tradewind "
            ],
            [
                "Ambler "
            ],
            [
                "Amchitka "
            ],
            [
                "Municipal "
            ],
            [
                "Ames "
            ],
            [
                "Zahns "
            ],
            [
                "Amook "
            ],
            [
                "Anacortes "
            ],
            [
                "USN Heliport "
            ],
            [
                "Orange County Steel Salvage Heliport "
            ],
            [
                "Anaktuvuk "
            ],
            [
                "Elmendorf Afb "
            ],
            [
                "Ted Stevens Anchorage International Airport "
            ],
            [
                "Merrill Field "
            ],
            [
                "Municipal "
            ],
            [
                "Anderson "
            ],
            [
                "Andrews "
            ],
            [
                "Angel Fire "
            ],
            [
                "Tri-State Steuben Cty "
            ],
            [
                "Angoon "
            ],
            [
                "Rollang Field "
            ],
            [
                "Aniak "
            ],
            [
                "Anita Bay "
            ],
            [
                "Municipal "
            ],
            [
                "Lee "
            ],
            [
                "Annette Island "
            ],
            [
                "Anniston Metropolitan "
            ],
            [
                "Ft Mcclellan Bus Trml "
            ],
            [
                "Reilly AHP "
            ],
            [
                "Anthony "
            ],
            [
                "Antlers "
            ],
            [
                "Anvik "
            ],
            [
                "Municipal "
            ],
            [
                "Apple Valley "
            ],
            [
                "Outagamie County "
            ],
            [
                "Municipal "
            ],
            [
                "Arcata "
            ],
            [
                "Arctic Village "
            ],
            [
                "Downtown "
            ],
            [
                "Ardmore Municipal Arpt "
            ],
            [
                "US Army Heliport "
            ],
            [
                "Artesia "
            ],
            [
                "Asbury Park "
            ],
            [
                "Ashland "
            ],
            [
                "Ashley "
            ],
            [
                "Aspen "
            ],
            [
                "Astoria "
            ],
            [
                "Athens "
            ],
            [
                "Ohio University "
            ],
            [
                "McMinn County "
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "How many employees are there?",
        "text2sql": "select count(*) from employee",
        "sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM employee",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees",
        "text2sql": "select count(*) from employee",
        "sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM employee",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Sort employee names by their age in ascending order.",
        "text2sql": "select name from employee order by age asc",
        "sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.name\nORDER BY employee.age ASC",
        "sql_ground": "SELECT name FROM employee ORDER BY age",
        "answers": [
            [
                "George Chuter"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Lee Mears"
            ],
            [
                "Tim Payne"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Mark Regan"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "List the names of employees and sort in ascending order of age.",
        "text2sql": "select name from employee order by age asc",
        "sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.name\nORDER BY employee.age ASC",
        "sql_ground": "SELECT name FROM employee ORDER BY age",
        "answers": [
            [
                "George Chuter"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Lee Mears"
            ],
            [
                "Tim Payne"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Mark Regan"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which cities do more than one employee under age 30 come from?",
        "text2sql": "select city from employee where age > 30 group by city having count(*) > 1",
        "sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.age > 30\nWITH employee.city AS city, count(*) AS count\nWHERE count  > 1\nRETURN city",
        "sql_ground": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "answers": []
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the cities that have more than one employee under age 30.",
        "text2sql": "select city from employee where age > 30 group by city having count(*) > 1",
        "sql2cypher": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.age > 30\nWITH employee.city AS city, count(*) AS count\nWHERE count  > 1\nRETURN city",
        "sql_ground": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "answers": []
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "text2sql": "select manager_name, district from shop order by number_products desc limit 1",
        "sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.manager_name,shop.district\nORDER BY shop.number_products DESC\nLIMIT 1",
        "sql_ground": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "answers": [
            [
                "Ilkka M\u00e4kel\u00e4",
                "Lahden Stadion"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "text2sql": "select manager_name, district from shop order by number_products desc limit 1",
        "sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.manager_name,shop.district\nORDER BY shop.number_products DESC\nLIMIT 1",
        "sql_ground": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "answers": [
            [
                "Ilkka M\u00e4kel\u00e4",
                "Lahden Stadion"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "find the minimum and maximum number of products of all stores.",
        "text2sql": "select min(number_products), max(number_products) from shop",
        "sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.number_products),max(shop.number_products)",
        "sql_ground": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "answers": [
            [
                1600,
                15000
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "text2sql": "select min(number_products), max(number_products) from shop",
        "sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.number_products),max(shop.number_products)",
        "sql_ground": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "answers": [
            [
                1600,
                15000
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "text2sql": "select name, location, district from shop order by number_products desc",
        "sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.name,shop.location,shop.district\nORDER BY shop.number_products DESC",
        "sql_ground": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "answers": [
            [
                "FC Lahti",
                "Lahti",
                "Lahden Stadion"
            ],
            [
                "HJK",
                "Helsinki",
                "Finnair Stadium"
            ],
            [
                "FC Inter",
                "Turku",
                "Veritas Stadion"
            ],
            [
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto"
            ],
            [
                "FF Jaro",
                "Jakobstad",
                "Jakobstads Centralplan"
            ],
            [
                "FC KooTeePee",
                "Kotka",
                "Arto Tolsa Areena"
            ],
            [
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4"
            ],
            [
                "KuPS",
                "Kuopio",
                "Magnum Areena"
            ],
            [
                "IFK Mariehamn",
                "Mariehamn",
                "Wikl\u00f6f Holding Arena"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "text2sql": "select name, location, district from shop order by number_products desc",
        "sql2cypher": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.name,shop.location,shop.district\nORDER BY shop.number_products DESC",
        "sql_ground": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "answers": [
            [
                "FC Lahti",
                "Lahti",
                "Lahden Stadion"
            ],
            [
                "HJK",
                "Helsinki",
                "Finnair Stadium"
            ],
            [
                "FC Inter",
                "Turku",
                "Veritas Stadion"
            ],
            [
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto"
            ],
            [
                "FF Jaro",
                "Jakobstad",
                "Jakobstads Centralplan"
            ],
            [
                "FC KooTeePee",
                "Kotka",
                "Arto Tolsa Areena"
            ],
            [
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4"
            ],
            [
                "KuPS",
                "Kuopio",
                "Magnum Areena"
            ],
            [
                "IFK Mariehamn",
                "Mariehamn",
                "Wikl\u00f6f Holding Arena"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "text2sql": "select document_id, document_name, document_description from documents",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nRETURN documents.document_id,documents.document_name,documents.document_description",
        "sql_ground": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "text2sql": "select document_id, document_name, document_description from documents",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nRETURN documents.document_id,documents.document_name,documents.document_description",
        "sql_ground": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "text2sql": "select document_name, template_id from documents where document_description like '%w%'",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWHERE documents.document_description =~'.*[W|w].*'\nRETURN documents.document_name,documents.template_id",
        "sql_ground": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "text2sql": "select document_name, template_id from documents where document_name like '%w%'",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWHERE documents.document_name =~'.*[W|w].*'\nRETURN documents.document_name,documents.template_id",
        "sql_ground": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "text2sql": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWHERE documents.document_name = 'Robbin CV'\nRETURN documents.document_id,documents.template_id,documents.document_description",
        "sql_ground": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "text2sql": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWHERE documents.document_name = 'Robbin CV'\nRETURN documents.document_id,documents.template_id,documents.document_description",
        "sql_ground": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template ids and number of documents using each template.",
        "text2sql": "select template_id, count(*) from documents group by template_id",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWITH count(documents.template_id) AS count, documents.template_id AS template_id\nRETURN template_id,count",
        "sql_ground": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "text2sql": "select template_id, count(*) from documents group by template_id",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWITH count(documents.template_id) AS count, documents.template_id AS template_id\nRETURN template_id,count",
        "sql_ground": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates that are used by more than one document.",
        "text2sql": "select template_id from documents group by template_id having count(*) > 1",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWITH documents.template_id AS template_id, count(*) AS count\nWHERE count  > 1\nRETURN template_id",
        "sql_ground": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids of any templates used in more than a single document?",
        "text2sql": "select template_id from documents group by template_id having count(*) > 1",
        "sql2cypher": "MATCH (documents:`cre_Doc_Template_Mgt.documents`)\nWITH documents.template_id AS template_id, count(*) AS count\nWHERE count  > 1\nRETURN template_id",
        "sql_ground": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "text2sql": "select template_id, version_number, template_type_code from templates",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nRETURN templates.template_id,templates.version_number,templates.template_type_code",
        "sql_ground": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "text2sql": "select template_id, version_number, template_type_code from templates",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nRETURN templates.template_id,templates.version_number,templates.template_type_code",
        "sql_ground": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all distinct template type codes for all templates.",
        "text2sql": "select distinct template_type_code from templates",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nRETURN DISTINCT templates.template_type_code",
        "sql_ground": "SELECT DISTINCT template_type_code FROM Templates",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes?",
        "text2sql": "select distinct template_type_code from ref_template_types",
        "sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.ref_template_types`)\nRETURN DISTINCT ref_template_types.template_type_code",
        "sql_ground": "SELECT DISTINCT template_type_code FROM Templates",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "text2sql": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'\nRETURN templates.template_id",
        "sql_ground": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "text2sql": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'\nRETURN templates.template_id",
        "sql_ground": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "text2sql": "select version_number, template_type_code from templates where version_number > 5",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWHERE templates.version_number > 5\nRETURN templates.version_number,templates.template_type_code",
        "sql_ground": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "text2sql": "select version_number, template_type_code from templates where version_number > 5",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWHERE templates.version_number > 5\nRETURN templates.version_number,templates.template_type_code",
        "sql_ground": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and number of templates for each.",
        "text2sql": "select template_type_code, count(*) from templates group by template_type_code",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWITH templates.template_type_code AS template_type_code, count(templates.template_type_code) AS count\nRETURN template_type_code,count",
        "sql_ground": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "text2sql": "select template_type_code, count(*) from templates group by template_type_code",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWITH templates.template_type_code AS template_type_code, count(templates.template_type_code) AS count\nRETURN template_type_code,count",
        "sql_ground": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code has most number of templates?",
        "text2sql": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWITH templates.template_type_code AS template_type_code, count(templates.template_type_code) AS count\nRETURN template_type_code\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type that the most templates belong to.",
        "text2sql": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWITH templates.template_type_code AS template_type_code, count(templates.template_type_code) AS count\nRETURN template_type_code\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes with less than three templates.",
        "text2sql": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWITH templates.template_type_code AS template_type_code, count(*) AS count\nWHERE count  < 3\nRETURN template_type_code",
        "sql_ground": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "text2sql": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWITH templates.template_type_code AS template_type_code, count(*) AS count\nWHERE count  < 3\nRETURN template_type_code",
        "sql_ground": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and descriptions.",
        "text2sql": "select template_type_code, template_type_description from ref_template_types",
        "sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.ref_template_types`)\nRETURN ref_template_types.template_type_code,ref_template_types.template_type_description",
        "sql_ground": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the type codes and descriptions for all template types?",
        "text2sql": "select template_type_code, template_type_description from ref_template_types",
        "sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.ref_template_types`)\nRETURN ref_template_types.template_type_code,ref_template_types.template_type_description",
        "sql_ground": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code for template type description \"Book\".",
        "text2sql": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.ref_template_types`)\nWHERE ref_template_types.template_type_description = 'Book'\nRETURN ref_template_types.template_type_code",
        "sql_ground": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type with the description \"Book\".",
        "text2sql": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "sql2cypher": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.ref_template_types`)\nWHERE ref_template_types.template_type_description = 'Book'\nRETURN ref_template_types.template_type_code",
        "sql_ground": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "text2sql": "select template_id from templates where template_type_description = 'Presentation'",
        "sql2cypher": "MATCH (templates:`cre_Doc_Template_Mgt.templates`)\nWHERE 'template_type_description' = 'Presentation'\nRETURN templates.template_id",
        "sql_ground": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List all document ids with at least two paragraphs.",
        "text2sql": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.paragraphs`)\nWITH paragraphs.document_id AS document_id, count(*) AS count\nWHERE count  >= 2\nRETURN document_id",
        "sql_ground": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "text2sql": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.paragraphs`)\nWITH paragraphs.document_id AS document_id, count(*) AS count\nWHERE count  >= 2\nRETURN document_id",
        "sql_ground": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with least number of paragraphs?",
        "text2sql": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.paragraphs`)\nWITH paragraphs.document_id AS document_id, count(paragraphs.document_id) AS count\nRETURN document_id\nORDER BY count ASC\nLIMIT 1",
        "sql_ground": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "text2sql": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "sql2cypher": "MATCH (paragraphs:`cre_Doc_Template_Mgt.paragraphs`)\nWITH paragraphs.document_id AS document_id, count(paragraphs.document_id) AS count\nRETURN document_id\nORDER BY count ASC\nLIMIT 1",
        "sql_ground": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "course_teach",
        "question": "How many teachers are there?",
        "text2sql": "select count(*) from teacher",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM teacher",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What is the total count of teachers?",
        "text2sql": "select count(*) from teacher",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM teacher",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "List the names of teachers in ascending order of age.",
        "text2sql": "select name from teacher order by age asc",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.name\nORDER BY teacher.age ASC",
        "sql_ground": "SELECT Name FROM teacher ORDER BY Age ASC",
        "answers": [
            [
                "Vicente Carretero"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ],
            [
                "Lucy Wong"
            ],
            [
                "Anne Walker"
            ],
            [
                "Kearsley Brown"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers ordered by ascending age?",
        "text2sql": "select name from teacher order by age asc",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.name\nORDER BY teacher.age ASC",
        "sql_ground": "SELECT Name FROM teacher ORDER BY Age ASC",
        "answers": [
            [
                "Vicente Carretero"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ],
            [
                "Lucy Wong"
            ],
            [
                "Anne Walker"
            ],
            [
                "Kearsley Brown"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What are the age and hometown of teachers?",
        "text2sql": "select age, hometown from teacher",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.age,teacher.hometown",
        "sql_ground": "SELECT Age ,  Hometown FROM teacher",
        "answers": [
            [
                "32",
                "Blackrod Urban District"
            ],
            [
                "29",
                "Bolton County Borough"
            ],
            [
                "26",
                "Farnworth Municipal Borough"
            ],
            [
                "33",
                "Horwich Urban District"
            ],
            [
                "45",
                "Kearsley Urban District"
            ],
            [
                "41",
                "Little Lever Urban District"
            ],
            [
                "39",
                "Turton Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What is the age and hometown of every teacher?",
        "text2sql": "select age, hometown from teacher",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.age,teacher.hometown",
        "sql_ground": "SELECT Age ,  Hometown FROM teacher",
        "answers": [
            [
                "32",
                "Blackrod Urban District"
            ],
            [
                "29",
                "Bolton County Borough"
            ],
            [
                "26",
                "Farnworth Municipal Borough"
            ],
            [
                "33",
                "Horwich Urban District"
            ],
            [
                "45",
                "Kearsley Urban District"
            ],
            [
                "41",
                "Little Lever Urban District"
            ],
            [
                "39",
                "Turton Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "text2sql": "select name from teacher where hometown!= \"Little Lever Urban District\"",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.hometown <> 'Little Lever Urban District'\nRETURN teacher.name",
        "sql_ground": "select name from teacher where hometown != \"little lever urban district\"",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Vicente Carretero"
            ],
            [
                "John Deloor"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Lucy Wong"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "Show the name of teachers aged either 32 or 33?",
        "text2sql": "select name from teacher where age = 32 or age = 33",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.age = 32 OR teacher.age = 33\nRETURN teacher.name",
        "sql_ground": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "answers": []
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "text2sql": "select name from teacher where age = 32 or age = 33",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.age = 32 OR teacher.age = 33\nRETURN teacher.name",
        "sql_ground": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "answers": []
    },
    {
        "db_id": "course_teach",
        "question": "What is the hometown of the youngest teacher?",
        "text2sql": "select hometown from teacher order by age asc limit 1",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.hometown\nORDER BY teacher.age ASC\nLIMIT 1",
        "sql_ground": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "answers": [
            [
                "Farnworth Municipal Borough"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "Where is the youngest teacher from?",
        "text2sql": "select hometown from teacher order by age asc limit 1",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.hometown\nORDER BY teacher.age ASC\nLIMIT 1",
        "sql_ground": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "answers": [
            [
                "Farnworth Municipal Borough"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "text2sql": "select hometown, count(*) from teacher group by hometown",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.hometown AS hometown, count(teacher.hometown) AS count\nRETURN hometown,count",
        "sql_ground": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "answers": [
            [
                "Blackrod Urban District",
                1
            ],
            [
                "Bolton County Borough",
                1
            ],
            [
                "Farnworth Municipal Borough",
                1
            ],
            [
                "Horwich Urban District",
                1
            ],
            [
                "Kearsley Urban District",
                1
            ],
            [
                "Little Lever Urban District",
                1
            ],
            [
                "Turton Urban District",
                1
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "For each hometown, how many teachers are there?",
        "text2sql": "select hometown, count(*) from teacher group by hometown",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.hometown AS hometown, count(teacher.hometown) AS count\nRETURN hometown,count",
        "sql_ground": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "answers": [
            [
                "Blackrod Urban District",
                1
            ],
            [
                "Bolton County Borough",
                1
            ],
            [
                "Farnworth Municipal Borough",
                1
            ],
            [
                "Horwich Urban District",
                1
            ],
            [
                "Kearsley Urban District",
                1
            ],
            [
                "Little Lever Urban District",
                1
            ],
            [
                "Turton Urban District",
                1
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "Show the hometowns shared by at least two teachers.",
        "text2sql": "select hometown from teacher group by hometown having count(*) >= 2",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.hometown AS hometown, count(*) AS count\nWHERE count  >= 2\nRETURN hometown",
        "sql_ground": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "answers": []
    },
    {
        "db_id": "course_teach",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "text2sql": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.name",
        "sql_ground": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "text2sql": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "sql2cypher": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.name",
        "sql_ground": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "How many visitors below age 30 are there?",
        "text2sql": "select count(*) from visitor where age  < 30",
        "sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.age < 30\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM visitor WHERE age  <  30",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "text2sql": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.level_of_membership > 4\nRETURN visitor.name\nORDER BY visitor.level_of_membership DESC",
        "sql_ground": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "answers": [
            [
                "Gonzalo Higua\u00edn "
            ],
            [
                "Fernando Gago"
            ],
            [
                "Guti Midfielder"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "text2sql": "select name, level_of_membership from visitor where level_of_membership > 4 order by age",
        "sql2cypher": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.level_of_membership > 4\nRETURN visitor.name,visitor.level_of_membership\nORDER BY visitor.age",
        "sql_ground": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "answers": [
            [
                "Guti Midfielder",
                5
            ],
            [
                "Gonzalo Higua\u00edn ",
                8
            ],
            [
                "Fernando Gago",
                6
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?",
        "text2sql": "select museum_id, name from museum order by num_of_staff desc limit 1",
        "sql2cypher": "MATCH (museum:`museum_visit.museum`)\nRETURN museum.museum_id,museum.name\nORDER BY museum.num_of_staff DESC\nLIMIT 1",
        "sql_ground": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "answers": [
            [
                1,
                "Plaza Museum"
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "text2sql": "select first_name, country_code from players order by birth_date desc limit 1",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.country_code\nORDER BY players.birth_date DESC\nLIMIT 1",
        "sql_ground": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "text2sql": "select first_name, country_code from players order by birth_date desc limit 1",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.country_code\nORDER BY players.birth_date DESC\nLIMIT 1",
        "sql_ground": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "text2sql": "select first_name, last_name from players where hand = \"L\" order by birth_date",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWHERE players.hand = 'L'\nRETURN players.first_name,players.last_name\nORDER BY players.birth_date",
        "sql_ground": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "text2sql": "select first_name, last_name from players order by birth_date",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.last_name\nORDER BY players.birth_date",
        "sql_ground": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "Find the year that has the most number of matches.",
        "text2sql": "select year from matches group by year order by count(*) desc limit 1",
        "sql2cypher": "MATCH (matches:`wta_1.matches`)\nWITH count(matches.year) AS count, matches.year AS year\nRETURN year\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "Which year had the most matches?",
        "text2sql": "select year from matches group by year order by count(*) desc limit 1",
        "sql2cypher": "MATCH (matches:`wta_1.matches`)\nWITH count(matches.year) AS count, matches.year AS year\nRETURN year\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "find the number of players for each country.",
        "text2sql": "select country_code, count(*) from players group by country_code",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN country_code,count",
        "sql_ground": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "How many players are from each country?",
        "text2sql": "select country_code, count(*) from players group by country_code",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN country_code,count",
        "sql_ground": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "find the code of the country where has the greatest number of players.",
        "text2sql": "select country_code from players group by country_code order by count(*) desc limit 1",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN country_code\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "What is the code of the country with the most players?",
        "text2sql": "select country_code from players group by country_code order by count(*) desc limit 1",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN country_code\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "Find the codes of countries that have more than 50 players.",
        "text2sql": "select country_code from players group by country_code having count(*) > 50",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH players.country_code AS country_code, count(*) AS count\nWHERE count  > 50\nRETURN country_code",
        "sql_ground": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "text2sql": "select country_code from players group by country_code having count(*) > 50",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH players.country_code AS country_code, count(*) AS count\nWHERE count  > 50\nRETURN country_code",
        "sql_ground": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of matches happened in each year.",
        "text2sql": "select match_num, year from matches group by year",
        "sql2cypher": "MATCH (matches:`wta_1.matches`)\nWITH matches.year AS year, count(matches.year) AS count, matches.match_num AS match_num\nRETURN match_num,year",
        "sql_ground": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "How many matches were played in each year?",
        "text2sql": "select year, count(*) from matches group by year",
        "sql2cypher": "MATCH (matches:`wta_1.matches`)\nWITH count(matches.year) AS count, matches.year AS year\nRETURN year,count",
        "sql_ground": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of players for each hand type.",
        "text2sql": "select hand, count(*) from players group by hand",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH players.hand AS hand, count(players.hand) AS count\nRETURN hand,count",
        "sql_ground": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "answers": []
    },
    {
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "text2sql": "select hand, count(*) from players group by hand",
        "sql2cypher": "MATCH (players:`wta_1.players`)\nWITH players.hand AS hand, count(players.hand) AS count\nRETURN hand,count",
        "sql_ground": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "answers": []
    },
    {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "text2sql": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "sql2cypher": "MATCH (ship:`battle_death.ship`)\nWHERE ship.disposition_of_ship = 'Captured'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "text2sql": "select name, tonnage from ship order by name desc",
        "sql2cypher": "MATCH (ship:`battle_death.ship`)\nRETURN ship.name,ship.tonnage\nORDER BY ship.name DESC",
        "sql_ground": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "answers": [
            [
                "Three Brothers",
                "t"
            ],
            [
                "Mary",
                "t"
            ],
            [
                "Lettice",
                "t"
            ],
            [
                "HMS Avon",
                "391"
            ],
            [
                "HMS Atalanta",
                "225"
            ],
            [
                "Bon Accord",
                "t"
            ],
            [
                "Bacchus",
                "t"
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "text2sql": "select name, result from battle where bulgarian_commander!= 'Boril'",
        "sql2cypher": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander <> 'Boril'\nRETURN battle.name,battle.result",
        "sql_ground": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "answers": [
            [
                "Battle of Adrianople",
                "Bulgarian victory"
            ],
            [
                "Battle of Serres",
                "Bulgarian victory"
            ],
            [
                "Battle of Rusion",
                "Bulgarian victory"
            ],
            [
                "Battle of Rodosto",
                "Bulgarian victory"
            ],
            [
                "Battle of Messinopolis",
                "Bulgarian victory"
            ],
            [
                "Siege of Constantinople",
                "Two Year Truce"
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "text2sql": "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "sql2cypher": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'\nRETURN DISTINCT battle.name",
        "sql_ground": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "answers": [
            [
                "Battle of Adrianople"
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "text2sql": "select note from death where note like '%east%'",
        "sql2cypher": "MATCH (death:`battle_death.death`)\nWHERE death.note =~'.*[E|e]ast.*'\nRETURN death.note",
        "sql_ground": "SELECT note FROM death WHERE note LIKE '%East%'",
        "answers": [
            [
                "East Champaran, Bihar"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?",
        "text2sql": "select line_1, line_2 from addresses group by line_1",
        "sql2cypher": "MATCH (addresses:`student_transcripts_tracking.addresses`)\nWITH addresses.line_2 AS line_2, addresses.line_1 AS line_1, count(addresses.line_1) AS count\nRETURN line_1,line_2",
        "sql_ground": "SELECT line_1 ,  line_2 FROM addresses",
        "answers": [
            [
                "2294 Grant Square Apt. 235",
                "Apt. 370"
            ],
            [
                "3999 Aufderhar Ways Suite 593",
                "Apt. 388"
            ],
            [
                "67942 Carlotta Ferry Apt. 686",
                "Apt. 583"
            ],
            [
                "0144 Lamar Plaza Apt. 346",
                "Suite 703"
            ],
            [
                "858 Peggie Bypass Suite 212",
                "Apt. 335"
            ],
            [
                "16998 Mraz Lodge",
                "Apt. 689"
            ],
            [
                "193 Marlin Brook",
                "Apt. 406"
            ],
            [
                "202 Hessel Views Apt. 468",
                "Apt. 305"
            ],
            [
                "0643 Muller Vista",
                "Suite 383"
            ],
            [
                "7081 Eda Center",
                "Suite 830"
            ],
            [
                "9283 Schulist Falls Apt. 037",
                "Suite 239"
            ],
            [
                "979 Haag Shores Suite 656",
                "Apt. 468"
            ],
            [
                "492 Wilkinson Route",
                "Suite 865"
            ],
            [
                "186 Evan Motorway Apt. 409",
                "Suite 079"
            ],
            [
                "74046 Metz Walk Apt. 113",
                "Suite 674"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "text2sql": "select line_1, line_2 from addresses",
        "sql2cypher": "MATCH (addresses:`student_transcripts_tracking.addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "sql_ground": "SELECT line_1 ,  line_2 FROM addresses",
        "answers": [
            [
                "2294 Grant Square Apt. 235",
                "Apt. 370"
            ],
            [
                "3999 Aufderhar Ways Suite 593",
                "Apt. 388"
            ],
            [
                "67942 Carlotta Ferry Apt. 686",
                "Apt. 583"
            ],
            [
                "0144 Lamar Plaza Apt. 346",
                "Suite 703"
            ],
            [
                "858 Peggie Bypass Suite 212",
                "Apt. 335"
            ],
            [
                "16998 Mraz Lodge",
                "Apt. 689"
            ],
            [
                "193 Marlin Brook",
                "Apt. 406"
            ],
            [
                "202 Hessel Views Apt. 468",
                "Apt. 305"
            ],
            [
                "0643 Muller Vista",
                "Suite 383"
            ],
            [
                "7081 Eda Center",
                "Suite 830"
            ],
            [
                "9283 Schulist Falls Apt. 037",
                "Suite 239"
            ],
            [
                "979 Haag Shores Suite 656",
                "Apt. 468"
            ],
            [
                "492 Wilkinson Route",
                "Suite 865"
            ],
            [
                "186 Evan Motorway Apt. 409",
                "Suite 079"
            ],
            [
                "74046 Metz Walk Apt. 113",
                "Suite 674"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses in total are listed?",
        "text2sql": "select count(*) from courses",
        "sql2cypher": "MATCH (courses:`student_transcripts_tracking.courses`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Courses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there?",
        "text2sql": "select count(*) from courses",
        "sql2cypher": "MATCH (courses:`student_transcripts_tracking.courses`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Courses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the descriptions for all the math courses?",
        "text2sql": "select course_description from courses where course_name = \"math\"",
        "sql2cypher": "MATCH (courses:`student_transcripts_tracking.courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "sql_ground": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "answers": [
            [
                "q"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "text2sql": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "sql2cypher": "MATCH (addresses:`student_transcripts_tracking.addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "sql_ground": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "answers": [
            [
                "148"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Chelsea?",
        "text2sql": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "sql2cypher": "MATCH (addresses:`student_transcripts_tracking.addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "sql_ground": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "answers": [
            [
                "148"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions of all the sections?",
        "text2sql": "select section_name, section_description from sections",
        "sql2cypher": "MATCH (sections:`student_transcripts_tracking.sections`)\nRETURN sections.section_name,sections.section_description",
        "sql_ground": "SELECT section_name ,  section_description FROM Sections",
        "answers": [
            [
                "a",
                "non"
            ],
            [
                "b",
                "voluptatem"
            ],
            [
                "c",
                "qui"
            ],
            [
                "d",
                "voluptas"
            ],
            [
                "e",
                "ex"
            ],
            [
                "f",
                "doloremque"
            ],
            [
                "g",
                "provident"
            ],
            [
                "h",
                "et"
            ],
            [
                "j",
                "quis"
            ],
            [
                "k",
                "nesciunt"
            ],
            [
                "l",
                "ad"
            ],
            [
                "o",
                "et"
            ],
            [
                "p",
                "facilis"
            ],
            [
                "u",
                "reprehenderit"
            ],
            [
                "y",
                "qui"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions for all the sections?",
        "text2sql": "select section_name, section_description from sections",
        "sql2cypher": "MATCH (sections:`student_transcripts_tracking.sections`)\nRETURN sections.section_name,sections.section_description",
        "sql_ground": "SELECT section_name ,  section_description FROM Sections",
        "answers": [
            [
                "a",
                "non"
            ],
            [
                "b",
                "voluptatem"
            ],
            [
                "c",
                "qui"
            ],
            [
                "d",
                "voluptas"
            ],
            [
                "e",
                "ex"
            ],
            [
                "f",
                "doloremque"
            ],
            [
                "g",
                "provident"
            ],
            [
                "h",
                "et"
            ],
            [
                "j",
                "quis"
            ],
            [
                "k",
                "nesciunt"
            ],
            [
                "l",
                "ad"
            ],
            [
                "o",
                "et"
            ],
            [
                "p",
                "facilis"
            ],
            [
                "u",
                "reprehenderit"
            ],
            [
                "y",
                "qui"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the section_name in reversed lexicographical order.",
        "text2sql": "select section_name from sections order by section_name desc",
        "sql2cypher": "MATCH (sections:`student_transcripts_tracking.sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "sql_ground": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "answers": [
            [
                "y"
            ],
            [
                "u"
            ],
            [
                "p"
            ],
            [
                "o"
            ],
            [
                "l"
            ],
            [
                "k"
            ],
            [
                "j"
            ],
            [
                "h"
            ],
            [
                "g"
            ],
            [
                "f"
            ],
            [
                "e"
            ],
            [
                "d"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "a"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "text2sql": "select section_name from sections order by section_name desc",
        "sql2cypher": "MATCH (sections:`student_transcripts_tracking.sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "sql_ground": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "answers": [
            [
                "y"
            ],
            [
                "u"
            ],
            [
                "p"
            ],
            [
                "o"
            ],
            [
                "l"
            ],
            [
                "k"
            ],
            [
                "j"
            ],
            [
                "h"
            ],
            [
                "g"
            ],
            [
                "f"
            ],
            [
                "e"
            ],
            [
                "d"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "a"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the description of the department whose name has the substring the computer?",
        "text2sql": "select department_description from departments where department_name like \"%computer%\"",
        "sql2cypher": "MATCH (departments:`student_transcripts_tracking.departments`)\nWHERE departments.department_name =~'.*[\"|\"]%computer%\".*'\nRETURN departments.department_description",
        "sql_ground": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "answers": []
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the department description for the one whose name has the word computer?",
        "text2sql": "select department_description from departments where department_name like \"%computer%\"",
        "sql2cypher": "MATCH (departments:`student_transcripts_tracking.departments`)\nWHERE departments.department_name =~'.*[\"|\"]%computer%\".*'\nRETURN departments.department_description",
        "sql_ground": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "answers": []
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "text2sql": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "sql2cypher": "MATCH (semesters:`student_transcripts_tracking.semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.semesters`)-[]-(:`student_transcripts_tracking.student_enrolment`)\nRETURN semesters.semester_name",
        "sql_ground": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "answers": [
            [
                "fall 2010"
            ],
            [
                "spring 2013"
            ],
            [
                "spring 2014"
            ],
            [
                "spring 2016"
            ],
            [
                "spring 2017"
            ],
            [
                "winter 2018"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the semester with no students enrolled?",
        "text2sql": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "sql2cypher": "MATCH (semesters:`student_transcripts_tracking.semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.semesters`)-[]-(:`student_transcripts_tracking.student_enrolment`)\nRETURN semesters.semester_name",
        "sql_ground": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "answers": [
            [
                "fall 2010"
            ],
            [
                "spring 2013"
            ],
            [
                "spring 2014"
            ],
            [
                "spring 2016"
            ],
            [
                "spring 2017"
            ],
            [
                "winter 2018"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "text2sql": "select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "sql2cypher": "MATCH (students:`student_transcripts_tracking.students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "sql_ground": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "answers": [
            [
                "(096)889-8954x524"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "text2sql": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "sql2cypher": "MATCH (students:`student_transcripts_tracking.students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "sql_ground": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "text2sql": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "sql2cypher": "MATCH (students:`student_transcripts_tracking.students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "sql_ground": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "text2sql": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "sql2cypher": "MATCH (students:`student_transcripts_tracking.students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "sql_ground": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "When is the first transcript released? List the date and details.",
        "text2sql": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "sql_ground": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "answers": [
            [
                "1975-05-06 12:04:47",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "text2sql": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "sql_ground": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "answers": [
            [
                "1975-05-06 12:04:47",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "text2sql": "select count(*) from transcripts",
        "sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.transcripts`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Transcripts",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are listed?",
        "text2sql": "select count(*) from transcripts",
        "sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.transcripts`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Transcripts",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the last transcript release date?",
        "text2sql": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "sql_ground": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "answers": [
            [
                "2013-06-30 13:01:40"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "When was the last transcript released?",
        "text2sql": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "sql2cypher": "MATCH (transcripts:`student_transcripts_tracking.transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "sql_ground": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "answers": [
            [
                "2013-06-30 13:01:40"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List all the student details in reversed lexicographical order.",
        "text2sql": "select other_student_details from students order by other_student_details desc",
        "sql2cypher": "MATCH (students:`student_transcripts_tracking.students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "sql_ground": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "answers": [
            [
                "voluptatem"
            ],
            [
                "rerum"
            ],
            [
                "quia"
            ],
            [
                "qui"
            ],
            [
                "omnis"
            ],
            [
                "omnis"
            ],
            [
                "non"
            ],
            [
                "nesciunt"
            ],
            [
                "laborum"
            ],
            [
                "facilis"
            ],
            [
                "et"
            ],
            [
                "dolorum"
            ],
            [
                "autem"
            ],
            [
                "atque"
            ],
            [
                "assumenda"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "text2sql": "select other_student_details from students order by other_student_details desc",
        "sql2cypher": "MATCH (students:`student_transcripts_tracking.students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "sql_ground": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "answers": [
            [
                "voluptatem"
            ],
            [
                "rerum"
            ],
            [
                "quia"
            ],
            [
                "qui"
            ],
            [
                "omnis"
            ],
            [
                "omnis"
            ],
            [
                "non"
            ],
            [
                "nesciunt"
            ],
            [
                "laborum"
            ],
            [
                "facilis"
            ],
            [
                "et"
            ],
            [
                "dolorum"
            ],
            [
                "autem"
            ],
            [
                "atque"
            ],
            [
                "assumenda"
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the description for the section named h?",
        "text2sql": "select section_description from sections where section_name = \"h\"",
        "sql2cypher": "MATCH (sections:`student_transcripts_tracking.sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "sql_ground": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "answers": [
            [
                "et"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoons in alphabetical order.",
        "text2sql": "select title from cartoon order by title asc",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nRETURN cartoon.title\nORDER BY cartoon.title ASC",
        "sql_ground": "SELECT Title FROM Cartoon ORDER BY title",
        "answers": [
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Deep Cover for Batman!"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Evil Under the Sea!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Journey to the Center of the Bat!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "The Rise of the Blue Beetle!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "text2sql": "select title from cartoon order by title asc",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nRETURN cartoon.title\nORDER BY cartoon.title ASC",
        "sql_ground": "SELECT Title FROM Cartoon ORDER BY title",
        "answers": [
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Deep Cover for Batman!"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Evil Under the Sea!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Journey to the Center of the Bat!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "The Rise of the Blue Beetle!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "text2sql": "select title from cartoon where directed_by = \"Ben Jones\"",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nWHERE cartoon.directed_by = 'Ben Jones'\nRETURN cartoon.title",
        "sql_ground": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "The Eyes of Despero!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "text2sql": "select title from cartoon where directed_by = \"Ben Jones\"",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nWHERE cartoon.directed_by = 'Ben Jones'\nRETURN cartoon.title",
        "sql_ground": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "The Eyes of Despero!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "text2sql": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nWHERE cartoon.written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "text2sql": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nWHERE cartoon.written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "text2sql": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nWHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti'\nRETURN cartoon.title",
        "sql_ground": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "text2sql": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nWHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti'\nRETURN cartoon.title",
        "sql_ground": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "text2sql": "select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH count(tv_channel.country) AS count, tv_channel.country AS country\nRETURN country,count\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "answers": [
            [
                "Italy",
                12
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "text2sql": "select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH count(tv_channel.country) AS count, tv_channel.country AS country\nRETURN country,count\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "answers": [
            [
                "Italy",
                12
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "text2sql": "select content from tv_channel where series_name = \"Sky Radio\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.content",
        "sql_ground": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "answers": [
            [
                "music"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the content of the series Sky Radio?",
        "text2sql": "select content from tv_channel where series_name = \"Sky Radio\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.content",
        "sql_ground": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "answers": [
            [
                "music"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "text2sql": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.package_option",
        "sql_ground": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "answers": [
            [
                "Sky Famiglia"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "text2sql": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.package_option",
        "sql_ground": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "answers": [
            [
                "Sky Famiglia"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "How many TV Channel using language English?",
        "text2sql": "select count(*) from tv_channel where language = \"English\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.language = 'English'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "How many TV Channels use the English language?",
        "text2sql": "select count(*) from tv_channel where language = \"English\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.language = 'English'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "text2sql": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH tv_channel.language AS language, count(tv_channel.language) AS count\nRETURN language,count\nORDER BY count ASC\nLIMIT 1",
        "sql_ground": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "answers": [
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "text2sql": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH tv_channel.language AS language, count(tv_channel.language) AS count\nRETURN language,count\nORDER BY count ASC\nLIMIT 1",
        "sql_ground": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "answers": [
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List each language and the number of TV Channels using it.",
        "text2sql": "select language, count(*) from tv_channel group by language",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH tv_channel.language AS language, count(tv_channel.language) AS count\nRETURN language,count",
        "sql_ground": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "answers": [
            [
                "Italian",
                12
            ],
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "For each language, list the number of TV Channels that use it.",
        "text2sql": "select language, count(*) from tv_channel group by language",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH tv_channel.language AS language, count(tv_channel.language) AS count\nRETURN language,count",
        "sql_ground": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "answers": [
            [
                "Italian",
                12
            ],
            [
                "English",
                3
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List the Episode of all TV series sorted by rating.",
        "text2sql": "select episode from tv_series order by rating",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nRETURN tv_series.episode\nORDER BY tv_series.rating",
        "sql_ground": "SELECT Episode FROM TV_series ORDER BY rating",
        "answers": [
            [
                "The Hanged Man"
            ],
            [
                "Double Down"
            ],
            [
                "Home By Another Way"
            ],
            [
                "Keepers"
            ],
            [
                "Emily"
            ],
            [
                "Blowback"
            ],
            [
                "The Legend of Dylan McCleen"
            ],
            [
                "Winterland"
            ],
            [
                "The Year of the Rabbit"
            ],
            [
                "Game Three"
            ],
            [
                "Friendly Skies"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are all of the episodes ordered by ratings?",
        "text2sql": "select episode from tv_series order by rating",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nRETURN tv_series.episode\nORDER BY tv_series.rating",
        "sql_ground": "SELECT Episode FROM TV_series ORDER BY rating",
        "answers": [
            [
                "The Hanged Man"
            ],
            [
                "Double Down"
            ],
            [
                "Home By Another Way"
            ],
            [
                "Keepers"
            ],
            [
                "Emily"
            ],
            [
                "Blowback"
            ],
            [
                "The Legend of Dylan McCleen"
            ],
            [
                "Winterland"
            ],
            [
                "The Year of the Rabbit"
            ],
            [
                "Game Three"
            ],
            [
                "Friendly Skies"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "text2sql": "select episode, rating from tv_series order by rating desc limit 3",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nRETURN tv_series.episode,tv_series.rating\nORDER BY tv_series.rating DESC\nLIMIT 3",
        "sql_ground": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "answers": [
            [
                "A Love of a Lifetime",
                "5.8"
            ],
            [
                "Friendly Skies",
                "5.3"
            ],
            [
                "Game Three",
                "4.4"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "text2sql": "select episode, rating from tv_series order by rating desc limit 3",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nRETURN tv_series.episode,tv_series.rating\nORDER BY tv_series.rating DESC\nLIMIT 3",
        "sql_ground": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "answers": [
            [
                "A Love of a Lifetime",
                "5.8"
            ],
            [
                "Friendly Skies",
                "5.3"
            ],
            [
                "Game Three",
                "4.4"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the maximum and minimum share for the TV series?",
        "text2sql": "select max(share), min(share) from tv_series",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nRETURN max(tv_series.share),min(tv_series.share)",
        "sql_ground": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "answers": [
            [
                9.0,
                5.0
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "text2sql": "select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nWHERE tv_series.episode = 'A Love of a Lifetime'\nRETURN tv_series.air_date",
        "sql_ground": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "answers": [
            [
                "September 24, 2007"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "text2sql": "select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nWHERE tv_series.episode = 'A Love of a Lifetime'\nRETURN tv_series.air_date",
        "sql_ground": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "answers": [
            [
                "September 24, 2007"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "text2sql": "select weekly_rank from tv_series where episode = \"A Love of a Lifetime\"",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nWHERE tv_series.episode = 'A Love of a Lifetime'\nRETURN tv_series.weekly_rank",
        "sql_ground": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "answers": [
            [
                43.0
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "text2sql": "select weekly_rank from tv_series where episode = \"A Love of a Lifetime\"",
        "sql2cypher": "MATCH (tv_series:`tvshow.tv_series`)\nWHERE tv_series.episode = 'A Love of a Lifetime'\nRETURN tv_series.weekly_rank",
        "sql_ground": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "answers": [
            [
                43.0
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "text2sql": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "sql2cypher": "MATCH (cartoon:`tvshow.cartoon`)\nRETURN cartoon.production_code,cartoon.channel\nORDER BY cartoon.original_air_date DESC\nLIMIT 1",
        "sql_ground": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "answers": [
            [
                102.0,
                "701"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "text2sql": "select package_option, series_name from tv_channel order by hight_definition_tv desc limit 1",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nRETURN tv_channel.package_option,tv_channel.series_name\nORDER BY tv_channel.hight_definition_tv DESC\nLIMIT 1",
        "sql_ground": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "answers": [
            [
                "Sky Famiglia + Sky HD",
                "MTV Live HD"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "text2sql": "select pixel_aspect_ratio_par, country from tv_channel where language!= \"English\"",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWHERE tv_channel.language <> 'English'\nRETURN tv_channel.pixel_aspect_ratio_par,tv_channel.country",
        "sql_ground": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "answers": [
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "text2sql": "select id from tv_channel group by id having count(*) > 2",
        "sql2cypher": "MATCH (tv_channel:`tvshow.tv_channel`)\nWITH tv_channel.id AS id, count(*) AS count\nWHERE count  > 2\nRETURN id",
        "sql_ground": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "answers": []
    },
    {
        "db_id": "poker_player",
        "question": "How many poker players are there?",
        "text2sql": "select count(*) from poker_player",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM poker_player",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Count the number of poker players.",
        "text2sql": "select count(*) from poker_player",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM poker_player",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the earnings of poker players in descending order.",
        "text2sql": "select earnings from poker_player order by earnings desc",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.earnings\nORDER BY poker_player.earnings DESC",
        "sql_ground": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "answers": [
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                142800.0
            ],
            [
                104871.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "text2sql": "select earnings from poker_player order by earnings desc",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.earnings\nORDER BY poker_player.earnings DESC",
        "sql_ground": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "answers": [
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                142800.0
            ],
            [
                104871.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "text2sql": "select final_table_made, best_finish from poker_player",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.final_table_made,poker_player.best_finish",
        "sql_ground": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "answers": [
            [
                42.0,
                1.0
            ],
            [
                10.0,
                2.0
            ],
            [
                21.0,
                1.0
            ],
            [
                19.0,
                2.0
            ],
            [
                26.0,
                3.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "text2sql": "select final_table_made, best_finish from poker_player",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.final_table_made,poker_player.best_finish",
        "sql_ground": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "answers": [
            [
                42.0,
                1.0
            ],
            [
                10.0,
                2.0
            ],
            [
                21.0,
                1.0
            ],
            [
                19.0,
                2.0
            ],
            [
                26.0,
                3.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players?",
        "text2sql": "select avg(earnings) from poker_player",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.earnings)",
        "sql_ground": "SELECT avg(Earnings) FROM poker_player",
        "answers": [
            [
                301891.2
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Return the average earnings across all poker players.",
        "text2sql": "select avg(earnings) from poker_player",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.earnings)",
        "sql_ground": "SELECT avg(Earnings) FROM poker_player",
        "answers": [
            [
                301891.2
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "text2sql": "select money_rank from poker_player order by earnings desc limit 1",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.money_rank\nORDER BY poker_player.earnings DESC\nLIMIT 1",
        "sql_ground": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "answers": [
            [
                58.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Return the money rank of the player with the greatest earnings.",
        "text2sql": "select money_rank from poker_player order by earnings desc limit 1",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.money_rank\nORDER BY poker_player.earnings DESC\nLIMIT 1",
        "sql_ground": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "answers": [
            [
                58.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "text2sql": "select max(final_table_made) from poker_player where earnings  < 200000",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.earnings < 200000\nRETURN max(poker_player.final_table_made)",
        "sql_ground": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "answers": [
            [
                26.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "text2sql": "select max(final_table_made) from poker_player where earnings  < 200000",
        "sql2cypher": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.earnings < 200000\nRETURN max(poker_player.final_table_made)",
        "sql_ground": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "answers": [
            [
                26.0
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "text2sql": "select nationality, count(*) from people group by nationality",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWITH count(people.nationality) AS count, people.nationality AS nationality\nRETURN nationality,count",
        "sql_ground": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "answers": [
            [
                "Russia",
                6
            ],
            [
                "Bulgaria",
                1
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "How many people are there of each nationality?",
        "text2sql": "select nationality, count(*) from people group by nationality",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWITH count(people.nationality) AS count, people.nationality AS nationality\nRETURN nationality,count",
        "sql_ground": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "answers": [
            [
                "Russia",
                6
            ],
            [
                "Bulgaria",
                1
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the most common nationality of people?",
        "text2sql": "select nationality from people group by nationality order by count(*) desc limit 1",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWITH count(people.nationality) AS count, people.nationality AS nationality\nRETURN nationality\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Give the nationality that is most common across all people.",
        "text2sql": "select nationality from people group by nationality order by count(*) desc limit 1",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWITH count(people.nationality) AS count, people.nationality AS nationality\nRETURN nationality\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the nationalities that are shared by at least two people?",
        "text2sql": "select nationality from people group by nationality having count(*) >= 2",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWITH people.nationality AS nationality, count(*) AS count\nWHERE count  >= 2\nRETURN nationality",
        "sql_ground": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Return the nationalities for which there are two or more people.",
        "text2sql": "select nationality from people group by nationality having count(*) > 2",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWITH people.nationality AS nationality, count(*) AS count\nWHERE count  > 2\nRETURN nationality",
        "sql_ground": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "text2sql": "select name, birth_date from people order by name asc",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.name,people.birth_date\nORDER BY people.name ASC",
        "sql_ground": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "answers": [
            [
                "Aleksey Ostapenko",
                "May 26, 1986"
            ],
            [
                "Maksim Botin",
                "July 14, 1983"
            ],
            [
                "Roman Bragin",
                "April 17, 1987"
            ],
            [
                "Semen Poltavskiy",
                "February 8, 1981"
            ],
            [
                "Sergey Grankin",
                "January 22, 1987"
            ],
            [
                "Teodor Salparov",
                "August 16, 1982"
            ],
            [
                "Yevgeni Sivozhelez",
                "August 8, 1986"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "text2sql": "select name, birth_date from people order by name",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nRETURN people.name,people.birth_date\nORDER BY people.name",
        "sql_ground": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "answers": [
            [
                "Aleksey Ostapenko",
                "May 26, 1986"
            ],
            [
                "Maksim Botin",
                "July 14, 1983"
            ],
            [
                "Roman Bragin",
                "April 17, 1987"
            ],
            [
                "Semen Poltavskiy",
                "February 8, 1981"
            ],
            [
                "Sergey Grankin",
                "January 22, 1987"
            ],
            [
                "Teodor Salparov",
                "August 16, 1982"
            ],
            [
                "Yevgeni Sivozhelez",
                "August 8, 1986"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "text2sql": "select name from people where nationality!= \"Russia\"",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE people.nationality <> 'Russia'\nRETURN people.name",
        "sql_ground": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "answers": [
            [
                "Teodor Salparov"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who are not from Russia?",
        "text2sql": "select name from people where nationality!= \"Russia\"",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE people.nationality <> 'Russia'\nRETURN people.name",
        "sql_ground": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "answers": [
            [
                "Teodor Salparov"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "text2sql": "select name from people where people_id not in (select people_id from poker_player)",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.name",
        "sql_ground": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "answers": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "text2sql": "select name from people where people_id not in (select people_id from poker_player)",
        "sql2cypher": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.name",
        "sql_ground": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "answers": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "How many states are there?",
        "text2sql": "select count(*) from area_code_state",
        "sql2cypher": "MATCH (area_code_state:`voter_1.area_code_state`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM area_code_state",
        "answers": [
            [
                305
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "text2sql": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "sql2cypher": "MATCH (contestants:`voter_1.contestants`)\nRETURN contestants.contestant_number,contestants.contestant_name\nORDER BY contestants.contestant_name DESC",
        "sql_ground": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "answers": [
            [
                2,
                "Tabatha Gehling"
            ],
            [
                8,
                "Nita Coster"
            ],
            [
                11,
                "Loraine NygrenTania Mattioli"
            ],
            [
                9,
                "Kurt Walser"
            ],
            [
                3,
                "Kelly Clauss"
            ],
            [
                6,
                "Jessie Eichman"
            ],
            [
                4,
                "Jessie Alloway"
            ],
            [
                10,
                "Ericka Dieter"
            ],
            [
                1,
                "Edwina Burnam"
            ],
            [
                7,
                "Allie Rogalski"
            ],
            [
                5,
                "Alana Bregman"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "text2sql": "select vote_id, phone_number, state from votes",
        "sql2cypher": "MATCH (votes:`voter_1.votes`)\nRETURN votes.vote_id,votes.phone_number,votes.state",
        "sql_ground": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "answers": [
            [
                1,
                7182887233,
                "NY"
            ],
            [
                2,
                7148407040,
                "NY"
            ],
            [
                3,
                6209222712,
                "CA"
            ],
            [
                5,
                5112677315,
                "NJ\n"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "What are the maximum and minimum values of area codes?",
        "text2sql": "select max(area_code), min(area_code) from area_code_state",
        "sql2cypher": "MATCH (area_code_state:`voter_1.area_code_state`)\nRETURN max(area_code_state.area_code),min(area_code_state.area_code)",
        "sql_ground": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "answers": [
            [
                989,
                201
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?",
        "text2sql": "select created from votes where state = 'CA' order by created desc limit 1",
        "sql2cypher": "MATCH (votes:`voter_1.votes`)\nWHERE votes.state = 'CA'\nRETURN votes.created\nORDER BY votes.created DESC\nLIMIT 1",
        "sql_ground": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "answers": [
            [
                "2018-03-09 19:03:39"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "text2sql": "select contestant_name from contestants where contestant_name!= 'Jessie Alloway'",
        "sql2cypher": "MATCH (contestants:`voter_1.contestants`)\nWHERE contestants.contestant_name <> 'Jessie Alloway'\nRETURN contestants.contestant_name",
        "sql_ground": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "answers": [
            [
                "Edwina Burnam"
            ],
            [
                "Tabatha Gehling"
            ],
            [
                "Kelly Clauss"
            ],
            [
                "Alana Bregman"
            ],
            [
                "Jessie Eichman"
            ],
            [
                "Allie Rogalski"
            ],
            [
                "Nita Coster"
            ],
            [
                "Kurt Walser"
            ],
            [
                "Ericka Dieter"
            ],
            [
                "Loraine NygrenTania Mattioli"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "What are the distinct states and create time of all votes?",
        "text2sql": "select distinct state, created from votes",
        "sql2cypher": "MATCH (votes:`voter_1.votes`)\nRETURN DISTINCT votes.state,votes.created",
        "sql_ground": "SELECT DISTINCT state ,  created FROM votes",
        "answers": [
            [
                "NY",
                "2018-03-09 19:03:21"
            ],
            [
                "NY",
                "2018-03-09 19:03:36"
            ],
            [
                "CA",
                "2018-03-09 19:03:39"
            ],
            [
                "NJ\n",
                "2018-03-09 19:03:40"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "text2sql": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "sql2cypher": "MATCH (votes:`voter_1.votes`)\nWHERE votes.state = 'NY' OR votes.state = 'CA'\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "text2sql": "select contestant_name from contestants where contestant_name like '%al%'",
        "sql2cypher": "MATCH (contestants:`voter_1.contestants`)\nWHERE contestants.contestant_name =~'.*[A|a]l.*'\nRETURN contestants.contestant_name",
        "sql_ground": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "answers": [
            [
                "Jessie Alloway"
            ],
            [
                "Alana Bregman"
            ],
            [
                "Allie Rogalski"
            ],
            [
                "Kurt Walser"
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "text2sql": "select name from city where population > 1950",
        "sql2cypher": "MATCH (city:`world_1.city`)\nWHERE city.population > 1950\nRETURN city.name",
        "sql_ground": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "text2sql": "select continent from country where localname = \"Anguilla\";",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.localname = 'Anguilla'\nRETURN country.continent",
        "sql_ground": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "text2sql": "select continent from country where localname = \"Anguilla\";",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.localname = 'Anguilla'\nRETURN country.continent",
        "sql_ground": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "text2sql": "select population, lifeexpectancy from country where name = \"Brazil\";",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.name = 'Brazil'\nRETURN country.population,country.lifeexpectancy",
        "sql_ground": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "text2sql": "select population, lifeexpectancy from country where name = \"Brazil\";",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.name = 'Brazil'\nRETURN country.population,country.lifeexpectancy",
        "sql_ground": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the region and population of Angola?",
        "text2sql": "select region, population from country where localname = \"Angola\";",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.localname = 'Angola'\nRETURN country.region,country.population",
        "sql_ground": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "text2sql": "select region, population from country where localname = \"Angola\";",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.localname = 'Angola'\nRETURN country.region,country.population",
        "sql_ground": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "text2sql": "select name from country where continent = 'Asia' order by lifeexpectancy limit 1",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.continent = 'Asia'\nRETURN country.name\nORDER BY country.lifeexpectancy\nLIMIT 1",
        "sql_ground": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "text2sql": "select name from country where continent = 'Asia' order by lifeexpectancy limit 1",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.continent = 'Asia'\nRETURN country.name\nORDER BY country.lifeexpectancy\nLIMIT 1",
        "sql_ground": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Which language is the most popular on the Asian continent?",
        "text2sql": "select language from countrylanguage where continent = \"Asia\" group by language order by count(*) desc limit 1",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE 'continent' = 'Asia'\nWITH count(countrylanguage.language) AS count, countrylanguage.language AS language\nRETURN language\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "text2sql": "select language from countrylanguage where continent = 'Asia' group by language order by count(*) desc limit 1",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE 'continent' = 'Asia'\nWITH count(countrylanguage.language) AS count, countrylanguage.language AS language\nRETURN language\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "text2sql": "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.continent = 'Asia'\nRETURN country.name,country.population,country.lifeexpectancy\nORDER BY country.surfacearea DESC\nLIMIT 1",
        "sql_ground": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "text2sql": "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.continent = 'Asia'\nRETURN country.name,country.population,country.lifeexpectancy\nORDER BY country.surfacearea DESC\nLIMIT 1",
        "sql_ground": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "text2sql": "select countrycode from countrylanguage where language!= \"English\"",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.language <> 'English'\nRETURN countrylanguage.countrycode",
        "sql_ground": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "text2sql": "select countrycode from countrylanguage where language!= \"English\"",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.language <> 'English'\nRETURN countrylanguage.countrycode",
        "sql_ground": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "text2sql": "select name, indepyear, surfacearea from country order by population asc limit 1",
        "sql2cypher": "MATCH (country:`world_1.country`)\nRETURN country.name,country.indepyear,country.surfacearea\nORDER BY country.population ASC\nLIMIT 1",
        "sql_ground": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "text2sql": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "sql2cypher": "MATCH (country:`world_1.country`)\nRETURN country.name,country.population,country.headofstate\nORDER BY country.surfacearea DESC\nLIMIT 1",
        "sql_ground": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "text2sql": "select name, surfacearea from country order by surfacearea desc limit 5",
        "sql2cypher": "MATCH (country:`world_1.country`)\nRETURN country.name,country.surfacearea\nORDER BY country.surfacearea DESC\nLIMIT 5",
        "sql_ground": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "text2sql": "select name, surfacearea from country order by population desc limit 5",
        "sql2cypher": "MATCH (country:`world_1.country`)\nRETURN country.name,country.surfacearea\nORDER BY country.population DESC\nLIMIT 5",
        "sql_ground": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are names of countries with the top 3 largest population?",
        "text2sql": "select name from country order by population desc limit 3",
        "sql2cypher": "MATCH (country:`world_1.country`)\nRETURN country.name\nORDER BY country.population DESC\nLIMIT 3",
        "sql_ground": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "text2sql": "select name from country order by population desc limit 3",
        "sql2cypher": "MATCH (country:`world_1.country`)\nRETURN country.name\nORDER BY country.population DESC\nLIMIT 3",
        "sql_ground": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "text2sql": "select name from city order by population asc limit 3",
        "sql2cypher": "MATCH (city:`world_1.city`)\nRETURN city.name\nORDER BY city.population ASC\nLIMIT 3",
        "sql_ground": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "text2sql": "select name from country where continent = \"Europe\" and population = 80000",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.continent = 'Europe' AND country.population = 80000\nRETURN country.name",
        "sql_ground": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "text2sql": "select name from country where continent = \"Europe\" and population = 80000",
        "sql2cypher": "MATCH (country:`world_1.country`)\nWHERE country.continent = 'Europe' AND country.population = 80000\nRETURN country.name",
        "sql_ground": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "text2sql": "select name from city where population between 160000 and 900000",
        "sql2cypher": "MATCH (city:`world_1.city`)\nWHERE 160000<=city.population<=900000\nRETURN city.name",
        "sql_ground": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "text2sql": "select name from city where population between 160000 and 900000",
        "sql2cypher": "MATCH (city:`world_1.city`)\nWHERE 160000<=city.population<=900000\nRETURN city.name",
        "sql_ground": "select name from city where population between 160000 and 900000",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Which language is spoken by the largest number of countries?",
        "text2sql": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH count(countrylanguage.language) AS count, countrylanguage.language AS language\nRETURN language\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "text2sql": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH count(countrylanguage.language) AS count, countrylanguage.language AS language\nRETURN language\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "text2sql": "select countrycode, language from countrylanguage group by countrycode order by count(*) desc limit 1",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH countrylanguage.countrycode AS countrycode, count(countrylanguage.countrycode) AS count, countrylanguage.language AS language\nRETURN countrycode,language\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "text2sql": "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.language = 'Spanish'\nRETURN countrylanguage.countrycode\nORDER BY countrylanguage.percentage DESC\nLIMIT 1",
        "sql_ground": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "answers": []
    },
    {
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "text2sql": "select countrycode from countrylanguage where language = \"Spanish\"",
        "sql2cypher": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.language = 'Spanish'\nRETURN countrylanguage.countrycode",
        "sql_ground": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "answers": []
    },
    {
        "db_id": "orchestra",
        "question": "How many conductors are there?",
        "text2sql": "select count(*) from conductor",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM conductor",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Count the number of conductors.",
        "text2sql": "select count(*) from conductor",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM conductor",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "List the names of conductors in ascending order of age.",
        "text2sql": "select name from conductor order by age asc",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.name\nORDER BY conductor.age ASC",
        "sql_ground": "SELECT Name FROM conductor ORDER BY Age ASC",
        "answers": [
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Antal Brown"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors, ordered by age?",
        "text2sql": "select name from conductor order by age",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.name\nORDER BY conductor.age",
        "sql_ground": "SELECT Name FROM conductor ORDER BY Age ASC",
        "answers": [
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Antal Brown"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "text2sql": "select name from conductor where nationality!= \"USA\"",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.nationality <> 'USA'\nRETURN conductor.name",
        "sql_ground": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "answers": [
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Robert Craft"
            ],
            [
                "Michael Tilson Thomas"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "text2sql": "select name from conductor where nationality!= \"USA\"",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.nationality <> 'USA'\nRETURN conductor.name",
        "sql_ground": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "answers": [
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Robert Craft"
            ],
            [
                "Michael Tilson Thomas"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "text2sql": "select record_company from orchestra order by year_of_founded desc",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.record_company\nORDER BY orchestra.year_of_founded DESC",
        "sql_ground": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "answers": [
            [
                "Columbia Masterworks"
            ],
            [
                "Philips"
            ],
            [
                "Philips Classics Records"
            ],
            [
                "RCA"
            ],
            [
                "EMI"
            ],
            [
                "Koch Records / Naxos Records"
            ],
            [
                "Decca Records"
            ],
            [
                "Mercury Records"
            ],
            [
                "Deutsche Grammophon"
            ],
            [
                "Kultur"
            ],
            [
                "Decca Records"
            ],
            [
                "Delos Records"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "text2sql": "select record_company from orchestra order by year_of_founded desc",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.record_company\nORDER BY orchestra.year_of_founded DESC",
        "sql_ground": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "answers": [
            [
                "Columbia Masterworks"
            ],
            [
                "Philips"
            ],
            [
                "Philips Classics Records"
            ],
            [
                "RCA"
            ],
            [
                "EMI"
            ],
            [
                "Koch Records / Naxos Records"
            ],
            [
                "Decca Records"
            ],
            [
                "Mercury Records"
            ],
            [
                "Deutsche Grammophon"
            ],
            [
                "Kultur"
            ],
            [
                "Decca Records"
            ],
            [
                "Delos Records"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What is the average attendance of shows?",
        "text2sql": "select avg(attendance) from show",
        "sql2cypher": "MATCH (show:`orchestra.show`)\nRETURN avg(show.attendance)",
        "sql_ground": "SELECT avg(Attendance) FROM SHOW",
        "answers": [
            [
                1326.4
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Return the average attendance across all shows.",
        "text2sql": "select avg(attendance) from show",
        "sql2cypher": "MATCH (show:`orchestra.show`)\nRETURN avg(show.attendance)",
        "sql_ground": "SELECT avg(Attendance) FROM SHOW",
        "answers": [
            [
                1326.4
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "text2sql": "select max(share), min(share) from performance where type!= \"Live final\"",
        "sql2cypher": "MATCH (performance:`orchestra.performance`)\nWHERE performance.type <> 'Live final'\nRETURN max(performance.share),min(performance.share)",
        "sql_ground": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "answers": [
            [
                "44.7%",
                "22.7%"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "text2sql": "select max(share), min(share) from performance where type!= \"Live final\"",
        "sql2cypher": "MATCH (performance:`orchestra.performance`)\nWHERE performance.type <> 'Live final'\nRETURN max(performance.share),min(performance.share)",
        "sql_ground": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "answers": [
            [
                "44.7%",
                "22.7%"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "List names of conductors in descending order of years of work.",
        "text2sql": "select name from conductor order by year_of_work desc",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.name\nORDER BY conductor.year_of_work DESC",
        "sql_ground": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "answers": [
            [
                "Robert Craft"
            ],
            [
                "Antal Brown"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Colin Davis"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "text2sql": "select name from conductor order by year_of_work desc",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.name\nORDER BY conductor.year_of_work DESC",
        "sql_ground": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "answers": [
            [
                "Robert Craft"
            ],
            [
                "Antal Brown"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Colin Davis"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "List the name of the conductor with the most years of work.",
        "text2sql": "select name from conductor order by year_of_work desc limit 1",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.name\nORDER BY conductor.year_of_work DESC\nLIMIT 1",
        "sql_ground": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "answers": [
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "text2sql": "select name from conductor order by year_of_work desc limit 1",
        "sql2cypher": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.name\nORDER BY conductor.year_of_work DESC\nLIMIT 1",
        "sql_ground": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "answers": [
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "text2sql": "select record_company, count(*) from orchestra group by record_company",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.record_company) AS count, orchestra.record_company AS record_company\nRETURN record_company,count",
        "sql_ground": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "answers": [
            [
                "Mercury Records",
                1
            ],
            [
                "Columbia Masterworks",
                1
            ],
            [
                "Philips",
                1
            ],
            [
                "Kultur",
                1
            ],
            [
                "Decca Records",
                2
            ],
            [
                "Delos Records",
                1
            ],
            [
                "Deutsche Grammophon",
                1
            ],
            [
                "Philips Classics Records",
                1
            ],
            [
                "Koch Records / Naxos Records",
                1
            ],
            [
                "EMI",
                1
            ],
            [
                "RCA",
                1
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "How many orchestras does each record company manage?",
        "text2sql": "select record_company, count(*) from orchestra group by record_company",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.record_company) AS count, orchestra.record_company AS record_company\nRETURN record_company,count",
        "sql_ground": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "answers": [
            [
                "Mercury Records",
                1
            ],
            [
                "Columbia Masterworks",
                1
            ],
            [
                "Philips",
                1
            ],
            [
                "Kultur",
                1
            ],
            [
                "Decca Records",
                2
            ],
            [
                "Delos Records",
                1
            ],
            [
                "Deutsche Grammophon",
                1
            ],
            [
                "Philips Classics Records",
                1
            ],
            [
                "Koch Records / Naxos Records",
                1
            ],
            [
                "EMI",
                1
            ],
            [
                "RCA",
                1
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "text2sql": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.major_record_format AS major_record_format, count(orchestra.major_record_format) AS count\nRETURN major_record_format\nORDER BY count ASC",
        "sql_ground": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "answers": [
            [
                "CD / LP"
            ],
            [
                "DVD"
            ],
            [
                "CD"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "text2sql": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.major_record_format AS major_record_format, count(orchestra.major_record_format) AS count\nRETURN major_record_format\nORDER BY count ASC",
        "sql_ground": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "answers": [
            [
                "CD / LP"
            ],
            [
                "DVD"
            ],
            [
                "CD"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "List the record company shared by the most number of orchestras.",
        "text2sql": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.record_company) AS count, orchestra.record_company AS record_company\nRETURN record_company\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "answers": [
            [
                "Decca Records"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What is the record company used by the greatest number of orchestras?",
        "text2sql": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.record_company) AS count, orchestra.record_company AS record_company\nRETURN record_company\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "answers": [
            [
                "Decca Records"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "text2sql": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.orchestra",
        "sql_ground": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "answers": [
            [
                "San Francisco Symphony Orchestra"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "text2sql": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.major_record_format = 'CD' OR orchestra.major_record_format = 'DVD'\nRETURN count(*)",
        "sql_ground": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "text2sql": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "sql2cypher": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.major_record_format = 'CD' OR orchestra.major_record_format = 'DVD'\nRETURN count(*)",
        "sql_ground": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many high schoolers are there?",
        "text2sql": "select count(*) from highschooler",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Highschooler",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of high schoolers.",
        "text2sql": "select count(*) from highschooler",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Highschooler",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names and grades of each high schooler.",
        "text2sql": "select name, grade from highschooler",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "sql_ground": "SELECT name ,  grade FROM Highschooler",
        "answers": [
            [
                "Jordan",
                9
            ],
            [
                "Gabriel",
                9
            ],
            [
                "Tiffany",
                9
            ],
            [
                "Cassandra",
                9
            ],
            [
                "Haley",
                10
            ],
            [
                "Andrew",
                10
            ],
            [
                "Kris",
                10
            ],
            [
                "Brittany",
                10
            ],
            [
                "Alexis",
                11
            ],
            [
                "Austin",
                11
            ],
            [
                "Gabriel",
                11
            ],
            [
                "Jessica",
                11
            ],
            [
                "Jordan",
                12
            ],
            [
                "John",
                12
            ],
            [
                "Kyle",
                12
            ],
            [
                "Logan",
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names and grades for each high schooler?",
        "text2sql": "select name, grade from highschooler",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "sql_ground": "SELECT name ,  grade FROM Highschooler",
        "answers": [
            [
                "Jordan",
                9
            ],
            [
                "Gabriel",
                9
            ],
            [
                "Tiffany",
                9
            ],
            [
                "Cassandra",
                9
            ],
            [
                "Haley",
                10
            ],
            [
                "Andrew",
                10
            ],
            [
                "Kris",
                10
            ],
            [
                "Brittany",
                10
            ],
            [
                "Alexis",
                11
            ],
            [
                "Austin",
                11
            ],
            [
                "Gabriel",
                11
            ],
            [
                "Jessica",
                11
            ],
            [
                "Jordan",
                12
            ],
            [
                "John",
                12
            ],
            [
                "Kyle",
                12
            ],
            [
                "Logan",
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show all the grades of the high schoolers.",
        "text2sql": "select distinct grade from highschooler",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nRETURN DISTINCT highschooler.grade",
        "sql_ground": "SELECT grade FROM Highschooler",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the grade of each high schooler?",
        "text2sql": "select distinct grade from highschooler",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nRETURN DISTINCT highschooler.grade",
        "sql_ground": "SELECT grade FROM Highschooler",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What grade is Kyle in?",
        "text2sql": "select distinct grade from highschooler where name = 'Kyle'",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN DISTINCT highschooler.grade",
        "sql_ground": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the grade for the high schooler named Kyle.",
        "text2sql": "select grade from highschooler where name = 'Kyle'",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "sql_ground": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all high schoolers in grade 10.",
        "text2sql": "select name from highschooler where grade = 10",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "sql_ground": "SELECT name FROM Highschooler WHERE grade  =  10",
        "answers": [
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of all high schoolers in grade 10?",
        "text2sql": "select name from highschooler where grade = 10",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "sql_ground": "SELECT name FROM Highschooler WHERE grade  =  10",
        "answers": [
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "text2sql": "select id from highschooler where name = 'Kyle'",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.id",
        "sql_ground": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "answers": [
            [
                1934
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is Kyle's id?",
        "text2sql": "select id from highschooler where name = 'Kyle'",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.id",
        "sql_ground": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "answers": [
            [
                1934
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "text2sql": "select count(*) from highschooler where grade = 9 or grade = 10",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "text2sql": "select count(*) from highschooler where grade = 9 or grade = 10",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the number of high schoolers for each grade.",
        "text2sql": "select grade, count(*) from highschooler group by grade",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "sql_ground": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                4
            ],
            [
                11,
                4
            ],
            [
                12,
                4
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many high schoolers are in each grade?",
        "text2sql": "select grade, count(*) from highschooler group by grade",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "sql_ground": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                4
            ],
            [
                11,
                4
            ],
            [
                12,
                4
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show me all grades that have at least 4 students.",
        "text2sql": "select grade from highschooler group by grade having count(*) >= 4",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "sql_ground": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "text2sql": "select grade from highschooler group by grade having count(*) >= 4",
        "sql2cypher": "MATCH (highschooler:`network_1.highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "sql_ground": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "text2sql": "select student_id, count(*) from friend group by student_id",
        "sql2cypher": "MATCH ()-[friend:`network_1.friend`]-()\nWITH count(friend.student_id) AS count, friend.student_id AS student_id\nRETURN student_id,count",
        "sql_ground": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "answers": []
    },
    {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "text2sql": "select student_id, count(*) from friend group by student_id",
        "sql2cypher": "MATCH ()-[friend:`network_1.friend`]-()\nWITH count(friend.student_id) AS count, friend.student_id AS student_id\nRETURN student_id,count",
        "sql_ground": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "answers": []
    },
    {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "text2sql": "select student_id, count(*) from likes group by student_id",
        "sql2cypher": "MATCH ()-[likes:`network_1.likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "sql_ground": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "answers": []
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "text2sql": "select student_id, count(*) from likes group by student_id",
        "sql2cypher": "MATCH ()-[likes:`network_1.likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "sql_ground": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "answers": []
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "text2sql": "select date_arrived, date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "sql2cypher": "MATCH (t1:`dog_kennels.dogs`)-[]-(t2:`dog_kennels.treatments`)\nRETURN t1.date_arrived,t1.date_departed",
        "sql_ground": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "answers": [
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "text2sql": "select date_arrived, date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "sql2cypher": "MATCH (t1:`dog_kennels.dogs`)-[]-(t2:`dog_kennels.treatments`)\nRETURN t1.date_arrived,t1.date_departed",
        "sql_ground": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "answers": [
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "text2sql": "select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "sql_ground": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "answers": [
            [
                "uboehm@example.org"
            ],
            [
                "mekhi.little@example.org"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "text2sql": "select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "sql_ground": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "answers": [
            [
                "uboehm@example.org"
            ],
            [
                "mekhi.little@example.org"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "text2sql": "select date_arrived, date_departed from dogs",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "sql_ground": "SELECT date_arrived ,  date_departed FROM Dogs",
        "answers": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "List the arrival date and the departure date for all the dogs.",
        "text2sql": "select date_arrived, date_departed from dogs",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "sql_ground": "SELECT date_arrived ,  date_departed FROM Dogs",
        "answers": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "text2sql": "select role_code, street, city, state from professionals where city like '%west%'",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "sql_ground": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "answers": [
            [
                "Employee",
                "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                "West Heidi",
                "Indiana"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "text2sql": "select role_code, street, city, state from professionals where city like '%west%'",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "sql_ground": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "answers": [
            [
                "Employee",
                "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                "West Heidi",
                "Indiana"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "text2sql": "select first_name, last_name, email_address from owners where first_name like '%north%'",
        "sql2cypher": "MATCH (owners:`dog_kennels.owners`)\nWHERE owners.first_name =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "sql_ground": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "answers": []
    },
    {
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "text2sql": "select first_name, last_name, email_address from owners where first_name like '%north%'",
        "sql2cypher": "MATCH (owners:`dog_kennels.owners`)\nWHERE owners.first_name =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "sql_ground": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "answers": []
    },
    {
        "db_id": "dog_kennels",
        "question": "Show me the cost of the most recently performed treatment.",
        "text2sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "sql2cypher": "MATCH (treatments:`dog_kennels.treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "sql_ground": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "answers": [
            [
                407
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs have not gone through any treatment?",
        "text2sql": "select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nWHERE NOT (dogs:`dog_kennels.dogs`)-[]-(:`dog_kennels.treatments`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "text2sql": "select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nWHERE NOT (dogs:`dog_kennels.dogs`)-[]-(:`dog_kennels.treatments`)\nRETURN count(*)",
        "sql_ground": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "How many owners temporarily do not have any dogs?",
        "text2sql": "select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "sql2cypher": "MATCH (owners:`dog_kennels.owners`)\nWHERE NOT (owners:`dog_kennels.owners`)-[]-(:`dog_kennels.dogs`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "text2sql": "select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "sql2cypher": "MATCH (owners:`dog_kennels.owners`)\nWHERE NOT (owners:`dog_kennels.owners`)-[]-(:`dog_kennels.dogs`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "How many professionals did not operate any treatment on dogs?",
        "text2sql": "select count(*) from professionals where professional_id not in (select professional_id from treatments)",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nWHERE NOT (professionals:`dog_kennels.professionals`)-[]-(:`dog_kennels.treatments`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have not treated any dogs.",
        "text2sql": "select count(*) from professionals where professional_id not in (select professional_id from treatments)",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nWHERE NOT (professionals:`dog_kennels.professionals`)-[]-(:`dog_kennels.treatments`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "text2sql": "select age from dogs order by age desc limit 1",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nRETURN dogs.age\nORDER BY dogs.age DESC\nLIMIT 1",
        "sql_ground": "SELECT max(age) FROM Dogs",
        "answers": [
            [
                "9"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the age of the oldest dog.",
        "text2sql": "select age from dogs order by age desc limit 1",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nRETURN dogs.age\nORDER BY dogs.age DESC\nLIMIT 1",
        "sql_ground": "SELECT max(age) FROM Dogs",
        "answers": [
            [
                "9"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "text2sql": "select charge_type, charge_amount from charges group by charge_type",
        "sql2cypher": "MATCH (charges:`dog_kennels.charges`)\nWITH count(charges.charge_type) AS count, charges.charge_type AS charge_type, charges.charge_amount AS charge_amount\nRETURN charge_type,charge_amount",
        "sql_ground": "SELECT charge_type ,  charge_amount FROM Charges",
        "answers": [
            [
                "Daily Accommodation",
                98
            ],
            [
                "Drugs",
                322
            ],
            [
                "Health Check",
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount.",
        "text2sql": "select charge_type, charge_amount from charges group by charge_type",
        "sql2cypher": "MATCH (charges:`dog_kennels.charges`)\nWITH count(charges.charge_type) AS count, charges.charge_type AS charge_type, charges.charge_amount AS charge_amount\nRETURN charge_type,charge_amount",
        "sql_ground": "SELECT charge_type ,  charge_amount FROM Charges",
        "answers": [
            [
                "Daily Accommodation",
                98
            ],
            [
                "Drugs",
                322
            ],
            [
                "Health Check",
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "text2sql": "select charge_amount from charges order by charge_amount desc limit 1",
        "sql2cypher": "MATCH (charges:`dog_kennels.charges`)\nRETURN charges.charge_amount\nORDER BY charges.charge_amount DESC\nLIMIT 1",
        "sql_ground": "SELECT max(charge_amount) FROM Charges",
        "answers": [
            [
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?",
        "text2sql": "select charge_amount from charges order by charge_amount desc limit 1",
        "sql2cypher": "MATCH (charges:`dog_kennels.charges`)\nRETURN charges.charge_amount\nORDER BY charges.charge_amount DESC\nLIMIT 1",
        "sql_ground": "SELECT max(charge_amount) FROM Charges",
        "answers": [
            [
                640
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "text2sql": "select email_address, cell_number, home_phone from professionals",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "sql_ground": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "answers": [
            [
                "deanna.schuster@example.com",
                "(275)939-2435x80863",
                "+71(6)2898266914"
            ],
            [
                "lucile.shanahan@example.org",
                "889-940-2676",
                "+02(1)0259033559"
            ],
            [
                "uboehm@example.org",
                "(369)908-7311x065",
                "325-155-0801x7005"
            ],
            [
                "lourdes.lowe@example.net",
                "00230569697",
                "312.216.3352"
            ],
            [
                "mekhi.little@example.org",
                "011.193.9081x3186",
                "1-609-566-2752x25197"
            ],
            [
                "jacynthe.mclaughlin@example.net",
                "139-321-7313",
                "+43(5)1132733868"
            ],
            [
                "lambert62@example.org",
                "499-434-0215x1628",
                "022.529.0550x1319"
            ],
            [
                "goyette.roosevelt@example.net",
                "328.842.3792",
                "891.475.2256"
            ],
            [
                "schneider.kathryne@example.org",
                "962-983-8109x3509",
                "320-508-6023"
            ],
            [
                "jerrod.bahringer@example.org",
                "461-801-2600",
                "(230)338-3342x585"
            ],
            [
                "west.eula@example.net",
                "609-405-2990",
                "(920)304-4499x59146"
            ],
            [
                "marquardt.furman@example.org",
                "1-181-670-9466",
                "246-951-0080x76716"
            ],
            [
                "delphine29@example.com",
                "880-659-7577x736",
                "346.594.3739"
            ],
            [
                "cole.margarita@example.org",
                "1-185-137-1945x409",
                "971.048.3763x9404"
            ],
            [
                "jeichmann@example.com",
                "1-258-285-4707x8020",
                "1-138-287-3775"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the email, cell phone and home phone of each professional?",
        "text2sql": "select email_address, cell_number, home_phone from professionals",
        "sql2cypher": "MATCH (professionals:`dog_kennels.professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "sql_ground": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "answers": [
            [
                "deanna.schuster@example.com",
                "(275)939-2435x80863",
                "+71(6)2898266914"
            ],
            [
                "lucile.shanahan@example.org",
                "889-940-2676",
                "+02(1)0259033559"
            ],
            [
                "uboehm@example.org",
                "(369)908-7311x065",
                "325-155-0801x7005"
            ],
            [
                "lourdes.lowe@example.net",
                "00230569697",
                "312.216.3352"
            ],
            [
                "mekhi.little@example.org",
                "011.193.9081x3186",
                "1-609-566-2752x25197"
            ],
            [
                "jacynthe.mclaughlin@example.net",
                "139-321-7313",
                "+43(5)1132733868"
            ],
            [
                "lambert62@example.org",
                "499-434-0215x1628",
                "022.529.0550x1319"
            ],
            [
                "goyette.roosevelt@example.net",
                "328.842.3792",
                "891.475.2256"
            ],
            [
                "schneider.kathryne@example.org",
                "962-983-8109x3509",
                "320-508-6023"
            ],
            [
                "jerrod.bahringer@example.org",
                "461-801-2600",
                "(230)338-3342x585"
            ],
            [
                "west.eula@example.net",
                "609-405-2990",
                "(920)304-4499x59146"
            ],
            [
                "marquardt.furman@example.org",
                "1-181-670-9466",
                "246-951-0080x76716"
            ],
            [
                "delphine29@example.com",
                "880-659-7577x736",
                "346.594.3739"
            ],
            [
                "cole.margarita@example.org",
                "1-185-137-1945x409",
                "971.048.3763x9404"
            ],
            [
                "jeichmann@example.com",
                "1-258-285-4707x8020",
                "1-138-287-3775"
            ]
        ]
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "text2sql": "select distinct breed_code, size_code from dogs",
        "sql2cypher": "MATCH (dogs:`dog_kennels.dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "sql_ground": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "answers": [
            [
                "ESK",
                "LGE"
            ],
            [
                "BUL",
                "LGE"
            ],
            [
                "BUL",
                "MED"
            ],
            [
                "HUS",
                "MED"
            ],
            [
                "ESK",
                "SML"
            ],
            [
                "HUS",
                "SML"
            ],
            [
                "ESK",
                "MED"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "How many singers are there?",
        "text2sql": "select count(*) from singer",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM singer",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the count of singers?",
        "text2sql": "select count(*) from singer",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM singer",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "text2sql": "select name from singer order by net_worth_millions asc",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.name\nORDER BY singer.net_worth_millions ASC",
        "sql_ground": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "answers": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "text2sql": "select name from singer order by net_worth_millions asc",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.name\nORDER BY singer.net_worth_millions ASC",
        "sql_ground": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "answers": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the birth year and citizenship of singers?",
        "text2sql": "select birth_year, citizenship from singer",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.birth_year,singer.citizenship",
        "sql_ground": "SELECT Birth_Year ,  Citizenship FROM singer",
        "answers": [
            [
                1944.0,
                "France"
            ],
            [
                1948.0,
                "United States"
            ],
            [
                1949.0,
                "United States"
            ],
            [
                1942.0,
                "Chile"
            ],
            [
                1940.0,
                "United States"
            ],
            [
                1953.0,
                "Australia"
            ],
            [
                1962.0,
                "Germany"
            ],
            [
                1961.0,
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the birth years and citizenships of the singers?",
        "text2sql": "select birth_year, citizenship from singer",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.birth_year,singer.citizenship",
        "sql_ground": "SELECT Birth_Year ,  Citizenship FROM singer",
        "answers": [
            [
                1944.0,
                "France"
            ],
            [
                1948.0,
                "United States"
            ],
            [
                1949.0,
                "United States"
            ],
            [
                1942.0,
                "Chile"
            ],
            [
                1940.0,
                "United States"
            ],
            [
                1953.0,
                "Australia"
            ],
            [
                1962.0,
                "Germany"
            ],
            [
                1961.0,
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "text2sql": "select name from singer where citizenship!= \"France\"",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.citizenship <> 'France'\nRETURN singer.name",
        "sql_ground": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "text2sql": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.birth_year = 1948 OR singer.birth_year = 1949\nRETURN singer.name",
        "sql_ground": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "text2sql": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE singer.birth_year = 1948 OR singer.birth_year = 1949\nRETURN singer.name",
        "sql_ground": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "text2sql": "select name from singer order by net_worth_millions desc limit 1",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nRETURN singer.name\nORDER BY singer.net_worth_millions DESC\nLIMIT 1",
        "sql_ground": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "answers": [
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "text2sql": "select name from singer group by name order by count(*) desc limit 1",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWITH singer.name AS name, count(singer.name) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "answers": [
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "text2sql": "select citizenship, count(*) from singer group by citizenship",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWITH count(singer.citizenship) AS count, singer.citizenship AS citizenship\nRETURN citizenship,count",
        "sql_ground": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "answers": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, how many singers are from that country?",
        "text2sql": "select citizenship, count(*) from singer group by citizenship",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWITH count(singer.citizenship) AS count, singer.citizenship AS citizenship\nRETURN citizenship,count",
        "sql_ground": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "answers": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Please show the most common citizenship of singers.",
        "text2sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWITH count(singer.citizenship) AS count, singer.citizenship AS citizenship\nRETURN citizenship\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the most common singer citizenship ?",
        "text2sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWITH count(singer.citizenship) AS count, singer.citizenship AS citizenship\nRETURN citizenship\nORDER BY count DESC\nLIMIT 1",
        "sql_ground": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "text2sql": "select name from singer where singer_id not in (select singer_id from song)",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.name",
        "sql_ground": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "answers": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "text2sql": "select name from singer where singer_id not in (select singer_id from song)",
        "sql2cypher": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.name",
        "sql_ground": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "answers": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "text2sql": "select count(*) from other_available_features",
        "sql2cypher": "MATCH (other_available_features:`real_estate_properties.other_available_features`)\nRETURN count(*)",
        "sql_ground": "SELECT count(*) FROM Other_Available_Features",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "text2sql": "select property_name from properties where property_type_code = \"House\" or property_type_code = \"Apartment\" group by property_name having count(*) > 1",
        "sql2cypher": "MATCH (properties:`real_estate_properties.properties`)\nWHERE properties.property_type_code = 'House' OR properties.property_type_code = 'Apartment'\nWITH count(*) AS count, properties.property_name AS property_name\nWHERE count  > 1\nRETURN property_name",
        "sql_ground": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "answers": []
    }
]