[
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "How many singers do we have?",
        "seq_out": "select count(*) from singer",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the total number of singers?",
        "seq_out": "select count(*) from singer",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "seq_out": "select name, country, age from singer order by age desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names, countries, and ages for every singer in descending order of age?",
        "seq_out": "select name, country, age from singer order by age desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country ( France ) , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country ( France ) , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the average, minimum, and maximum age of all singers from France?",
        "seq_out": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(age), min(age), max(age) from singer where name = \"French\"",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the average, minimum, and maximum age for all French singers?",
        "seq_out": "select avg(age), min(age), max(age) from singer where country = 'France'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select song_name, song_release_year from singer order by age limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the name and the release year of the song by the youngest singer.",
        "seq_out": "select song_name, song_release_year from singer order by age limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select song_name, song_release_year from singer order by age asc limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names and release years for all the songs of the youngest singer?",
        "seq_out": "select song_name, song_release_year from singer order by age limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are all distinct countries where singers above age 20 are from?",
        "seq_out": "select distinct country from singer where age > 20",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are  the different countries with singers above age 20?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are  the different countries with singers above age 20?",
        "seq_out": "select distinct country from singer where age > 20",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show all countries and the number of singers in each country.",
        "seq_out": "select country, count(*) from singer group by country",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "How many singers are from each country?",
        "seq_out": "select country, count(*) from singer group by country",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "seq_out": "select location, name from stadium where capacity between 5000 and 10000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "seq_out": "select location, name from stadium where capacity between 5000 and 10000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(capacity), max(capacity) from stadium",
        "query": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the average and maximum capacities for all stadiums ?",
        "seq_out": "select avg(capacity), max(capacity) from stadium",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, capacity from stadium order by average desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and capacity for the stadium with highest average attendance?",
        "seq_out": "select name, capacity from stadium order by average desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, capacity from stadium order by average desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and capacity for the stadium with the highest average attendance?",
        "seq_out": "select name, capacity from stadium order by average desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the stadium name and the number of concerts in each stadium.",
        "seq_out": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "For each stadium, how many concerts play there?",
        "seq_out": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year >= 2014 order by t2.capacity desc limit 1",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "seq_out": "select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.concert_name, t2.theme, count(*) from concert as t1 join singer_in_concert as t2 on t1.concert_id = t2.concert_id group by t1.concert_id",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "Show the name and theme for all concerts and the number of singers in each concert.",
        "seq_out": "select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "List singer names and number of concerts for each singer.",
        "seq_out": "select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names of the singers and number of concerts for each person?",
        "seq_out": "select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t3.name from concert as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id join singer as t3 on t2.singer_id = t3.singer_id where t1.year = 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "List all singer names in concerts in year 2014.",
        "seq_out": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t3.name from concert as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id join singer as t3 on t2.singer_id = t3.singer_id where t1.year = 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What are the names of the singers who performed in a concert in 2014?",
        "seq_out": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, nation from singer where song_name like '%Hey%'",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "seq_out": "select name, country from singer where song_name like '%hey%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, country from singer where song_name like '%Hey%'",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "others",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15,
                20
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        },
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "struct_in": "| concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
        "text_in": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "seq_out": "select name, country from singer where song_name like '%hey%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the number of pets whose weight is heavier than 10.",
        "seq_out": "select count(*) from pets where weight > 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "How many pets have a greater weight than 10?",
        "seq_out": "select count(*) from pets where weight > 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select weight from pets where pettype = 'dog' order by age limit 1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight",
        "text_in": "Find the weight of the youngest dog.",
        "seq_out": "select weight from pets order by pet_age limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(age) from pets where pettype = 'dog' order by age limit 1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight",
        "text_in": "How much does the youngest dog weigh?",
        "seq_out": "select weight from pets order by pet_age limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t3.stuid = t1.stuid where t3.age > 20",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find number of pets owned by students who are older than 20.",
        "seq_out": "select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid where t1.pet_age > 20",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "How many pets are owned by students that have an age greater than 20?",
        "seq_out": "select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = \"cat\" or t2.pettype = \"dog\"",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog , cat ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog , cat ) , pet_age , weight",
        "text_in": "Find the first name of students who have cat or dog pet.",
        "seq_out": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog , cat ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog , cat ) , pet_age , weight",
        "text_in": "What are the first names of every student who has a cat or dog as a pet?",
        "seq_out": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select major, age from student where stuid not in (select stuid from has_pet)",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "text_in": "Find the major and age of students who do not have a cat pet.",
        "seq_out": "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select major, age from student where stuid not in (select stuid from has_pet)",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "text_in": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "seq_out": "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select pettype, weight from pets order by pet_age limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the type and weight of the youngest pet.",
        "seq_out": "select pettype, weight from pets order by pet_age limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.pettype, count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid order by t2.age desc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What type of pet is the youngest animal, and how much does it weigh?",
        "seq_out": "select pettype, weight from pets order by pet_age limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the id and weight of all pets whose age is older than 1.",
        "seq_out": "select petid, weight from pets where pet_age > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What is the id and weight of every pet who is older than 1?",
        "seq_out": "select petid, weight from pets where pet_age > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the first name and age of students who have a pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the first name and age of students who have a pet.",
        "seq_out": "select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What are the different first names and ages of the students who do have pets?",
        "seq_out": "select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.petid from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.lname = 'Smith'",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "seq_out": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.petid from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.lname = 'Smith'",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname ( Smith ) , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname ( Smith ) , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "seq_out": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the number of pets for each student who has any pet and student id.",
        "seq_out": "select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "Find the first name and gender of student who have more than one pet.",
        "seq_out": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
        "text_in": "What is the first name and gender of the all the students who have more than one pet?",
        "seq_out": "select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'cat' and t2.age = 3",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "text_in": "Find the last name of the student who has a cat that is age 3.",
        "seq_out": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'cat' and t2.age = 3",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                11
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        },
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "struct_in": "| pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight",
        "text_in": "What is the last name of the student who has a cat that is 3 years old?",
        "seq_out": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many continents are there?",
        "seq_out": "select count(*) from continents;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of continents?",
        "seq_out": "select count(*) from continents;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.countryid group by t1.continent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "seq_out": "select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.continuent, count(*), t1.continuent from continents as t1 join countries as t2 on t1.contid = t2.continuid group by t1.continuent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "For each continent, list its id, name, and how many countries it has?",
        "seq_out": "select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many countries are listed?",
        "seq_out": "select count(*) from countries;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many countries exist?",
        "seq_out": "select count(*) from countries;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fullname, t2.maker, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.makeid group by t2.maker",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many models does each car maker produce? List maker full name, id and the number.",
        "seq_out": "select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fullname, t2.maker, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.makeid group by t2.maker",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the full name of each car maker, along with its id and how many models it produces?",
        "seq_out": "select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from car_names order by horsepower limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which model of the car has the minimum horsepower?",
        "seq_out": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from car_names order by horsepower asc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the model of the car with the smallest amount of horsepower?",
        "seq_out": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.fullname from cars_data as t1 join car_makers as t2 on t1.makeid = t2.makeid where t1.year = 1970",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Find the name of the makers that produced some cars in the year of 1970?",
        "seq_out": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.maker from car_makers as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = 1970",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the name of the different car makers who produced a car in 1970?",
        "seq_out": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct model from model_list where year > 1980",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which distinct car models are the produced after 1980?",
        "seq_out": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from car_names where year > 1980",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the different models for the cards produced after 1980?",
        "seq_out": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.continuent, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.id group by t1.continuent",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many car makers are there in each continents? List the continent name and the count.",
        "seq_out": "select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.continuation, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.makeid group by t1.continuation",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the name of each continent and how many car makers are there in each one?",
        "seq_out": "select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryname order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which of the countries has the most car makers? List the country name.",
        "seq_out": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the name of the country with the most car makers?",
        "seq_out": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*), maker from car_makers group by maker",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "seq_out": "select count(*), t2.fullname, t2.id from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid join amc hornet as t3 on t2.hornet = t3.hornet where t3.sportabout = \"sw\"",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( amc ) , fullname , country | model_list : modelid , maker , model ( amc ) | car_names : makeid , model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( amc ) , fullname , country | model_list : modelid , maker , model ( amc ) | car_names : makeid , model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "seq_out": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid join amc hornet as t3 on t2.model = t3.modelid where t3.make ='sw'",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( amc ) , fullname , country | model_list : modelid , maker , model ( amc ) | car_names : makeid , model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( amc ) , fullname , country | model_list : modelid , maker , model ( amc ) | car_names : makeid , model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "seq_out": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select weight from cars_data where cylinders = 8 order by year = 1974 order by cylinders asc limit 1",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "seq_out": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "seq_out": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select maker, model from model_list",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are all the makers and models?",
        "seq_out": "select maker, model from model_list;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select maker, model from model_list",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the makers and models?",
        "seq_out": "select maker, model from model_list;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the countries having at least one car maker? List name and id.",
        "seq_out": "select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the names and ids of all countries with at least one car maker?",
        "seq_out": "select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid where t1.continent = \"europe\" group by t1.countryid having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which countries in europe have at least 3 car manufacturers?",
        "seq_out": "select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = \"europe\" group by t1.countryid having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the names of all European countries with at least 3 manufacturers?",
        "seq_out": "select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(horsepower), make from cars_data where cylinders = 3",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "seq_out": "select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select horsepower, model from cars_data where cylinders > 3 order by horsepower desc limit 3",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "seq_out": "select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model, max(mpg) from model_list group by model order by count(*) desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "seq_out": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(edispl) from cars_data as t1 join model_list as t2 on t1.model = t2.modelid where t2.model = \"volvo\"",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the cars of model volvo?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the average edispl of the cars of model volvo?",
        "seq_out": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(edispl) from cars_data",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the average edispl for all volvos?",
        "seq_out": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from car_names group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which model has the most version(make) of cars?",
        "seq_out": "select model from car_names group by model order by count(*) desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from model_list group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What model has the most different versions?",
        "seq_out": "select model from car_names group by model order by count(*) desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many cars have more than 4 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 4;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of cars with more than 4 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 4;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many cars were produced in 1980?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "how many cars were produced in 1980?",
        "seq_out": "select count(*) from cars_data where year = 1980;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "In 1980, how many cars were made?",
        "seq_out": "select count(*) from cars_data where year = 1980;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from car_makers where fullname = \"American Motor Company\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many car models were produced by the maker with full name American Motor Company?",
        "seq_out": "select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.makeid join car_names as t3 on t2.makeid = t3.makeid where t1.fullname = \"American Motor Company\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of car models created by the car maker American Motor Company?",
        "seq_out": "select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fullname, t2.id from car_makers as t1 join model_list as t2 on t1.id = t2.makeid group by t2.makeid having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which makers designed more than 3 car models? List full name and the id.",
        "seq_out": "select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.fullname, t2.makeid from car_makers as t1 join model_list as t2 on t1.id = t2.makeid group by t2.makeid having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the names and ids of all makers with more than 3 models?",
        "seq_out": "select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.model from model_list as t1 join car_makers as t2 on t1.maker = t2.maker where t2.fullname = 'General Motors' or t2.weight > 3500",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "seq_out": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from model_list as t1 join car_makers as t2 on t1.maker = t2.maker where t2.fullname = 'General Motors' or t2.weight > 3500",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "seq_out": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select year from cars_data where accelerate between 3000 and 4000",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "seq_out": "select distinct year from cars_data where weight between 3000 and 4000;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct year from cars_data where accelerate between 4000 and 3000",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "seq_out": "select distinct year from cars_data where weight between 3000 and 4000;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*), t1.cylinders from cars_data as t1 join model_list as t2 on t1.model = t2.modelid join car_makers as t3 on t1.id = t3.id order by t3.accelerate limit 1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "seq_out": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*), t1.cylinders from cars_data as t1 join model_list as t2 on t1.id = t2.modelid join car_makers as t3 on t2.id = t3.id order by t3.accelerate asc limit 1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "seq_out": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "How many cars has over 6 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 6;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the number of carsw ith over 6 cylinders?",
        "seq_out": "select count(*) from cars_data where cylinders > 6;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from cars_data where cylinders = 4 order by horsepower desc limit 4",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "seq_out": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from cars_data where cylinders = 4 order by horsepower desc limit 4",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "seq_out": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(mpg) from cars_data where cylinders >= 8 or year  < 1980",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "seq_out": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(mpg) from cars_data where cylinders >= 8 or year  < 1980",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "seq_out": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select model from model_list where lighter > 3500 and maker!= 'Ford Motor Company'",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "seq_out": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford motor Company';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct model from model_list where modelid not in (select model from car_makers where fullname = \"Ford Motor Company\") and lighter than 3500",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                10,
                13,
                16
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        },
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "struct_in": "| car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
        "text_in": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "seq_out": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford motor Company';",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which country does Airline \"JetBlue Airways\" belong to?",
        "seq_out": "select country from airlines where airline = \"JetBlue Airways\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What country is Jetblue Airways affiliated with?",
        "seq_out": "select country from airlines where airline = \"JetBlue Airways\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "seq_out": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which abbreviation corresponds to Jetblue Airways?",
        "seq_out": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline, abbreviation from airlines where country = \"USA\"",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "List all airline names and their abbreviations in \"USA\".",
        "seq_out": "select airline, abbreviation from airlines where country = \"USA\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline, abbreviation from airlines where country = 'USA'",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are the airline names and abbreviations for airlines in the USA?",
        "seq_out": "select airline, abbreviation from airlines where country = \"USA\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportcode, airportname from airports where city = \"Anthony\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "List the airport code and name in the city of Anthony.",
        "seq_out": "select airportcode, airportname from airports where city = \"Anthony\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportcode, airportname from airports where city = \"Anthony\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the airport code and airport name corresonding to the city Anthony.",
        "seq_out": "select airportcode, airportname from airports where city = \"Anthony\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many airlines do we have?",
        "seq_out": "select count(*) from airlines",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What is the total number of airlines?",
        "seq_out": "select count(*) from airlines",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many airports do we have?",
        "seq_out": "select count(*) from airports",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Return the number of  airports.",
        "seq_out": "select count(*) from airports",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airline has abbreviation 'UAL'?",
        "seq_out": "select airline from airlines where abbreviation = \"UAL\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the airline with abbreviation 'UAL'.",
        "seq_out": "select airline from airlines where abbreviation = \"UAL\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines where country = \"USA\"",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from USA?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many airlines are from USA?",
        "seq_out": "select count(*) from airlines where country = \"USA\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from airlines where country = \"USA\"",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Return the number of airlines in the USA.",
        "seq_out": "select count(*) from airlines where country = \"USA\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which city and country is the Alton airport at?",
        "seq_out": "select city, country from airports where airportname = \"Alton\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the city and country for the Alton airport.",
        "seq_out": "select city, country from airports where airportname = \"Alton\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "text_in": "What is the airport name for airport 'AKO'?",
        "seq_out": "select airportname from airports where airportcode = \"AKO\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )",
        "text_in": "Return the name of the airport with code 'AKO'.",
        "seq_out": "select airportname from airports where airportcode = \"AKO\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where city = 'Aberdeen'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are airport names at City 'Aberdeen'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are airport names at City 'Aberdeen'?",
        "seq_out": "select airportname from airports where city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where city = \"Aberdeen\"",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are the names of airports in Aberdeen?",
        "seq_out": "select airportname from airports where city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"APG\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "How many flights depart from 'APG'?",
        "seq_out": "select count(*) from flights where sourceairport = \"APG\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"APG\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "Count the number of flights departing from 'APG'.",
        "seq_out": "select count(*) from flights where sourceairport = \"APG\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where destairport = \"ATO\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights have destination ATO?",
        "seq_out": "select count(*) from flights where destairport = \"ATO\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.airportcode = \"ATO\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Count the number of flights into ATO.",
        "seq_out": "select count(*) from flights where destairport = \"ATO\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights depart from City Aberdeen?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where sourceairport = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Return the number of flights departing from Aberdeen.",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights arriving in Aberdeen city?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Return the number of flights arriving in Aberdeen.",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.city = 'Aberdeen' and t2.destairport = 'Ashley'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.airportname = \"Aberdeen\" and t2.airportcode = \"Ashley\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights fly from Aberdeen to Ashley?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid join airports as t3 on t1.airport = t3.airportcode where t3.airline = 'United Airlines' and t2.airline = 'ASY'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( ASY ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( ASY ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "seq_out": "select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid join airports as t3 on t1.airport = t3.airportcode where t2.airline = \"United Airlines\" and t3.airline = \"ASY\"",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( ASY ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( ASY ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Count the number of United Airlines flights arriving in ASY Airport.",
        "seq_out": "select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airlines as t2 on t1.uid = t2.uid join airports as t3 on t1.airport = t3.airportcode where t2.airline = \"United Airlines\" and t3.airportcode = \"AHD\"",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "seq_out": "select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.flickno join airports as t3 on t2.airport = t3.airportcode where t3.airline = \"United Airlines\" and t3.airline = \"ADHD\"",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "Return the number of United Airlines flights leaving from AHD Airport.",
        "seq_out": "select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid join airports as t3 on t2.airport = t3.airportcode where t2.city = 'Aberdeen'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many United Airlines flights go to City 'Aberdeen'?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid join airports as t3 on t2.airport = t3.airportcode where t2.airline = \"United Airlines\" and t3.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.city from airports as t1 join flights as t2 on t1.airport = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which city has most number of arriving flights?",
        "seq_out": "select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city from airports group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which city has the most frequent destination airport?",
        "seq_out": "select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.city from airports as t1 join flights as t2 on t1.airport = t2.destairport group by t1.city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which city has most number of departing flights?",
        "seq_out": "select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city from airports group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which city is the most frequent source airport?",
        "seq_out": "select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airline has most number of flights?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What airline serves the most flights?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t2.airline order by count(*) asc limit 1",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "seq_out": "select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.abbreviation, t2.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t2.airline order by count(*) asc limit 1",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "seq_out": "select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline join airports as t3 on t2.airportcode = t3.airportcode where t3.airportcode = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "What are airlines that have some flight departing from airport 'AHD'?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "Which airlines have a flight with source airport AHD?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline join airports as t3 on t2.airportcode = t3.airportcode where t3.airportcode = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "What are airlines that have flights arriving at airport 'AHD'?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.flightno where t2.destairport = \"AHD\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )",
        "text_in": "Which airlines have a flight with destination airport AHD?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) >= 10",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Find all airlines that have at least 10 flights.",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) >= 10",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airlines have at least 10 flights?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.flightno  < = 200",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Find all airlines that have fewer than 200 flights.",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.flightno  < 200",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airlines have less than 200 flights?",
        "seq_out": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights as t1 join airlines as t2 on t1.airline = t2.airline where t2.airline = \"United Airlines\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are flight numbers of Airline \"United Airlines\"?",
        "seq_out": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where airline = \"United Airlines\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which flight numbers correspond to United Airlines flights?",
        "seq_out": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.airportname = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "What are flight numbers of flights departing from Airport \"APG\"?",
        "seq_out": "select flightno from flights where sourceairport = \"APG\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "Give the flight numbers of flights leaving from APG.",
        "seq_out": "select flightno from flights where sourceairport = \"APG\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.airportname = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "seq_out": "select flightno from flights where destairport = \"APG\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )",
        "text_in": "Give the flight numbers of flights landing at APG.",
        "seq_out": "select flightno from flights where destairport = \"APG\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "seq_out": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the flight numbers of flights leaving from Aberdeen.",
        "seq_out": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "seq_out": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select flightno from flights where sourceairport = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Give the flight numbers of flights arriving in Aberdeen.",
        "seq_out": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Abilene  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Abilene  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from flights where city = \"Aberdeen\" or city = \"Abilene\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Abilene  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Abilene  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "How many flights land in Aberdeen or Abilene?",
        "seq_out": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where airportcode not in (select sourceairport, destairport)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Find the name of airports which do not have any flight in and out.",
        "seq_out": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select airportname from airports where airportcode not in (select sourceairport from flights)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                10
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        },
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "struct_in": "| flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
        "text_in": "Which airports do not have departing or arriving flights?",
        "seq_out": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "How many employees are there?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "How many employees are there?",
        "seq_out": "select count(*) from employee",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of employees",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Count the number of employees",
        "seq_out": "select count(*) from employee",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Sort employee names by their age in ascending order.",
        "seq_out": "select name from employee order by age",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "List the names of employees and sort in ascending order of age.",
        "seq_out": "select name from employee order by age",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city, count(*) from employee group by city",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What is the number of employees from each city?",
        "seq_out": "select count(*), city from employee group by city",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city, count(*) from employee group by city",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Count the number of employees for each city.",
        "seq_out": "select count(*), city from employee group by city",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city from employee where age > 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Which cities do more than one employee under age 30 come from?",
        "seq_out": "select city from employee where age < 30 group by city having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select city from employee where age > 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the cities that have more than one employee under age 30.",
        "seq_out": "select city from employee where age < 30 group by city having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select location, count(*) from shop group by location",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each location.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the number of shops in each location.",
        "seq_out": "select count(*), location from shop group by location",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select location, count(*) from shop group by location",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many shops are there in each location?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "How many shops are there in each location?",
        "seq_out": "select count(*), location from shop group by location",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select manager_name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Find the manager name and district of the shop whose number of products is the largest.",
        "seq_out": "select manager_name, district from shop order by number_products desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select manager_name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What are the manager name and district of the shop that sells the largest number of products?",
        "seq_out": "select manager_name, district from shop order by number_products desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "find the minimum and maximum number of products of all stores.",
        "seq_out": "select min(number_products), max(number_products) from shop",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "What are the minimum and maximum number of products across all the shops?",
        "seq_out": "select min(number_products), max(number_products) from shop",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, location, district from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Return the name, location and district of all shops in descending order of number of products.",
        "seq_out": "select name, location, district from shop order by number_products desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, location, district from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "others",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                12,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        },
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
        "text_in": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "seq_out": "select name, location, district from shop order by number_products desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many documents do we have?",
        "seq_out": "select count(*) from documents",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of documents.",
        "seq_out": "select count(*) from documents",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "List document IDs, document names, and document descriptions for all documents.",
        "seq_out": "select document_id, document_name, document_description from documents",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids, names, and descriptions for all documents?",
        "seq_out": "select document_id, document_name, document_description from documents",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_name, template_id from documents where document_description like '%w%'",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document name and template id for document with description with the letter 'w' in it?",
        "seq_out": "select document_name, template_id from documents where document_description like \"%w%\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_name, template_id from documents where document_name like '%w%'",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the names and template ids for documents that contain the letter w in their description.",
        "seq_out": "select document_name, template_id from documents where document_description like \"%w%\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "seq_out": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "seq_out": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many documents are using the template with type code 'PPT'?",
        "seq_out": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = \"PPT\"",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of documents that use the PPT template type.",
        "seq_out": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, count(*) from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template ids and number of documents using each template.",
        "seq_out": "select template_id, count(*) from documents group by template_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, count(*) from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are all different template ids used for documents, and how many times were each of them used?",
        "seq_out": "select template_id, count(*) from documents group by template_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the id and type code for the template used by the most documents?",
        "seq_out": "select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the id and type code of the template that is used for the greatest number of documents.",
        "seq_out": "select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show ids for all templates that are used by more than one document.",
        "seq_out": "select template_id from documents group by template_id having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the template ids of any templates used in more than a single document?",
        "seq_out": "select template_id from documents group by template_id having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many templates do we have?",
        "seq_out": "select count(*) from templates",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of templates.",
        "seq_out": "select count(*) from templates",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, version_number, template_type_code from templates",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show template ids, version numbers, and template type codes for all templates.",
        "seq_out": "select template_id, version_number, template_type_code from templates",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id, version_number, template_type_code from templates",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids, version numbers, and type codes for each template?",
        "seq_out": "select template_id, version_number, template_type_code from templates",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct template_type_code from templates",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all distinct template type codes for all templates.",
        "seq_out": "select distinct template_type_code from templates",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct template_type_code from ref_template_types",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the different template type codes?",
        "seq_out": "select distinct template_type_code from templates",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids of templates with template type code PP or PPT?",
        "seq_out": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the ids of templates that have the code PP or PPT.",
        "seq_out": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates where template_type_code = \"CV\"",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many templates have template type code CV?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many templates have template type code CV?",
        "seq_out": "select count(*) from templates where template_type_code = \"CV\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from templates where template_type_code = \"CV\"",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of templates of the type CV.",
        "seq_out": "select count(*) from templates where template_type_code = \"CV\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select version_number, template_type_code from templates where version_number > 5",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the version number and template type code for the template with version number later than 5?",
        "seq_out": "select version_number, template_type_code from templates where version_number > 5",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select version_number, template_type_code from templates where version_number > 5",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "seq_out": "select version_number, template_type_code from templates where version_number > 5",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes and number of templates for each.",
        "seq_out": "select template_type_code, count(*) from templates group by template_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the different template type codes, and how many templates correspond to each?",
        "seq_out": "select template_type_code, count(*) from templates group by template_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Which template type code has most number of templates?",
        "seq_out": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the type code of the template type that the most templates belong to.",
        "seq_out": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes with less than three templates.",
        "seq_out": "select template_type_code from templates group by template_type_code having count(*) < 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from templates group by template_type_code having count(*)  < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the codes of template types that have fewer than 3 templates?",
        "seq_out": "select template_type_code from templates group by template_type_code having count(*) < 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the template type code of the template used by document with the name \"Data base\"?",
        "seq_out": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the template type code of the template that is used by a document named Data base.",
        "seq_out": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = \"BK\"",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names using templates with template type code BK.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ) , template_type_description | templates : template_id , version_number , template_type_code ( BK ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ) , template_type_description | templates : template_id , version_number , template_type_code ( BK ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all document names using templates with template type code BK.",
        "seq_out": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = \"BK\"",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ) , template_type_description | templates : template_id , version_number , template_type_code ( BK ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ) , template_type_description | templates : template_id , version_number , template_type_code ( BK ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the names of documents that use templates with the code BK?",
        "seq_out": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, count(*) from documents group by template_type_code",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes and the number of documents using each type.",
        "seq_out": "select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, count(*) from documents group by template_type_code",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different template type codes, and how many documents use each type?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the different template type codes, and how many documents use each type?",
        "seq_out": "select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Which template type code is used by most number of documents?",
        "seq_out": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the code of the template type that is most commonly used in documents.",
        "seq_out": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all template type codes and descriptions.",
        "seq_out": "select template_type_code, template_type_description from ref_template_types",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the type codes and descriptions for all template types?",
        "seq_out": "select template_type_code, template_type_description from ref_template_types",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the template type descriptions for template type code \"AD\".",
        "seq_out": "select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the template type description of the template type with the code AD.",
        "seq_out": "select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Book ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Book ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the template type code for template type description \"Book\".",
        "seq_out": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Book ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Book ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the type code of the template type with the description \"Book\".",
        "seq_out": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the distinct template type descriptions for the templates ever used by any document?",
        "seq_out": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the different descriptions for templates that have been used in a document.",
        "seq_out": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id from ref_template_types where template_type_description = \"Presentation\"",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Presentation ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Presentation ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the template ids with template type description \"Presentation\".",
        "seq_out": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select template_id from templates where template_type_description = 'Presentation'",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Presentation ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Presentation ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the ids corresponding to templates with the description 'Presentation'.",
        "seq_out": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many paragraphs in total?",
        "seq_out": "select count(*) from paragraphs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of paragraphs.",
        "seq_out": "select count(*) from paragraphs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "How many paragraphs for the document with name 'Summer Show'?",
        "seq_out": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Count the number of paragraphs in the document named 'Summer Show'.",
        "seq_out": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "seq_out": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "seq_out": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all paragraph texts for the document \"Customer reviews\".",
        "seq_out": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Customer reviews'",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "seq_out": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name, count(*) from paragraphs group by document_id",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Show all document ids, names and the number of paragraphs in each document.",
        "seq_out": "select t1.document_id, t2.document_name, count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name, count(*) from paragraphs group by document_id",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "seq_out": "select t1.document_id, t2.document_name, count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "List all document ids with at least two paragraphs.",
        "seq_out": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What are the ids of documents that have 2 or more paragraphs?",
        "seq_out": "select document_id from paragraphs group by document_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name from paragraphs group by document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document id and name with greatest number of paragraphs?",
        "seq_out": "select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id, document_name from paragraphs group by document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the id and name of the document with the most paragraphs.",
        "seq_out": "select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "What is the document id with least number of paragraphs?",
        "seq_out": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                9,
                14
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        },
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "struct_in": "| cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "text_in": "Return the id of the document with the fewest paragraphs.",
        "seq_out": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many teachers are there?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "How many teachers are there?",
        "seq_out": "select count(*) from teacher",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of teachers?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the total count of teachers?",
        "seq_out": "select count(*) from teacher",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "List the names of teachers in ascending order of age.",
        "seq_out": "select name from teacher order by age asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers ordered by ascending age?",
        "seq_out": "select name from teacher order by age asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the age and hometown of teachers?",
        "seq_out": "select age, hometown from teacher",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the age and hometown of every teacher?",
        "seq_out": "select age, hometown from teacher",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where hometown!= ``Little Lever Urban District``",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "text_in": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "seq_out": "select name from teacher where hometown != \"little lever urban district\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where hometown!= \"Little Lever Urban District\"",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "seq_out": "select name from teacher where hometown != \"little lever urban district\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show the name of teachers aged either 32 or 33?",
        "seq_out": "select name from teacher where age = 32 or age = 33",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers who are aged either 32 or 33?",
        "seq_out": "select name from teacher where age = 32 or age = 33",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown from teacher order by age asc limit 1",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the hometown of the youngest teacher?",
        "seq_out": "select hometown from teacher order by age asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown from teacher order by age asc limit 1",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest teacher from?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Where is the youngest teacher from?",
        "seq_out": "select hometown from teacher order by age asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show different hometown of teachers and the number of teachers from each hometown.",
        "seq_out": "select hometown, count(*) from teacher group by hometown",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "For each hometown, how many teachers are there?",
        "seq_out": "select hometown, count(*) from teacher group by hometown",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hometown from teacher group by hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the hometowns shared by at least two teachers.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show the hometowns shared by at least two teachers.",
        "seq_out": "select hometown from teacher group by hometown having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.hometown from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two teachers come from?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the towns from which at least two teachers come from?",
        "seq_out": "select hometown from teacher group by hometown having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t2.course from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show names of teachers and the courses they are arranged to teach.",
        "seq_out": "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t2.course from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What is the name of each teacher and what course they teach?",
        "seq_out": "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t2.course from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id join teacher as t3 on t2.teacher_id = t3.teacher_id order by t3.name asc",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "seq_out": "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name, t1.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t1.name asc",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "seq_out": "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from course as t1 join teacher as t2 on t1.course_id = t2.course_id join course_arrange as t3 on t2.teacher_id = t3.teacher_id where t1.course = 'Math'",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show the name of the teacher for the math course.",
        "seq_out": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = 'Math'",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the people who teach math courses?",
        "seq_out": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of teachers and the number of courses they teach.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show names of teachers and the number of courses they teach.",
        "seq_out": "select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers and how many courses do they teach?",
        "seq_out": "select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "Show names of teachers that teach at least two courses.",
        "seq_out": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers who teach at least two courses?",
        "seq_out": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "List the names of teachers who have not been arranged to teach courses.",
        "seq_out": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                8
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        },
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "struct_in": "| course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
        "text_in": "What are the names of the teachers whose courses have not been arranged?",
        "seq_out": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from visitor where age  < 30",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many visitors below age 30 are there?",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "How many visitors below age 30 are there?",
        "seq_out": "select count(*) from visitor where age < 30",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "seq_out": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(age) from visitor where level_of_membership > 4",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "What is the average age of the visitors whose membership level is not higher than 4?",
        "seq_out": "select avg(age) from visitor where level_of_membership <= 4",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, level_of_membership from visitor where level_of_membership > 4 order by age",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "seq_out": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select museum_id, name from museum order by num_of_staff desc limit 1",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "Find the id and name of the museum that has the most staff members?",
        "seq_out": "select museum_id, name from museum order by num_of_staff desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select open_year, num_of_staff from museum where name = 'Plaza Museum'",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        },
        "serialized_schema": " | museum_visit | museum : museum_id , name ( Plaza Museum ) , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "struct_in": "| museum_visit | museum : museum_id , name ( Plaza Museum ) , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
        "text_in": "What are the opening year and staff number of the museum named Plaza Museum?",
        "seq_out": "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, birth_date from players where country_code = 'USA'",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "List the first name and birth date of all players from the country with code USA.",
        "seq_out": "select first_name, birth_date from players where country_code = 'USA'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, birth_date from players where country_code = 'USA'",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of players from the USA?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the first names and birth dates of players from the USA?",
        "seq_out": "select first_name, birth_date from players where country_code = 'USA'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.tourney_name from matches as t1 join tourney_id as t2 on t1.tourney_id = t2.tourney_id group by t1.tourney_id having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the name of tourney that has more than 10 matches.",
        "seq_out": "select tourney_name from matches group by tourney_name having count(*) > 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.tourney_name from matches as t1 join tourney_id as t2 on t1.tourney_id = t2.tourney_id group by t2.tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the names of tournaments that have more than 10 matches?",
        "seq_out": "select tourney_name from matches group by tourney_name having count(*) > 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, country_code from players order by birth_date desc limit 1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the first name and country code of the oldest player.",
        "seq_out": "select first_name, country_code from players order by birth_date limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, country_code from players order by birth_date desc limit 1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What is the first name and country code of the oldest player?",
        "seq_out": "select first_name, country_code from players order by birth_date limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players in the order of birth date.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Last , Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Last , Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "List the first and last name of all players in the order of birth date.",
        "seq_out": "select first_name, last_name from players order by birth_date",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted by birth date?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the full names of all players, sorted by birth date?",
        "seq_out": "select first_name, last_name from players order by birth_date",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, last_name from players where hand = \"L\" order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Last , Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Last , Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "seq_out": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the full names of all left handed players, in order of birth date?",
        "seq_out": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the first name and country code of the player who did the most number of tours.",
        "seq_out": "select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What is the first name and country code of the player with the most tours?",
        "seq_out": "select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the year that has the most number of matches.",
        "seq_out": "select year from matches group by year order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Which year had the most matches?",
        "seq_out": "select year from matches group by year order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select winner_name, winner_rank, winner_rank_points from rankings group by winner_rank order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the name and rank points of the winner who won the most times.",
        "seq_out": "select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.winner_name, count(*) from winner as t1 join matches as t2 on t1.winner_id = t2.winner_id group by t1.winner_id order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "seq_out": "select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.winner_name from winner as t1 join matches as t2 on t1.winner_id = t2.tourney_id join rankings as t3 on t2.ranking_date = t3.ranking_date where t2.tourney_name = 'Australian Open' order by t3.ranking_points desc limit 1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "seq_out": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.winner_name from winner as t1 join matches as t2 on t1.winner_id = t2.tourney_id where t2.tourney_name = 'Australian Open' group by t1.winner_name order by count(*) desc limit 1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "seq_out": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.loser_name, t1.winner_name from loser as t1 join matches as t2 on t1.loser_id = t2.loser_id where t2.match_num ='minutes' order by t2.minutes desc limit 1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "seq_out": "select winner_name, loser_name from matches order by minutes desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.winner_name, t2.loser_name from winner as t1 join matches as t2 on t1.winner_id = t2.winner_id order by t2.match_num desc limit 1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the names of the winner and loser who played in the longest match?",
        "seq_out": "select winner_name, loser_name from matches order by minutes desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, avg(tours) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the average ranking for each player and their first name.",
        "seq_out": "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, avg(tours) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the first names of all players, and their average rankings?",
        "seq_out": "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country_code, count(*) from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "find the number of players for each country.",
        "seq_out": "select count(*), country_code from players group by country_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country_code, count(*) from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "How many players are from each country?",
        "seq_out": "select count(*), country_code from players group by country_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "find the code of the country where has the greatest number of players.",
        "seq_out": "select country_code from players group by country_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What is the code of the country with the most players?",
        "seq_out": "select country_code from players group by country_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the codes of countries that have more than 50 players.",
        "seq_out": "select country_code from players group by country_code having count(*) > 50",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What are the codes of countries with more than 50 players?",
        "seq_out": "select country_code from players group by country_code having count(*) > 50",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select match_num, year from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the number of matches happened in each year.",
        "seq_out": "select count(*), year from matches group by year",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select year, count(*) from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "How many matches were played in each year?",
        "seq_out": "select count(*), year from matches group by year",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name, t1.country_code, t2.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.match_num desc limit 1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "seq_out": "select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name, t1.country_code, t2.birth_date from players as t1 join rankings as t2 on t1.player_id = t2.player_id join matches as t3 on t2.match_num = t3.match_num order by t3.match_num desc limit 1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "seq_out": "select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "Find the number of players for each hand type.",
        "seq_out": "select count(*), hand from players group by hand",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "struct_in": "| wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
        "text_in": "How many players are there for each hand type?",
        "seq_out": "select count(*), hand from players group by hand",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many ships ended up being 'Captured'?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "How many ships ended up being 'Captured'?",
        "seq_out": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, tonnage from ship order by name desc",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "seq_out": "select name, tonnage from ship order by name desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, date, result from battle",
        "query": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "List the name, date and result of each battle.",
        "seq_out": "select name, date from battle",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(tonnage), min(tonnage) from death as t1 join ship as t2 on t1.id = t2.ship_id",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What is maximum and minimum death toll caused each time?",
        "seq_out": "select max(killed), min(killed) from death",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, result from battle where bulgarian_commander!= 'Boril'",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander ( Boril ) , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander ( Boril ) , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "seq_out": "select name, result from battle where bulgarian_commander != 'Boril'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type ( Brig ) , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type ( Brig ) , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "seq_out": "select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander ( Kaloyan ) , latin_commander ( Baldwin I ) , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander ( Kaloyan ) , latin_commander ( Baldwin I ) , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "seq_out": "select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select note from death where note like '%east%'",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                15
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        },
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "struct_in": "| battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
        "text_in": "What are the notes of the death events which has substring 'East'?",
        "seq_out": "select note from death where note like '%east%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select line_1, line_2 from addresses group by line_1",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "what are all the addresses including line 1 and line 2?",
        "seq_out": "select line_1, line_2 from addresses",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select line_1, line_2 from addresses",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the first and second line for all addresses?",
        "seq_out": "select line_1, line_2 from addresses",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from courses",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many courses in total are listed?",
        "seq_out": "select count(*) from courses",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from courses",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many courses are there?",
        "seq_out": "select count(*) from courses",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from courses where course_name = \"math\"",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math course described?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How is the math course described?",
        "seq_out": "select course_description from courses where course_name = 'math'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select course_description from courses where course_name = \"math\"",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the descriptions for all the math courses?",
        "seq_out": "select course_description from courses where course_name = 'math'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the zip code of the address in the city Port Chelsea?",
        "seq_out": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the zip code for Port Chelsea?",
        "seq_out": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.department_name, t2.department_id from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id group by t2.department_id order by count(*) desc limit 1",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Which department offers the most number of degrees? List department name and id.",
        "seq_out": "select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department offer?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many degrees does the engineering department offer?",
        "seq_out": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = \"Engineering\"",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many degrees does the engineering department have?",
        "seq_out": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names and descriptions of all the sections?",
        "seq_out": "select section_name, section_description from sections",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names and descriptions for all the sections?",
        "seq_out": "select section_name, section_description from sections",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*)  < = 2",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of courses having at most 2 sections?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names and id of courses having at most 2 sections?",
        "seq_out": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*)  < 2",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names and ids of every course with less than 2 sections?",
        "seq_out": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name from sections order by section_name desc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "List the section_name in reversed lexicographical order.",
        "seq_out": "select section_name from sections order by section_name desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name from sections order by section_name desc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names of the sections in reverse alphabetical order?",
        "seq_out": "select section_name from sections order by section_name desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the semester which most student registered in? Show both the name and the id.",
        "seq_out": "select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "For each semester, what is the name and id of the one with the most students registered?",
        "seq_out": "select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select department_description from departments where department_name like \"%computer%\"",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the description of the department whose name has the substring the computer?",
        "seq_out": "select department_description from departments where department_name like '%computer%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select department_description from departments where department_name like \"%computer%\"",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the department description for the one whose name has the word computer?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the department description for the one whose name has the word computer?",
        "seq_out": "select department_description from departments where department_name like '%computer%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t1.student_id having count(*) = 2",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "seq_out": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "seq_out": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.middle_name, t1.last_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id where t2.degree_summary_name = \"Bachelor\"",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name ( Bachelor ) , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name ( Bachelor ) , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "seq_out": "select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.middle_name, t1.last_name from student_enrolment as t1 join students as t2 on t1.student_enrolment_id = t2.student_enrolment_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.department_name = 'Bachelors'",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "seq_out": "select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.degree_program_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Find the kind of program which most number of students are enrolled in?",
        "seq_out": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the degree summary name that has the most number of students enrolled?",
        "seq_out": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.student_id group by t1.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "seq_out": "select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.degree_program_id, t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the program id and the summary of the degree that has the most students enrolled?",
        "seq_out": "select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Which semesters do not have any student enrolled? List the semester name.",
        "seq_out": "select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the name of the semester with no students enrolled?",
        "seq_out": "select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are all the course names of the courses which ever have students enrolled in?",
        "seq_out": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all courses that have some students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What are the names of all courses that have some students enrolled?",
        "seq_out": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What's the name of the course with most number of enrollments?",
        "seq_out": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the name of the course with the most students enrolled?",
        "seq_out": "select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Show the date and id of the transcript with at least 2 course results.",
        "seq_out": "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the date and id of the transcript with at least 2 courses listed?",
        "seq_out": "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name ( Timmothy ) , middle_name , last_name ( Ward ) , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name ( Timmothy ) , middle_name , last_name ( Ward ) , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "seq_out": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name ( Timmothy ) , middle_name , last_name ( Ward ) , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name ( Timmothy ) , middle_name , last_name ( Ward ) , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the mobile phone number of the student named Timmothy Ward ?",
        "seq_out": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Who is the first student to register? List the first name, middle name and last name.",
        "seq_out": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, middle_name, last_name from students",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the first, middle, and last name of the first student to register?",
        "seq_out": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "seq_out": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the first, middle, and last name of the earliest school graduate?",
        "seq_out": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.first_name from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Whose permanent address is different from his or her current address? List his or her first name.",
        "seq_out": "select first_name from students where current_address_id != permanent_address_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name from students as t1 join addresses as t2 on t1.address_id = t2.address_id where t2.permanent_address_id!= t1.address_id",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the first name of the student whose permanent address is different from his or her current one?",
        "seq_out": "select first_name from students where current_address_id != permanent_address_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.address_id, t2.line_1 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Which address holds the most number of students currently? List the address id and all lines.",
        "seq_out": "select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.address_id, t1.line_1, t1.line_2, t3.line_3 from addresses as t1 join students as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the id, line 1, and line 2 of the address with the most students?",
        "seq_out": "select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "When is the first transcript released? List the date and details.",
        "seq_out": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the earliest date of a transcript release, and what details can you tell me?",
        "seq_out": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from transcripts",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many transcripts are released?",
        "seq_out": "select count(*) from transcripts",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from transcripts",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are listed?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many transcripts are listed?",
        "seq_out": "select count(*) from transcripts",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the last transcript release date?",
        "seq_out": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last transcript released?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "When was the last transcript released?",
        "seq_out": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_id, count(*) from student_enrolment_courses as t1 join transcripts as t2 on t1.student_course_id = t2.student_course_id group by t1.course_id order by count(*) desc limit 1",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "seq_out": "select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.course_id, count(*) from student_enrolment_courses as t1 join transcripts as t2 on t1.course_id = t2.course_id group by t1.course_id",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "seq_out": "select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.transcript_date, t2.transcript_id, count(*) from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t2.transcript_id order by count(*) asc limit 1",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Show the date of the transcript which shows the least number of results, also list the id.",
        "seq_out": "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.transcript_date, t2.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t2.transcript_id order by count(*) asc limit 1",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the date and id of the transcript with the least number of results?",
        "seq_out": "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select other_student_details from students order by other_student_details desc",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "List all the student details in reversed lexicographical order.",
        "seq_out": "select other_student_details from students order by other_student_details desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select other_student_details from students order by other_student_details desc",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What other details can you tell me about students in reverse alphabetical order?",
        "seq_out": "select other_student_details from students order by other_student_details desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_name, section_description from sections group by section_name",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "Describe the section h.",
        "seq_out": "select section_description from sections where section_name = 'h'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select section_description from sections where section_name = \"h\"",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "time",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "time",
            "text",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                14,
                18,
                23,
                28,
                32,
                44,
                49,
                52
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        },
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "struct_in": "| student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
        "text_in": "What is the description for the section named h?",
        "seq_out": "select section_description from sections where section_name = 'h'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon order by title asc",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the title of all cartoons in alphabetical order.",
        "seq_out": "select title from cartoon order by title",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon order by title asc",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the titles of the cartoons sorted alphabetically?",
        "seq_out": "select title from cartoon order by title",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "List all cartoon directed by \"Ben Jones\".",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "What are the names of all cartoons directed by Ben Jones?",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "text_in": "How many cartoons were written by \"Joseph Kuhr\"?",
        "seq_out": "select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Joseph Kuhr ) , original_air_date , production_code , channel",
        "text_in": "What is the number of cartoones written by Joseph Kuhr?",
        "seq_out": "select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title, directed_by from cartoon order by air_date",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "list all cartoon titles and their directors ordered by their air date",
        "seq_out": "select title, directed_by from cartoon order by original_air_date",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title, directed_by from cartoon order by air_date",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the name and directors of all the cartoons that are ordered by air date?",
        "seq_out": "select title, directed_by from cartoon order by original_air_date",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel",
        "text_in": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "seq_out": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "seq_out": "select country, count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the country with the most number of TV Channels and how many does it have?",
        "seq_out": "select country, count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "select content from tv_channel where series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the content of the series Sky Radio?",
        "seq_out": "select content from tv_channel where series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "select package_option from tv_channel where series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "seq_out": "select package_option from tv_channel where series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "How many TV Channel using language English?",
        "seq_out": "select count(*) from tv_channel where language = \"English\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "How many TV Channels use the English language?",
        "seq_out": "select count(*) from tv_channel where language = \"English\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "seq_out": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "seq_out": "select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List each language and the number of TV Channels using it.",
        "seq_out": "select language, count(*) from tv_channel group by language",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "For each language, list the number of TV Channels that use it.",
        "seq_out": "select language, count(*) from tv_channel group by language",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t3.series_name from cartoon as t1 join tv_series as t2 on t1.id = t2.id join tv_channel as t3 on t1.channel = t3.id where t1.title = \"The rise of the blue beetle!\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title ( The Rise of the Blue Beetle! ) , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title ( The Rise of the Blue Beetle! ) , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "seq_out": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t3.series_name from cartoon as t1 join tv_series as t2 on t1.id = t2.id join tv_channel as t3 on t1.channel = t3.id where t1.title = \"The rise of the Blue Beetle\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title ( The Rise of the Blue Beetle! ) , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title ( The Rise of the Blue Beetle! ) , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "seq_out": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.title from cartoon as t1 join tv_channel as t2 on t1.id = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "seq_out": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.title from cartoon as t1 join tv_channel as t2 on t1.id = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "seq_out": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the Episode of all TV series sorted by rating.",
        "seq_out": "select episode from tv_series order by rating",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are all of the episodes ordered by ratings?",
        "seq_out": "select episode from tv_series order by rating",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode, rating from tv_series order by rating desc limit 3",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "seq_out": "select episode, rating from tv_series order by rating desc limit 3;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode, rating from tv_series order by rating desc limit 3",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "seq_out": "select episode, rating from tv_series order by rating desc limit 3;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select min(share), max(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is minimum and maximum share of TV series?",
        "seq_out": "select max(share), min(share) from tv_series;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(share), min(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the maximum and minimum share for the TV series?",
        "seq_out": "select max(share), min(share) from tv_series;",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "seq_out": "select air_date from tv_series where episode = \"A love of a Lifetime\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "When did the episode \"A Love of a Lifetime\" air?",
        "seq_out": "select air_date from tv_series where episode = \"A love of a Lifetime\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select weekly_rank from tv_series where episode = \"A Love of a Lifetime\"",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "seq_out": "select weekly_rank from tv_series where episode = \"A love of a Lifetime\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select weekly_rank from tv_series where episode = \"A Love of a Lifetime\"",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "seq_out": "select weekly_rank from tv_series where episode = \"A love of a Lifetime\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.id where t2.episode = \"A Love of a Lifetime\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "seq_out": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.id where t2.episode = \"A Love of a Lifetime\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "seq_out": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.episode from tv_series as t1 join tv_channel as t2 on t1.id = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "seq_out": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select episode from tv_series as t1 join tv_channel as t2 on t1.id = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the episode for the TV series named \"Sky Radio\"?",
        "seq_out": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select directed_by, count(*) from cartoon group by directed_by",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "Find the number of cartoons directed by each of the listed directors.",
        "seq_out": "select count(*), directed_by from cartoon group by directed_by",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select directed_by, count(*) from cartoon group by directed_by",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "How many cartoons did each director create?",
        "seq_out": "select count(*), directed_by from cartoon group by directed_by",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "Find the production code and channel of the most recently aired cartoon .",
        "seq_out": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select production_code, channel from cartoon order by id desc limit 1",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the produdction code and channel of the most recent cartoon ?",
        "seq_out": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.package_option, t2.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.hight_definition_tv = 1",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "Find the package choice and series name of the TV channel that has high definition TV.",
        "seq_out": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select package_option, series_name from tv_channel order by hight_definition_tv desc limit 1",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "seq_out": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.id join tv_series as t3 on t2.id = t3.id where t2.written_by = 'Todd Casey'",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Todd Casey ) , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Todd Casey ) , original_air_date , production_code , channel",
        "text_in": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "seq_out": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.id where t2.written_by = \"Todd Casey\"",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Todd Casey ) , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Todd Casey ) , original_air_date , production_code , channel",
        "text_in": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "seq_out": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select pixel_aspect_ratio_par, nation from tv_channel where language!= \"English\"",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "seq_out": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select pixel_aspect_ratio_par, country from tv_channel where language!= \"English\"",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language ( English ) , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "seq_out": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select id from tv_channel group by id having count(*) > 2",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "find id of the tv channels that from the countries where have more than two tv channels.",
        "seq_out": "select id from tv_channel group by country having count(*) > 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select channel from tv_channel group by channel having count(*) > 2",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                10,
                19
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        },
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "struct_in": "| tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
        "text_in": "What are the ids of all tv channels that have more than 2 TV channels?",
        "seq_out": "select id from tv_channel group by country having count(*) > 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many poker players are there?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "How many poker players are there?",
        "seq_out": "select count(*) from poker_player",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Count the number of poker players.",
        "seq_out": "select count(*) from poker_player",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the earnings of poker players in descending order.",
        "seq_out": "select earnings from poker_player order by earnings desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the earnings of poker players, ordered descending by value?",
        "seq_out": "select earnings from poker_player order by earnings desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the final tables made and the best finishes of poker players.",
        "seq_out": "select final_table_made, best_finish from poker_player",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the final tables made and best finishes for all poker players?",
        "seq_out": "select final_table_made, best_finish from poker_player",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(earnings) from poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the average earnings of poker players?",
        "seq_out": "select avg(earnings) from poker_player",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(earnings) from poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the average earnings across all poker players.",
        "seq_out": "select avg(earnings) from poker_player",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the money rank of the poker player with the highest earnings?",
        "seq_out": "select money_rank from poker_player order by earnings desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the money rank of the player with the greatest earnings.",
        "seq_out": "select money_rank from poker_player order by earnings desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(final_table_made) from poker_player where earnings  < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "seq_out": "select max(final_table_made) from poker_player where earnings < 200000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(final_table_made) from poker_player where earnings  < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "seq_out": "select max(final_table_made) from poker_player where earnings < 200000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of poker players?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the names of all the poker players.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players whose earnings is higher than 300000?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Give the names of poker players who have earnings above 300000.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the names of poker players ordered by the final tables made in ascending order.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the birth date of the poker player with the lowest earnings?",
        "seq_out": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the birth date of the poker player with the lowest earnings.",
        "seq_out": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select money_rank from poker_player order by t2.height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the money rank of the tallest poker player?",
        "seq_out": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select money_rank from poker_player order by height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the money rank of the poker player with the greatest height.",
        "seq_out": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(earnings) from poker_player where height > 200",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the average earnings of poker players with height higher than 200?",
        "seq_out": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(earnings) from poker_player where taller_player_id > 200",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average earnings of poker players who are taller than 200.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Give average earnings of poker players who are taller than 200.",
        "seq_out": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of poker players in descending order of earnings?",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the names of poker players sorted by their earnings descending.",
        "seq_out": "select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are different nationalities of people and the corresponding number of people from each nation?",
        "seq_out": "select nationality, count(*) from people group by nationality",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "How many people are there of each nationality?",
        "seq_out": "select nationality, count(*) from people group by nationality",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What is the most common nationality of people?",
        "seq_out": "select nationality from people group by nationality order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Give the nationality that is most common across all people.",
        "seq_out": "select nationality from people group by nationality order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the nationalities that are shared by at least two people?",
        "seq_out": "select nationality from people group by nationality having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select nationality from people group by nationality having count(*) > 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "Return the nationalities for which there are two or more people.",
        "seq_out": "select nationality from people group by nationality having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, birth_date from people order by name asc",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the names and birth dates of people in ascending alphabetical order of name.",
        "seq_out": "select name, birth_date from people order by name asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, birth_date from people order by name",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "seq_out": "select name, birth_date from people order by name asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where nationality!= \"Russia\"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "text_in": "Show names of people whose nationality is not \"Russia\".",
        "seq_out": "select name from people where nationality != \"Russia\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where nationality!= \"Russia\"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality ( Russia ) , name , birth_date , height",
        "text_in": "What are the names of people who are not from Russia?",
        "seq_out": "select name from people where nationality != \"Russia\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "List the names of people that are not poker players.",
        "seq_out": "select name from people where people_id not in (select people_id from poker_player)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                7
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        },
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "struct_in": "| poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
        "text_in": "What are the names of people who do not play poker?",
        "seq_out": "select name from people where people_id not in (select people_id from poker_player)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from area_code_state",
        "query": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "How many states are there?",
        "seq_out": "select count(*) from area_code_state",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "List the contestant numbers and names, ordered by contestant name descending.",
        "seq_out": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select vote_id, phone_number, state from votes",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "List the vote ids, phone numbers and states of all votes.",
        "seq_out": "select vote_id, phone_number, state from votes",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(area_code), min(area_code) from area_code_state",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the maximum and minimum values of area codes?",
        "seq_out": "select max(area_code), min(area_code) from area_code_state",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select created from votes where state = 'CA' order by created desc limit 1",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state ( CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA ) , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state ( CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA ) , contestant_number , created",
        "text_in": "What is last date created of votes from the state 'CA'?",
        "seq_out": "select max(created) from votes where state = 'CA'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select contestant_name from contestants where contestant_name!= 'Jessie Alloway'",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Jessie Alloway ) | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Jessie Alloway ) | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "seq_out": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct state, created from votes",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and create time of all votes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the distinct states and create time of all votes?",
        "seq_out": "select distinct state, created from votes",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "seq_out": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "seq_out": "select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state ( NY , CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA , NY ) , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state ( NY , CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA , NY ) , contestant_number , created",
        "text_in": "What are the number of votes from state 'NY' or 'CA'?",
        "seq_out": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.area_code group by t1.area_code order by count(*) desc limit 1",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What is the area code in which the most voters voted?",
        "seq_out": "select t1.area_code from area_code_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.created, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number where t2.contestant_name = 'Tabatha Gehling'",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Tabatha Gehling ) | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Tabatha Gehling ) | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "seq_out": "select t2.created, t2.state, t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select contestant_name from contestants where contestant_name like '%al%'",
        "query": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "db_id": "voter_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "time"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        },
        "serialized_schema": " | voter_1 | area_code_state : area_code , state ( AL ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "struct_in": "| voter_1 | area_code_state : area_code , state ( AL ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
        "text_in": "Return the names of the contestants whose names contain the substring 'Al' .",
        "seq_out": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode where t1.population > 1950",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the countries that became independent after 1950?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the names of all the countries that became independent after 1950?",
        "seq_out": "select name from country where indepyear > 1950",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from city where population > 1950",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the names of the nations that were founded after 1950.",
        "seq_out": "select name from country where indepyear > 1950",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select continent from country where localname = \"Anguilla\";",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Anguilla ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Anguilla ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Anguilla ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Anguilla ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which continent is Anguilla in?",
        "seq_out": "select continent from country where name = \"Anguilla\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select continent from country where localname = \"Anguilla\";",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Anguilla ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Anguilla ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Anguilla ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Anguilla ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is the continent name which Anguilla belongs to?",
        "seq_out": "select continent from country where name = \"Anguilla\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select region from city where name = \"Kabul\";",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name ( Kabul ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name ( Kabul ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which region is the city Kabul located in?",
        "seq_out": "select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select region from city where name = \"Kabul\";",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name ( Kabul ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name ( Kabul ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What region is Kabul in?",
        "seq_out": "select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode where t2.name = \"Aruba\" group by t1.language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Aruba ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Aruba ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Aruba ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Aruba ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which language is the most popular in Aruba?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode where t2.name = \"Aruba\"",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Aruba ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Aruba ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Aruba ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Aruba ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What language is predominantly spoken in Aruba?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select population, lifeexpectancy from country where name = \"Brazil\";",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and life expectancies in Brazil?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Brazil ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Brazil ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the population and life expectancies in Brazil?",
        "seq_out": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select population, lifeexpectancy from country where name = \"Brazil\";",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Brazil ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Brazil ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give me Brazil\u2019s population and life expectancies.",
        "seq_out": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select region, population from country where localname = \"Angola\";",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and population of Angola?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Angola ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Angola ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Angola ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Angola ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the region and population of Angola?",
        "seq_out": "select population, region from country where name = \"Angola\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select region, population from country where localname = \"Angola\";",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its population?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Angola ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Angola ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Angola ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname ( Angola ) , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What region does Angola belong to and what is its population?",
        "seq_out": "select population, region from country where name = \"Angola\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from country where continent = 'Asia' order by lifeexpectancy limit 1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is the name of country that has the shortest life expectancy in Asia?",
        "seq_out": "select name from country where continent = \"Asia\" order by lifeexpectancy limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from country where continent = 'Asia' order by lifeexpectancy limit 1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the name of the country in Asia with the lowest life expectancy.",
        "seq_out": "select name from country where continent = \"Asia\" order by lifeexpectancy limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode group by t1.countrycode order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is name of the country that speaks the largest number of languages?",
        "seq_out": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the name of the nation that uses the greatest amount of languages.",
        "seq_out": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.continent from country as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which continent has the most diverse languages?",
        "seq_out": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.continent from country as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which continent speaks the most languages?",
        "seq_out": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select region from countrylanguage where language = \"English\" or language = \"Dutch\"",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English , Dutch ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English , Dutch ) , isofficial , percentage",
        "text_in": "What are the regions that use English or Dutch?",
        "seq_out": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" or t2.language = \"Dutch\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select region from countrylanguage where language = \"Dutch\" or language = \"English\"",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English , Dutch ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English , Dutch ) , isofficial , percentage",
        "text_in": "Which regions speak Dutch or English?",
        "seq_out": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" or t2.language = \"Dutch\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage where continent = \"Asia\" group by language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which language is the most popular on the Asian continent?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage where continent = 'Asia' group by language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is the language that is used by the largest number of Asian nations?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode join country as t3 on t2.countrycode = t3.countrycode where t3.governmentform = 'Republic' group by t1.language having count(*) = 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform ( Republic ) , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform ( Republic ) , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which languages are spoken by only one country in republic governments?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republic\" group by t2.language having count(*) = 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode where t2.governmentform = 'Republic' group by t1.language having count(*) = 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform ( Republic ) , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform ( Republic ) , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What languages are only used by a single country with a republic government?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republic\" group by t2.language having count(*) = 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode join country as t3 on t2.countrycode = t3.countrycode where t3.language = \"English\" order by t3.population desc limit 1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "text_in": "Find the city with the largest population that uses English.",
        "seq_out": "select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = \"English\" group by t1.id order by count(*) desc limit 1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "text_in": "What is the most populace city that speaks English?",
        "seq_out": "select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Find the name, population and expected life length of asian country with the largest area?",
        "seq_out": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "seq_out": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.isofficial from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode where t2.headofstate = \"Beatrix\"",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate ( Beatrix ) , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate ( Beatrix ) , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is the official language spoken in the country whose head of state is Beatrix?",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.isofficial from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode where t2.headofstate = \"Beatrix\"",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate ( Beatrix ) , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate ( Beatrix ) , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "seq_out": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select countrycode from countrylanguage where language!= \"English\"",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "text_in": "What are the country codes of countries where people use languages other than English?",
        "seq_out": "select distinct countrycode from countrylanguage where language != \"English\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select countrycode from countrylanguage where language!= \"English\"",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage",
        "text_in": "Give the country codes for countries in which people speak langauges that are not English.",
        "seq_out": "select distinct countrycode from countrylanguage where language != \"English\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.continent = \"Asia\" and t2.language = \"Chinese\"",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Chinese ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Chinese ) , isofficial , percentage",
        "text_in": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "seq_out": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = \"Asia\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, indepyear, surfacearea from country order by population asc limit 1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the name, independence year, and surface area of the country with the smallest population?",
        "seq_out": "select name, surfacearea, indepyear from country order by population limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t1.indepyear, t2.surfacearea from country as t1 join city as t2 on t1.countrycode = t2.countrycode order by t2.population asc limit 1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "seq_out": "select name, surfacearea, indepyear from country order by population limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.population, t1.name, t1.leader from country as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode order by t2.surfacearea desc limit 1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the population, name and leader of the country with the largest area?",
        "seq_out": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the name, population, and head of state for the country that has the largest area.",
        "seq_out": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode having count(*) >= 3",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "seq_out": "select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode having count(*) > 2",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "seq_out": "select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, surfacearea from country order by surfacearea desc limit 5",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the names and areas of countries with the top 5 largest area?",
        "seq_out": "select name, surfacearea from country order by surfacearea desc limit 5",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, surfacearea from country order by population desc limit 5",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Return the names and surface areas of the 5 largest countries.",
        "seq_out": "select name, surfacearea from country order by surfacearea desc limit 5",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from country order by population desc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are names of countries with the top 3 largest population?",
        "seq_out": "select name from country order by population desc limit 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from country order by population desc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Return the names of the 3 most populated countries.",
        "seq_out": "select name from country order by population desc limit 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from city order by population asc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the names of the nations with the 3 lowest populations?",
        "seq_out": "select name from country order by population asc limit 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.name from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode group by t1.countrycode order by count(*) asc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 countries with the fewest people.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Return the names of the 3 countries with the fewest people.",
        "seq_out": "select name from country order by population asc limit 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from country where continent = \"Europe\" and population = 80000",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "seq_out": "select name from country where continent = \"Europe\" and population = \"80000\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from country where continent = \"Europe\" and population = 80000",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "seq_out": "select name from country where continent = \"Europe\" and population = \"80000\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from city where population between 160000 and 900000",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the cities whose population is between 160000 and 900000?",
        "seq_out": "select name from city where population between 160000 and 900000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from city where population between 160000 and 900000",
        "query": "select name from city where population between 160000 and 900000",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Return the names of cities that have a population between 160000 and 900000 .",
        "seq_out": "select name from city where population between 160000 and 900000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Which language is spoken by the largest number of countries?",
        "seq_out": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "Give the language that is spoken in the most countries.",
        "seq_out": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select language from countrylanguage group by countrycode order by percentage desc limit 1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What is the language spoken by the largest percentage of people in each country?",
        "seq_out": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select countrycode, language from countrylanguage group by countrycode order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
        "text_in": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "seq_out": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage",
        "text_in": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "seq_out": "select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select countrycode from countrylanguage where language = \"Spanish\"",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                8,
                23
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        },
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage",
        "struct_in": "| world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage",
        "text_in": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "seq_out": "select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many conductors are there?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "How many conductors are there?",
        "seq_out": "select count(*) from conductor",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of conductors.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Count the number of conductors.",
        "seq_out": "select count(*) from conductor",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List the names of conductors in ascending order of age.",
        "seq_out": "select name from conductor order by age asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by age",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors, ordered by age?",
        "seq_out": "select name from conductor order by age asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor where nationality!= \"USA\"",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors whose nationalities are not \"USA\"?",
        "seq_out": "select name from conductor where nationality != 'USA'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor where nationality!= \"USA\"",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the names of conductors that do not have the nationality \"USA\".",
        "seq_out": "select name from conductor where nationality != 'USA'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "seq_out": "select record_company from orchestra order by year_of_founded desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "seq_out": "select record_company from orchestra order by year_of_founded desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What is the average attendance of shows?",
        "seq_out": "select avg(attendance) from show",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the average attendance across all shows.",
        "seq_out": "select avg(attendance) from show",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "seq_out": "select max(share), min(share) from performance where type != \"Live final\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "seq_out": "select max(share), min(share) from performance where type != \"Live final\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List names of conductors in descending order of years of work.",
        "seq_out": "select name from conductor order by year_of_work desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "seq_out": "select name from conductor order by year_of_work desc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List the name of the conductor with the most years of work.",
        "seq_out": "select name from conductor order by year_of_work desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What is the name of the conductor who has worked the greatest number of years?",
        "seq_out": "select name from conductor order by year_of_work desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Show the names of conductors and the orchestras they have conducted.",
        "seq_out": "select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "seq_out": "select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Show the names of conductors that have conducted more than one orchestras.",
        "seq_out": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors who have conducted at more than one orchestra?",
        "seq_out": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where t2.year_of_founded > 2008",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "seq_out": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where t2.year_of_founded > 2008",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "seq_out": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Please show the different record companies and the corresponding number of orchestras.",
        "seq_out": "select record_company, count(*) from orchestra group by record_company",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "How many orchestras does each record company manage?",
        "seq_out": "select record_company, count(*) from orchestra group by record_company",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Please show the record formats of orchestras in ascending order of count.",
        "seq_out": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the major record formats of orchestras, sorted by their frequency?",
        "seq_out": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List the record company shared by the most number of orchestras.",
        "seq_out": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What is the record company used by the greatest number of orchestras?",
        "seq_out": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "List the names of orchestras that have no performance.",
        "seq_out": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "What are the orchestras that do not have any performances?",
        "seq_out": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "seq_out": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "db_id": "orchestra",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "text",
            "number",
            "text",
            "text",
            "number",
            "number",
            "others",
            "text",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6,
                12
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        },
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "struct_in": "| orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
        "text_in": "Count the number of orchestras that have CD or DVD as their record format.",
        "seq_out": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many high schoolers are there?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many high schoolers are there?",
        "seq_out": "select count(*) from highschooler",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of high schoolers.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Count the number of high schoolers.",
        "seq_out": "select count(*) from highschooler",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names and grades of each high schooler.",
        "seq_out": "select name, grade from highschooler",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names and grades for each high schooler?",
        "seq_out": "select name, grade from highschooler",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show all the grades of the high schoolers.",
        "seq_out": "select grade from highschooler",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What is the grade of each high schooler?",
        "seq_out": "select grade from highschooler",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct grade from highschooler where name = 'Kyle'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What grade is Kyle in?",
        "seq_out": "select grade from highschooler where name = \"Kyle\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade from highschooler where name = 'Kyle'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Return the grade for the high schooler named Kyle.",
        "seq_out": "select grade from highschooler where name = \"Kyle\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all high schoolers in grade 10.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of all high schoolers in grade 10.",
        "seq_out": "select name from highschooler where grade = 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all high schoolers in grade 10?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of all high schoolers in grade 10?",
        "seq_out": "select name from highschooler where grade = 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select id from highschooler where name = 'Kyle'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the ID of the high schooler named Kyle.",
        "seq_out": "select id from highschooler where name = \"Kyle\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select id from highschooler where name = 'Kyle'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What is Kyle's id?",
        "seq_out": "select id from highschooler where name = \"Kyle\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many high schoolers are there in grade 9 or 10?",
        "seq_out": "select count(*) from highschooler where grade = 9 or grade = 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Count the number of high schoolers in grades 9 or 10.",
        "seq_out": "select count(*) from highschooler where grade = 9 or grade = 10",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the number of high schoolers for each grade.",
        "seq_out": "select grade, count(*) from highschooler group by grade",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many high schoolers are in each grade?",
        "seq_out": "select grade, count(*) from highschooler group by grade",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show me all grades that have at least 4 students.",
        "seq_out": "select grade from highschooler group by grade having count(*) >= 4",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Which grades have 4 or more high schoolers?",
        "seq_out": "select grade from highschooler group by grade having count(*) >= 4",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select student_id, count(*) from friend group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the student IDs and numbers of friends corresponding to each.",
        "seq_out": "select student_id, count(*) from friend group by student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select student_id, count(*) from friend group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many friends does each student have?",
        "seq_out": "select student_id, count(*) from friend group by student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of high school students and their corresponding number of friends.",
        "seq_out": "select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of the high schoolers and how many friends does each have?",
        "seq_out": "select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What is the name of the high schooler who has the greatest number of friends?",
        "seq_out": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Return the name of the high school student with the most friends.",
        "seq_out": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of high schoolers who have at least 3 friends.",
        "seq_out": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of high schoolers who have 3 or more friends?",
        "seq_out": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t3.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id join highschooler as t3 on t1.id = t3.id where t1.name = 'Kyle'",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of all of the high schooler Kyle's friends.",
        "seq_out": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id join highschooler as t3 on t1.friend_id = t3.id where t2.name = \"Kyle\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t2.friend_name from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t1.name = \"Kyle\"",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Return the names of friends of the high school student Kyle.",
        "seq_out": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id join highschooler as t3 on t1.friend_id = t3.id where t2.name = \"Kyle\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select student_id, count(*) from likes group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Count the number of likes for each student id.",
        "seq_out": "select student_id, count(*) from likes group by student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select student_id, count(*) from likes group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "How many likes correspond to each student id?",
        "seq_out": "select student_id, count(*) from likes group by student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "seq_out": "select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "seq_out": "select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What is the name of the high schooler who has the greatest number of likes?",
        "seq_out": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Give the name of the student with the most likes.",
        "seq_out": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 2",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of students who have at least 2 likes.",
        "seq_out": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 2",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of students who have 2 or more likes?",
        "seq_out": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t1.grade > 5 and t2.friend_id >= 2",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "seq_out": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 2",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                4,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        },
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "struct_in": "| network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
        "text_in": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "seq_out": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "seq_out": "select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "seq_out": "select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.role_code, t2.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "seq_out": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.role_code, t2.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "seq_out": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t2.breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What is the name of the breed with the most dogs?",
        "seq_out": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t2.breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which breed do the most dogs have? Give me the breed name.",
        "seq_out": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id join dogs as t3 on t2.owner_id = t3.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "seq_out": "select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id join dogs as t3 on t2.owner_id = t3.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "seq_out": "select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t2.cell_number from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "seq_out": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.professional_id, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "seq_out": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_of_treatment, t1.first_name from treatments as t1 join professionals as t2 on t1.treatment_id = t2.treatment_id join dogs as t3 on t2.owner_id = t3.owner_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the date of each treatment, together with the first name of the professional who operated it.",
        "seq_out": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.date_of_treatment, t3.first_name from treatments as t1 join professionals as t2 on t1.treatment_id = t2.treatment_id join date_of_treatment as t3 on t1.date_of_treatment = t3.date_of_treatment",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the date and the operating professional's first name of each treatment?",
        "seq_out": "select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the cost of each treatment and the corresponding treatment type description.",
        "seq_out": "select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the cost and treatment type description of each treatment?",
        "seq_out": "select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name, t1.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List each owner's first name, last name, and the size of his for her dog.",
        "seq_out": "select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name, t1.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are each owner's first name, last name, and the size of their dog?",
        "seq_out": "select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List pairs of the owner's first name and the dogs's name.",
        "seq_out": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are each owner's first name and their dogs's name?",
        "seq_out": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state = \"Virginia\"",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Virginia ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Virginia ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "seq_out": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"Virginia\"",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Virginia ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Virginia ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "seq_out": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_arrived, date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "seq_out": "select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_arrived, date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "seq_out": "select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "seq_out": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "seq_out": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the arriving date and the departing date of all the dogs?",
        "seq_out": "select date_arrived, date_departed from dogs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the arrival date and the departure date for all the dogs.",
        "seq_out": "select date_arrived, date_departed from dogs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select role_code, street, city, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "seq_out": "select role_code, street, city, state from professionals where city like '%west%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select role_code, street, city, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "seq_out": "select role_code, street, city, state from professionals where city like '%west%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, last_name, email_address from owners where first_name like '%north%'",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "seq_out": "select first_name, last_name, email_address from owners where state like '%north%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select first_name, last_name, email_address from owners where first_name like '%north%'",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "seq_out": "select first_name, last_name, email_address from owners where state like '%north%'",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select cost_of_treatment from treatments order by cost_of_treatment desc limit 1",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How much does the most recent treatment cost?",
        "seq_out": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Show me the cost of the most recently performed treatment.",
        "seq_out": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How many dogs have not gone through any treatment?",
        "seq_out": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Tell me the number of dogs that have not received any treatment .",
        "seq_out": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How many owners temporarily do not have any dogs?",
        "seq_out": "select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the number of owners who do not own any dogs at this moment.",
        "seq_out": "select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from professionals where professional_id not in (select professional_id from treatments)",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How many professionals did not operate any treatment on dogs?",
        "seq_out": "select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from professionals where professional_id not in (select professional_id from treatments)",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the number of professionals who have not treated any dogs.",
        "seq_out": "select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, age, weight from dogs where abandoned_yn = 1, age = 0",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "seq_out": "select name, age, weight from dogs where abandoned_yn = 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name, age, weight from dogs where abandoned_yn = 1 and owner_id!= \"null\"",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "seq_out": "select name, age, weight from dogs where abandoned_yn = 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What is the age of the oldest dog?",
        "seq_out": "select max(age) from dogs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Tell me the age of the oldest dog.",
        "seq_out": "select max(age) from dogs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_type, charge_amount from charges group by charge_type",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How much does each charge type costs? List both charge type and amount.",
        "seq_out": "select charge_type, charge_amount from charges",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_type, charge_amount from charges group by charge_type",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List each charge type and its amount.",
        "seq_out": "select charge_type, charge_amount from charges",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_amount from charges order by charge_amount desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "How much does the most expensive charge type costs?",
        "seq_out": "select max(charge_amount) from charges",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select charge_amount from charges order by charge_amount desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What is the charge amount of the most expensive charge type?",
        "seq_out": "select max(charge_amount) from charges",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address, cell_number, home_phone from professionals",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the email, cell phone and home phone of all the professionals.",
        "seq_out": "select email_address, cell_number, home_phone from professionals",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select email_address, cell_number, home_phone from professionals",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are the email, cell phone and home phone of each professional?",
        "seq_out": "select email_address, cell_number, home_phone from professionals",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select breed_type, size_code from sizes",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are all the possible breed type and size type combinations?",
        "seq_out": "select distinct breed_code, size_code from dogs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct breed_code, size_code from dogs",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "Find the distinct breed type and size type combinations for dogs.",
        "seq_out": "select distinct breed_code, size_code from dogs",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t3.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "List the first name of all the professionals along with the description of the treatment they have done.",
        "seq_out": "select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.first_name, t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "db_id": "dog_kennels",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "number",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "time",
            "text",
            "text",
            "time",
            "time",
            "time",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "number",
            "text",
            "time",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                6,
                8,
                10,
                20,
                33,
                44
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        },
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "struct_in": "| dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
        "text_in": "What are each professional's first name and description of the treatment they have performed?",
        "seq_out": "select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "How many singers are there?",
        "seq_out": "select count(*) from singer",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the count of singers?",
        "seq_out": "select count(*) from singer",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "List the name of singers in ascending order of net worth.",
        "seq_out": "select name from singer order by net_worth_millions asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of singers ordered by ascending net worth?",
        "seq_out": "select name from singer order by net_worth_millions asc",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the birth year and citizenship of singers?",
        "seq_out": "select birth_year, citizenship from singer",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the birth years and citizenships of the singers?",
        "seq_out": "select birth_year, citizenship from singer",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where citizenship!= \"France\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship ( France ) | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship ( France ) | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "List the name of singers whose citizenship is not \"France\".",
        "seq_out": "select name from singer where citizenship != \"France\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where citizenship!= \"French\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French citizens?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of the singers who are not French citizens?",
        "seq_out": "select name from singer where citizenship != \"France\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show the name of singers whose birth year is either 1948 or 1949?",
        "seq_out": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "seq_out": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer order by net_worth_millions desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the name of the singer with the largest net worth?",
        "seq_out": "select name from singer order by net_worth_millions desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer group by name order by count(*) desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the name of the singer who is worth the most?",
        "seq_out": "select name from singer order by net_worth_millions desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show different citizenship of singers and the number of singers of each citizenship.",
        "seq_out": "select citizenship, count(*) from singer group by citizenship",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "For each citizenship, how many singers are from that country?",
        "seq_out": "select citizenship, count(*) from singer group by citizenship",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Please show the most common citizenship of singers.",
        "seq_out": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the most common singer citizenship ?",
        "seq_out": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.title, t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show titles of songs and names of singers.",
        "seq_out": "select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.title, t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the song titles and singer names?",
        "seq_out": "select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show distinct names of singers that have songs with sales more than 300000.",
        "seq_out": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "what are the different names of the singers that have sales more than 300000?",
        "seq_out": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t2.singer_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "Show the names of singers that have more than one song.",
        "seq_out": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t2.singer_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What are the names of the singers that have more than one songs?",
        "seq_out": "select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "List the name of singers that do not have any song.",
        "seq_out": "select name from singer where singer_id not in (select singer_id from song)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_column_types": [
            "text",
            "number",
            "text",
            "number",
            "number",
            "text",
            "number",
            "text",
            "number",
            "number",
            "number"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                6
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        },
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "struct_in": "| singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
        "text_in": "What is the sname of every sing that does not have any song?",
        "seq_out": "select name from singer where singer_id not in (select singer_id from song)",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select count(*) from other_available_features",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available features are there in total?",
        "db_id": "real_estate_properties",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "time",
            "time",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        },
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "struct_in": "| real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "text_in": "How many available features are there in total?",
        "seq_out": "select count(*) from other_available_features",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select feature_type_name from other_available_features where feature_name = \"AirCon\"",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "time",
            "time",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        },
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name ( AirCon ) , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "struct_in": "| real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name ( AirCon ) , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "text_in": "What is the feature type name of feature AirCon?",
        "seq_out": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code = t2.feature_type_code where t1.feature_name = \"AirCon\"",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "db_id": "real_estate_properties",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "time",
            "time",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        },
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "struct_in": "| real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "text_in": "Show the property type descriptions of properties belonging to that code.",
        "seq_out": "select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code = t2.property_type_code group by t1.property_type_code",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    },
    {
        "prediction": "select property_name from properties where property_type_code = \"House\" or property_type_code = \"Apartment\" group by property_name having count(*) > 1",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "db_path": "/home/22842219/Desktop/openSource/UnifiedSKGG-subSpider/data/downloads/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_column_types": [
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "text",
            "text",
            "text",
            "number",
            "text",
            "time",
            "time",
            "text",
            "text",
            "number",
            "number",
            "number",
            "number",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "number",
            "number",
            "text"
        ],
        "db_primary_keys": {
            "column_id": [
                1,
                3,
                5,
                9
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        },
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code ( Apartment , House ) , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code ( Apartment , House ) , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "struct_in": "| real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code ( Apartment , House ) , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code ( Apartment , House ) , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
        "text_in": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "seq_out": "select property_name from properties where property_type_code = \"House\" union select property_name from properties where property_type_code = \"Apartment\" and room_count > 1",
        "section": "test",
        "arg_path": "META_TUNING/spider_with_cell.cfg"
    }
]