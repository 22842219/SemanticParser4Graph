databse: hospital_1
all_table_fields: {'Physician': ['EmployeeID', 'Name', 'Position', 'SSN'], 'Department': ['DepartmentID', 'Name', 'Head'], 'rel_Affiliated_With': ['Physician', 'Department', 'PrimaryAffiliation'], 'Procedures': ['Code', 'Name', 'Cost'], 'rel_Trained_In': ['Physician', 'Treatment', 'CertificationDate', 'CertificationExpires'], 'Patient': ['SSN', 'Name', 'Address', 'Phone', 'InsuranceID', 'PCP'], 'Nurse': ['EmployeeID', 'Name', 'Position', 'Registered', 'SSN'], 'Appointment': ['AppointmentID', 'Patient', 'PrepNurse', 'Physician', 'Start', 'End', 'ExaminationRoom'], 'Medication': ['Code', 'Name', 'Brand', 'Description'], 'Prescribes': ['Physician', 'Patient', 'Medication', 'Date', 'Appointment', 'Dose'], 'Block': ['BlockFloor', 'BlockCode'], 'Room': ['RoomNumber', 'RoomType', 'BlockFloor', 'BlockCode', 'Unavailable'], 'On_Call': ['Nurse', 'BlockFloor', 'BlockCode', 'OnCallStart', 'OnCallEnd'], 'Stay': ['StayID', 'Patient', 'Room', 'StayStart', 'StayEnd'], 'Undergoes': ['Patient', 'Procedures', 'Stay', 'DateUndergoes', 'Physician', 'AssistingNurse']}
question: What are the procedures that cost more than 1000 or are specialized in by physician John Wen?

**************SQL Query***************
sql: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
sql_ans: [['Complete Walletectomy'], ['Folded Demiophtalmectomy'], ['Follicular Demiectomy'], ['Obfuscated Dermogastrotomy'], ['Obtuse Pyloric Recombobulation'], ['Reverse Rhinopodoplasty'], ['Reversible Pancreomyoplasty']]

**************Cypher Query***************
MATCH (p:Procedures)
WHERE p.Cost > 1000
RETURN p.Name as Name
UNION 
MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)
WHERE T1.Name = "John Wen"
RETURN T3.Name as Name



------------------------
3131
databse: assets_maintenance
question: Which engineer has visited the most times? Show the engineer id, first name and last name.
**************SQL Query***************
sql: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 
GROUP BY T1.engineer_id 
ORDER BY count(*) DESC 
LIMIT 1
sql_ans: [(1, 'Etha', 'Reinger')]
**************Cypher Query***************
MATCH (T1:`assets_maintenance.Maintenance_Engineers`)-[]-(T2:`assets_maintenance.Engineer_Visits`)
WITH T1.first_name AS first_name, T1.engineer_id AS engineer_id, count(T1.engineer_id) AS count, T1.last_name AS last_name
RETURN engineer_id,first_name,last_name
ORDER BY count DESC
LIMIT 1
**************Cypher Query***************
incorrect_ans: [(15, 'Archibald', 'Streich')]
db: assets_maintenance


---------------------check the following tables mapping--------------------------
MATCH p=()-[r:`allergy_1.Has_allergy_HAS_allergy_1.Student`]->() RETURN p LIMIT 25
db: allergy_1
Note: table Has_Allergy has no primary key, but two fk-constraints. Based on our current mapping strategy, it will turned to graph nodes and 

create table Allergy_Type (
       Allergy 		  VARCHAR(20) PRIMARY KEY,
       AllergyType 	  VARCHAR(20)
);

create table table_headers (
       StuID 		 INTEGER,
       Allergy 		 VARCHAR(20),
       FOREIGN KEY(StuID) REFERENCES Student(StuID),
       FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy)
);

create table Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );

-------------------------dataset amendation--------------------------


 -------------hyper edge examples------------
 {
    "db_name": "college_3",
    "table_name": "Enrolled_in",
    "num_of_rows": 210,
    "empty_table": false,
    "primary_keys": [],
    "if_compound_pk": true,
    "table_headers": [
      "StuID",
      "CID",
      "Grade"
    ],
    "table_constraints": [
      {
        "this_table": "Enrolled_in",
        "column": "Grade",
        "ref_table": "Gradeconversion",
        "ref_column": "lettergrade"
      },
      {
        "this_table": "Enrolled_in",
        "column": "CID",
        "ref_table": "Course",
        "ref_column": "CID"
      },
      {
        "this_table": "Enrolled_in",
        "column": "StuID",
        "ref_table": "Student",
        "ref_column": "StuID"
      }
    ],
    "edge_candidate": true,
    "has_duplicate_rows": true
  },