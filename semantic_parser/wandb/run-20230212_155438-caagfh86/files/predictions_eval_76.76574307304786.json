[
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) return count(*)",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "question": "How many singers do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "How many singers do we have?",
        "seq_out": "match (singer:`concert_singer.singer`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) return count(*)",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "question": "What is the total number of singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the total number of singers?",
        "seq_out": "match (singer:`concert_singer.singer`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) return singer.name,singer.country,singer.age order by singer.age desc",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "seq_out": "match (singer:`concert_singer.singer`) return singer.name,singer.country,singer.age order by singer.age desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) return singer.name,singer.country,singer.age order by singer.age desc",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What are the names, countries, and ages for every singer in descending order of age?",
        "seq_out": "match (singer:`concert_singer.singer`) return singer.name,singer.country,singer.age order by singer.age desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) where singer.country = 'France' return avg(singer.age),min(singer.age),max(singer.age)",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country ( France ) , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country ( France ) , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the average, minimum, and maximum age of all singers from France?",
        "seq_out": "match (singer:`concert_singer.singer`) where singer.country = 'France' return avg(singer.age),min(singer.age),max(singer.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) where singer.language = 'France' return avg(singer.age),min(singer.age),max(singer.age)",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the average, minimum, and maximum age for all French singers?",
        "seq_out": "match (singer:`concert_singer.singer`) where singer.country = 'France' return avg(singer.age),min(singer.age),max(singer.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) return singer.song_name,singer.song_release_year order by singer.age asc limit 1",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "Show the name and the release year of the song by the youngest singer.",
        "seq_out": "match (singer:`concert_singer.singer`) return singer.song_name,singer.song_release_year order by singer.age limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) return singer.song_name,singer.song_release_year order by singer.age asc limit 1",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What are the names and release years for all the songs of the youngest singer?",
        "seq_out": "match (singer:`concert_singer.singer`) return singer.song_name,singer.song_release_year order by singer.age limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) where singer.age > 20 return distinct singer.country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What are all distinct countries where singers above age 20 are from?",
        "seq_out": "match (singer:`concert_singer.singer`) where singer.age > 20 return distinct singer.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) where singer.age > 20 return distinct singer.country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "question": "What are  the different countries with singers above age 20?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What are  the different countries with singers above age 20?",
        "seq_out": "match (singer:`concert_singer.singer`) where singer.age > 20 return distinct singer.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) with count(singer.country) as count, singer.country as country return country,count",
        "query": "MATCH (singer:`concert_singer.singer`)\nWITH singer.Country AS Country, count(singer.Country) AS count\nRETURN Country,count",
        "question": "Show all countries and the number of singers in each country.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "Show all countries and the number of singers in each country.",
        "seq_out": "match (singer:`concert_singer.singer`) with singer.country as country, count(singer.country) as count return country,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) with count(singer.country) as count, singer.country as country return country,count",
        "query": "MATCH (singer:`concert_singer.singer`)\nWITH singer.Country AS Country, count(singer.Country) AS count\nRETURN Country,count",
        "question": "How many singers are from each country?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "How many singers are from each country?",
        "seq_out": "match (singer:`concert_singer.singer`) with singer.country as country, count(singer.country) as count return country,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (stadium: ` concert_singer.stadium ` ) return avg(stadium.capacity),max(stadium.capacity)",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the average and maximum capacities for all stadiums ?",
        "seq_out": "match (stadium:`concert_singer.stadium`) return avg(stadium.capacity),max(stadium.capacity)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (stadium: ` concert_singer.stadium ` ) return stadium.name,stadium.capacity order by stadium.average desc limit 1",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the name and capacity for the stadium with highest average attendance?",
        "seq_out": "match (stadium:`concert_singer.stadium`) return stadium.name,stadium.capacity order by stadium.average desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (stadium: ` concert_singer.stadium ` ) return stadium.name,stadium.capacity order by stadium.average desc limit 1",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the name and capacity for the stadium with the highest average attendance?",
        "seq_out": "match (stadium:`concert_singer.stadium`) return stadium.name,stadium.capacity order by stadium.average desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) where singer.song_name ='.*[hey|hey].*' return singer.name,singer.country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "seq_out": "match (singer:`concert_singer.singer`) where singer.song_name =~'.*[h|h]ey.*' return singer.name,singer.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` concert_singer.singer ` ) where singer.song_name ='.*[hey|hey].*' return singer.name,singer.country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : name , lowest , stadium_id , capacity , highest , location , average | :`concert_singer.singer` : country , age , name , song_name , is_male , singer_id , song_release_year | :`concert_singer.concert` : theme , stadium_id , concert_name , concert_id , year",
        "text_in": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "seq_out": "match (singer:`concert_singer.singer`) where singer.song_name =~'.*[h|h]ey.*' return singer.name,singer.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) where pets.weight > 10 return count(*)",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "Find the number of pets whose weight is heavier than 10.",
        "seq_out": "match (pets:`pets_1.pets`) where pets.weight > 10 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) where pets.weight > 10 return count(*)",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "question": "How many pets have a greater weight than 10?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "How many pets have a greater weight than 10?",
        "seq_out": "match (pets:`pets_1.pets`) where pets.weight > 10 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) where pets.pettype = 'dog' return pets.weight order by pets.weight asc limit 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( dog ) , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( dog ) , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "Find the weight of the youngest dog.",
        "seq_out": "match (pets:`pets_1.pets`) return pets.weight order by pets.pet_age limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) where pets.pettype = 'dog' return pets.weight order by pets.weight asc limit 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( dog ) , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( dog ) , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "How much does the youngest dog weigh?",
        "seq_out": "match (pets:`pets_1.pets`) return pets.weight order by pets.pet_age limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) return count(distinct pets.pettype)",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "question": "Find the number of distinct type of pets.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "Find the number of distinct type of pets.",
        "seq_out": "match (pets:`pets_1.pets`) return count(distinct pets.pettype)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) return count(distinct pets.pettype)",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "question": "How many different types of pet are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "How many different types of pet are there?",
        "seq_out": "match (pets:`pets_1.pets`) return count(distinct pets.pettype)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student: ` pets_1.student ` ) where not (student: ` pets_1.student ` ) -[ : ` pets_1.has_pet ` ]- () return student.major,student.age",
        "query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN student.Major,student.Age",
        "question": "Find the major and age of students who do not have a cat pet.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( cat ) , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( cat ) , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "Find the major and age of students who do not have a cat pet.",
        "seq_out": "match (student:`pets_1.student`) where not (student:`pets_1.student`)-[]-(:`pets_1.has_pet`)-[]-(:`pets_1.pets { pettype : 'cat' }`)-[]-(:`pets_1.student`)-[]-(:`pets_1.has_pet`) return student.major,student.age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student: ` pets_1.student ` ) where student.pettype -[ > 'cat' return student.major,student.age",
        "query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN student.Major,student.Age",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( cat ) , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype ( cat ) , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "seq_out": "match (student:`pets_1.student`) where not (student:`pets_1.student`)-[]-(:`pets_1.has_pet`)-[]-(:`pets_1.pets { pettype : 'cat' }`)-[]-(:`pets_1.student`)-[]-(:`pets_1.has_pet`) return student.major,student.age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) return pets.pettype,pets.weight order by pets.pet_age asc limit 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "Find the type and weight of the youngest pet.",
        "seq_out": "match (pets:`pets_1.pets`) return pets.pettype,pets.weight order by pets.pet_age limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) return pets.pettype,pets.weight order by pets.weight asc limit 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "What type of pet is the youngest animal, and how much does it weigh?",
        "seq_out": "match (pets:`pets_1.pets`) return pets.pettype,pets.weight order by pets.pet_age limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) where pets.pet_age > 1 return pets.petid,pets.weight",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "Find the id and weight of all pets whose age is older than 1.",
        "seq_out": "match (pets:`pets_1.pets`) where pets.pet_age > 1 return pets.petid,pets.weight",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (pets: ` pets_1.pets ` ) where pets.pet_age > 1 return pets.petid,pets.weight",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "question": "What is the id and weight of every pet who is older than 1?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` : ",
        "struct_in": "| pets_1 | :`pets_1.student` : age , fname , city_code , lname , advisor , major , sex , stuid | :`pets_1.pets` : pettype , pet_age , weight , petid | :`pets_1.has_pet` :",
        "text_in": "What is the id and weight of every pet who is older than 1?",
        "seq_out": "match (pets:`pets_1.pets`) where pets.pet_age > 1 return pets.petid,pets.weight",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (continents: ` car_1.continents ` ) return count(*)",
        "query": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "question": "How many continents are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many continents are there?",
        "seq_out": "match (continents:`car_1.continents`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (continents: ` car_1.continents ` ) return count(*)",
        "query": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "question": "What is the number of continents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the number of continents?",
        "seq_out": "match (continents:`car_1.continents`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (countries: ` car_1.countries ` ) with count(countries.continent) as count, countries.continent as continent return continent,count",
        "query": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId\nRETURN ContId,Continent,count",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "seq_out": "match (t1:`car_1.continents`)-[]-(t2:`car_1.countries`) with count(t1.contid) as count, t1.continent as continent, t1.contid as contid return contid,continent,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` car_1.continents ` ) -[ ]- (t2: ` car_1.countries ` ) with count(t1.countryid) as count, t1.continent as continent return continent,count,count",
        "query": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId\nRETURN ContId,Continent,count",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "For each continent, list its id, name, and how many countries it has?",
        "seq_out": "match (t1:`car_1.continents`)-[]-(t2:`car_1.countries`) with count(t1.contid) as count, t1.continent as continent, t1.contid as contid return contid,continent,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (countries: ` car_1.countries ` ) return count(*)",
        "query": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "question": "How many countries are listed?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many countries are listed?",
        "seq_out": "match (countries:`car_1.countries`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (countries: ` car_1.countries ` ) return count(*)",
        "query": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "question": "How many countries exist?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many countries exist?",
        "seq_out": "match (countries:`car_1.countries`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) with count(car_makers.maker) as count, car_makers.maker as maker return maker,maker,count",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName\nRETURN FullName,Id,count",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many models does each car maker produce? List maker full name, id and the number.",
        "seq_out": "match (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`) with count(t1.id) as count, t1.id as id, t1.fullname as fullname return fullname,id,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) with count(car_makers.maker) as count, car_makers.maker as maker return maker,model.fullname,count",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName\nRETURN FullName,Id,count",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the full name of each car maker, along with its id and how many models it produces?",
        "seq_out": "match (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`) with count(t1.id) as count, t1.id as id, t1.fullname as fullname return fullname,id,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) return cars_data.model order by cars_data.horsepower limit 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.Horsepower ASC\nLIMIT 1",
        "question": "Which model of the car has the minimum horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "Which model of the car has the minimum horsepower?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) return t1.model order by t2.horsepower asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) return cars_data.model order by cars_data.horsepower asc limit 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.Horsepower ASC\nLIMIT 1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the model of the car with the smallest amount of horsepower?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) return t1.model order by t2.horsepower asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) with count(car_makers.maker) as count, car_makers.maker as maker return maker,count",
        "query": "MATCH (T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWITH count(T2.Id) AS count, T2.Id AS Id, T2.FullName AS FullName\nRETURN count,FullName,Id",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "seq_out": "match (t1:`car_1.model_list`)-[]-(t2:`car_1.car_makers`) with count(t2.id) as count, t2.id as id, t2.fullname as fullname return count,fullname,id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.make = 'amc hornet sportabout' and cars_data.sw return cars_data.accelerated",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Make = 'amc hornet sportabout (sw)'\nRETURN T1.Accelerate",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( amc ) , fullname | :`car_1.model_list` : model ( amc ) , modelid , maker | :`car_1.car_names` : model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( amc ) , fullname | :`car_1.model_list` : model ( amc ) , modelid , maker | :`car_1.car_names` : model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "seq_out": "match (t1:`car_1.cars_data`)-[]-(t2:`car_1.car_names`) where t2.make = 'amc hornet sportabout (sw)' return t1.accelerate",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.make = 'amc hornet sportabout' and cars_data.make ='sw' return cars_data.avg",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Make = 'amc hornet sportabout (sw)'\nRETURN T1.Accelerate",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( amc ) , fullname | :`car_1.model_list` : model ( amc ) , modelid , maker | :`car_1.car_names` : model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( amc ) , fullname | :`car_1.model_list` : model ( amc ) , modelid , maker | :`car_1.car_names` : model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "seq_out": "match (t1:`car_1.cars_data`)-[]-(t2:`car_1.car_names`) where t2.make = 'amc hornet sportabout (sw)' return t1.accelerate",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.year = 1974 return cars_data.weight order by cars_data.cylinders asc limit 8",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders = 8 and cars_data.year = 1974 return min(cars_data.weight)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.year = 1974 return min(cars_data.weight)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders = 8 and cars_data.year = 1974 return min(cars_data.weight)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) return car_makers.maker,car_makers.model",
        "query": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.Maker,model_list.Model",
        "question": "What are all the makers and models?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What are all the makers and models?",
        "seq_out": "match (model_list:`car_1.model_list`) return model_list.maker,model_list.model",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) return car_makers.maker,car_makers.model",
        "query": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.Maker,model_list.Model",
        "question": "What are the makers and models?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What are the makers and models?",
        "seq_out": "match (model_list:`car_1.model_list`) return model_list.maker,model_list.model",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.car_names ` ) where cars_data.cylinders = 3 return max(cars_data.hph),car_names.make",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 3\nRETURN T2.Horsepower,T1.Make\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) where t2.cylinders = 3 return t2.horsepower,t1.make order by t2.horsepower desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.car_names ` ) where cars_data.cylinders = 3 return cars_data.horsepower,cars_data.make order by cars_data.horsepower desc limit 3",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 3\nRETURN T2.Horsepower,T1.Make\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) where t2.cylinders = 3 return t2.horsepower,t1.make order by t2.horsepower desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) return cars_data.model order by cars_data.mpg desc limit 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.MPG DESC\nLIMIT 1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) return t1.model order by t2.mpg desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_names: ` car_1.car_names ` ) where car_names.model = 'Volvo' return avg(car_names.edispl)",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T1.Model = 'volvo'\nRETURN avg(T2.Edispl)",
        "question": "What is the average edispl of the cars of model volvo?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the average edispl of the cars of model volvo?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) where t1.model = 'volvo' return avg(t2.edispl)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.model = 'Volvo' return avg(cars_data.edispl)",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T1.Model = 'volvo'\nRETURN avg(T2.Edispl)",
        "question": "What is the average edispl for all volvos?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the average edispl for all volvos?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) where t1.model = 'volvo' return avg(t2.edispl)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_names: ` car_1.car_names ` ) with count(car_names.model) as count, car_names.model as model return model order by count desc limit 1",
        "query": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.Model AS Model, count(car_names.Model) AS count\nRETURN Model\nORDER BY count DESC\nLIMIT 1",
        "question": "Which model has the most version(make) of cars?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "Which model has the most version(make) of cars?",
        "seq_out": "match (car_names:`car_1.car_names`) with car_names.model as model, count(car_names.model) as count return model order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (model_list: ` car_1.model_list ` ) with model_list.model as model, count(model_list.model) as count return model order by count desc limit 1",
        "query": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.Model AS Model, count(car_names.Model) AS count\nRETURN Model\nORDER BY count DESC\nLIMIT 1",
        "question": "What model has the most different versions?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What model has the most different versions?",
        "seq_out": "match (car_names:`car_1.car_names`) with car_names.model as model, count(car_names.model) as count return model order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders > 4 return count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "question": "How many cars have more than 4 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many cars have more than 4 cylinders?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders > 4 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders > 4 return count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "question": "What is the number of cars with more than 4 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the number of cars with more than 4 cylinders?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders > 4 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.year = 1980 return count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "question": "how many cars were produced in 1980?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "how many cars were produced in 1980?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.year = 1980 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_names: ` car_1.car_names ` ) where car_names.year = 1980 return count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "question": "In 1980, how many cars were made?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "In 1980, how many cars were made?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.year = 1980 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) where car_makers.fullname = 'American Motor Company' return count(*)",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent ( america ) | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname ( American Motor Company ) | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent ( america ) | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname ( American Motor Company ) | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many car models were produced by the maker with full name American Motor Company?",
        "seq_out": "match (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`) where t1.fullname = 'American motor Company' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) where car_makers.fullname = 'American Motor Company' return count(*)",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent ( america ) | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname ( American Motor Company ) | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent ( america ) | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname ( American Motor Company ) | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the number of car models created by the car maker American Motor Company?",
        "seq_out": "match (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`) where t1.fullname = 'American motor Company' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) with count(*) as count, car_makers.maker as maker where count > 3 return maker,count",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName\nWHERE count  > 3\nRETURN FullName,Id",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "Which makers designed more than 3 car models? List full name and the id.",
        "seq_out": "match (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`) with count(*) as count, t1.id as id, t1.fullname as fullname where count > 3 return fullname,id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (car_makers: ` car_1.car_makers ` ) with count(*) as count, car_makers.maker as maker where count > 3 return maker,maker",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName\nWHERE count  > 3\nRETURN FullName,Id",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What are the names and ids of all makers with more than 3 models?",
        "seq_out": "match (t1:`car_1.car_makers`)-[]-(t2:`car_1.model_list`) with count(*) as count, t1.id as id, t1.fullname as fullname where count > 3 return fullname,id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.weight  < 3000 and cars_data.weight -[ 4000 return cars_data.year",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where 3000<=cars_data.weight<=4000 return distinct cars_data.year",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.weight -[ 4000 and cars_data.weight > 3000 with count(cars_data.year) as count, cars_data.year as year return year,count",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where 3000<=cars_data.weight<=4000 return distinct cars_data.year",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.model = 'Volvo' return cars_data.cylinders order by cars_data.accelerated asc limit 1",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "seq_out": "match (t1:`car_1.cars_data`)-[]-(t2:`car_1.car_names`) where t2.model = 'volvo' return t1.cylinders order by t1.accelerate asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.model = 'Volvo' return cars_data.cylinders order by cars_data.accelerated limit 1",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker ( volvo ) , fullname ( Volvo ) | :`car_1.model_list` : model ( volvo ) , modelid , maker | :`car_1.car_names` : model ( volvo ) , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "seq_out": "match (t1:`car_1.cars_data`)-[]-(t2:`car_1.car_names`) where t2.model = 'volvo' return t1.cylinders order by t1.accelerate asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders > 6 return count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "question": "How many cars has over 6 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "How many cars has over 6 cylinders?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders > 6 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders > 6 return count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the number of carsw ith over 6 cylinders?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders > 6 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders = 4 return cars_data.model order by cars_data.hphmax desc limit 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 4\nRETURN T1.Model\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) where t2.cylinders = 4 return t1.model order by t2.horsepower desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.horsepower = 4 return cars_data.model order by cars_data.horse desc limit 4",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 4\nRETURN T1.Model\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "seq_out": "match (t1:`car_1.car_names`)-[]-(t2:`car_1.cars_data`) where t2.cylinders = 4 return t1.model order by t2.horsepower desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders > 1980 return max(cars_data.mpg)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders = 8 or cars_data.year < 1980 return max(cars_data.mpg)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cars_data: ` car_1.cars_data ` ) where cars_data.cylinders > 1980 return max(cars_data.mpg)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : contid , continent | :`car_1.countries` : countryid , countryname , continent | :`car_1.car_makers` : country , id , maker , fullname | :`car_1.model_list` : model , modelid , maker | :`car_1.car_names` : model , make , makeid | :`car_1.cars_data` : mpg , accelerate , id , edispl , weight , cylinders , horsepower , year | :`car_1.continents_has_car_1.countries` :  | :`car_1.car_makers_has_car_1.model_list` :  | :`car_1.model_list_has_car_1.car_names` :  | :`car_1.car_names_has_car_1.cars_data` :",
        "text_in": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "seq_out": "match (cars_data:`car_1.cars_data`) where cars_data.cylinders = 8 or cars_data.year < 1980 return max(cars_data.mpg)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.airline = 'JetBlue Airways' return airlines.country",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Which country does Airline \"JetBlue Airways\" belong to?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.airline = 'JetBlue Airways' return airlines.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.airline = 'JetBlue Airways' return airlines.country",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "question": "What country is Jetblue Airways affiliated with?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "What country is Jetblue Airways affiliated with?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.airline = 'JetBlue Airways' return airlines.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.airline = 'JetBlue Airways' return airlines.abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.airline = 'JetBlue Airways' return airlines.abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.airline = 'JoyBlue Airways' return airlines.abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Which abbreviation corresponds to Jetblue Airways?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.airline = 'JetBlue Airways' return airlines.abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.country = 'USA' return airlines.airline,airlines.abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "List all airline names and their abbreviations in \"USA\".",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.country = 'USA' return airlines.airline,airlines.abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.country = 'USA' return airlines.airline,airlines.abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "What are the airline names and abbreviations for airlines in the USA?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.country = 'USA' return airlines.airline,airlines.abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) return count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "question": "How many airlines do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "How many airlines do we have?",
        "seq_out": "match (airlines:`flight_2.airlines`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) return count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "question": "What is the total number of airlines?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "What is the total number of airlines?",
        "seq_out": "match (airlines:`flight_2.airlines`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airports: ` flight_2.airports ` ) return count(*)",
        "query": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "question": "How many airports do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "How many airports do we have?",
        "seq_out": "match (airports:`flight_2.airports`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airports: ` flight_2.airports ` ) return count(*)",
        "query": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "question": "Return the number of  airports.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Return the number of  airports.",
        "seq_out": "match (airports:`flight_2.airports`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.abbreviation = 'UAL' return airlines.airline",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "question": "Which airline has abbreviation 'UAL'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation ( UAL ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation ( UAL ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Which airline has abbreviation 'UAL'?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.abbreviation = 'UAL' return airlines.airline",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.abbreviation = 'UAL' return airlines.airline",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "question": "Give the airline with abbreviation 'UAL'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation ( UAL ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation ( UAL ) | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Give the airline with abbreviation 'UAL'.",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.abbreviation = 'UAL' return airlines.airline",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.country = 'USA' return count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "question": "How many airlines are from USA?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "How many airlines are from USA?",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.country = 'USA' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airlines: ` flight_2.airlines ` ) where airlines.country = 'USA' return count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "question": "Return the number of airlines in the USA.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country ( USA ) , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Return the number of airlines in the USA.",
        "seq_out": "match (airlines:`flight_2.airlines`) where airlines.country = 'USA' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airports: ` flight_2.airports ` ) where airports.airportcode = 'AKO' return airports.airportname",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "question": "What is the airport name for airport 'AKO'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode ( AKO ) , airportname | :`flight_2.flights` : flightno , sourceairport (  AKO ) , airline , destairport (  AKO )",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode ( AKO ) , airportname | :`flight_2.flights` : flightno , sourceairport (  AKO ) , airline , destairport (  AKO )",
        "text_in": "What is the airport name for airport 'AKO'?",
        "seq_out": "match (airports:`flight_2.airports`) where airports.airportcode = 'AKO' return airports.airportname",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airports: ` flight_2.airports ` ) where airports.airportcode = 'AKO' return airports.airportname",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "question": "Return the name of the airport with code 'AKO'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode ( AKO ) , airportname | :`flight_2.flights` : flightno , sourceairport (  AKO ) , airline , destairport (  AKO )",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode ( AKO ) , airportname | :`flight_2.flights` : flightno , sourceairport (  AKO ) , airline , destairport (  AKO )",
        "text_in": "Return the name of the airport with code 'AKO'.",
        "seq_out": "match (airports:`flight_2.airports`) where airports.airportcode = 'AKO' return airports.airportname",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airports: ` flight_2.airports ` ) where not (airports: ` flight_2.airports ` ) -[ : ` flight_2.flights ` ]- () return airports.airportname",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.AirportName",
        "question": "Find the name of airports which do not have any flight in and out.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Find the name of airports which do not have any flight in and out.",
        "seq_out": "match (airports:`flight_2.airports`) where not (airports:`flight_2.airports`)-[:`flight_2.flights`]-() return airports.airportname",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (airports: ` flight_2.airports ` ) where not (airports: ` flight_2.airports ` ) -[ : ` flight_2.flights ` ]- () return airports.airportname",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.AirportName",
        "question": "Which airports do not have departing or arriving flights?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : country , uid , airline , abbreviation | :`flight_2.airports` : country , city , countryabbrev , airportcode , airportname | :`flight_2.flights` : flightno , sourceairport , airline , destairport",
        "text_in": "Which airports do not have departing or arriving flights?",
        "seq_out": "match (airports:`flight_2.airports`) where not (airports:`flight_2.airports`)-[:`flight_2.flights`]-() return airports.airportname",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) return count(*)",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "question": "How many employees are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "How many employees are there?",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) return count(*)",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "question": "Count the number of employees",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Count the number of employees",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) return employee.name order by employee.age asc",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "question": "Sort employee names by their age in ascending order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Sort employee names by their age in ascending order.",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) return employee.name order by employee.age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) return employee.name order by employee.age asc",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "question": "List the names of employees and sort in ascending order of age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "List the names of employees and sort in ascending order of age.",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) return employee.name order by employee.age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) with employee.city as city, count(employee.city) as count return city,count",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWITH count(employee.City) AS count, employee.City AS City\nRETURN count,City",
        "question": "What is the number of employees from each city?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "What is the number of employees from each city?",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) with count(employee.city) as count, employee.city as city return count,city",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) with employee.city as city, count(employee.city) as count return city,count",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWITH count(employee.City) AS count, employee.City AS City\nRETURN count,City",
        "question": "Count the number of employees for each city.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Count the number of employees for each city.",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) with count(employee.city) as count, employee.city as city return count,city",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) where employee.age > 30 with employee.city as city, count(*) as count where count > 1 return city",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "question": "Which cities do more than one employee under age 30 come from?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Which cities do more than one employee under age 30 come from?",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) where employee.age < 30 with count(*) as count, employee.city as city where count > 1 return city",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (employee: ` employee_hire_evaluation.employee ` ) where employee.age > 30 with employee.city as city, count(*) as count where count > 1 return city",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "question": "Find the cities that have more than one employee under age 30.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Find the cities that have more than one employee under age 30.",
        "seq_out": "match (employee:`employee_hire_evaluation.employee`) where employee.age < 30 with count(*) as count, employee.city as city where count > 1 return city",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) with count(shop.location) as count, shop.location as location return location,count",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH shop.Location AS Location, count(shop.Location) AS count\nRETURN count,Location",
        "question": "Find the number of shops in each location.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Find the number of shops in each location.",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) with shop.location as location, count(shop.location) as count return count,location",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) with shop.location as location, count(shop.location) as count return location,count",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH shop.Location AS Location, count(shop.Location) AS count\nRETURN count,Location",
        "question": "How many shops are there in each location?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "How many shops are there in each location?",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) with shop.location as location, count(shop.location) as count return count,location",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return shop.manager_name,shop.district order by shop.number_products desc limit 1",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Find the manager name and district of the shop whose number of products is the largest.",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return shop.manager_name,shop.district order by shop.number_products desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return shop.manager_name,shop.district order by shop.number_products desc limit 1",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "What are the manager name and district of the shop that sells the largest number of products?",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return shop.manager_name,shop.district order by shop.number_products desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return min(shop.number_products),max(shop.number_products)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "question": "find the minimum and maximum number of products of all stores.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "find the minimum and maximum number of products of all stores.",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return min(shop.number_products),max(shop.number_products)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return min(shop.number_products),max(shop.number_products)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "What are the minimum and maximum number of products across all the shops?",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return min(shop.number_products),max(shop.number_products)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return shop.name,shop.location,shop.district order by shop.number_products desc",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Return the name, location and district of all shops in descending order of number of products.",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return shop.name,shop.location,shop.district order by shop.number_products desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return shop.name,shop.location,shop.district order by shop.number_products desc",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return shop.name,shop.location,shop.district order by shop.number_products desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return count(distinct shop.location)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "question": "How many different store locations are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "How many different store locations are there?",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return count(distinct shop.location)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (shop: ` employee_hire_evaluation.shop ` ) return count(distinct shop.location)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "question": "Count the number of distinct store locations.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : city , employee_id , age , name | :`employee_hire_evaluation.shop` : name , manager_name , number_products , shop_id , location , district | :`employee_hire_evaluation.hiring` : employee_id , start_from , is_full_time , shop_id | :`employee_hire_evaluation.evaluation` : employee_id , year_awarded , bonus",
        "text_in": "Count the number of distinct store locations.",
        "seq_out": "match (shop:`employee_hire_evaluation.shop`) return count(distinct shop.location)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) return count(*)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "question": "How many documents do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many documents do we have?",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) return count(*)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "question": "Count the number of documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of documents.",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) return documents.document_id,documents.document_name,documents.document_description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "List document IDs, document names, and document descriptions for all documents.",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) return documents.document_id,documents.document_name,documents.document_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) return documents.document_id,documents.document_name,documents.document_description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "question": "What are the ids, names, and descriptions for all documents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the ids, names, and descriptions for all documents?",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) return documents.document_id,documents.document_name,documents.document_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Robbin CV' return documents.document_id,documents.template_id,documents.document_description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = 'Robbin CV'\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Robbin CV ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Robbin CV ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) where documents.document_name = 'Robbin CV' return documents.document_id,documents.template_id,documents.document_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Robbin CV' return documents.document_id,documents.template_id,documents.document_description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = 'Robbin CV'\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Robbin CV ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Robbin CV ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) where documents.document_name = 'Robbin CV' return documents.document_id,documents.template_id,documents.document_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) return count(distinct documents.template_type_code)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "question": "How many different templates do all document use?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many different templates do all document use?",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) return count(distinct documents.template_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) return count(distinct documents.template_type_code)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "question": "Count the number of different templates used for documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of different templates used for documents.",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) return count(distinct documents.template_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.template_type_code = 'PPT' return count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "question": "How many documents are using the template with type code 'PPT'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many documents are using the template with type code 'PPT'?",
        "seq_out": "match (t1:`cre_doc_template_mgt.documents`)-[]-(t2:`cre_doc_template_mgt.templates`) where t2.template_type_code = 'PPT' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.template_type_code = 'PPT' return count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "question": "Count the number of documents that use the PPT template type.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of documents that use the PPT template type.",
        "seq_out": "match (t1:`cre_doc_template_mgt.documents`)-[]-(t2:`cre_doc_template_mgt.templates`) where t2.template_type_code = 'PPT' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_id as template_id, count(documents.template_id) as count return template_id,count",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID\nRETURN Template_ID,count",
        "question": "Show all template ids and number of documents using each template.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all template ids and number of documents using each template.",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) with count(documents.template_id) as count, documents.template_id as template_id return template_id,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_id as template_id, count(documents.template_id) as count return template_id,count",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID\nRETURN Template_ID,count",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are all different template ids used for documents, and how many times were each of them used?",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) with count(documents.template_id) as count, documents.template_id as template_id return template_id,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_id as template_id, count(documents.template_type_code) as count return template_id,template_type_code order by count desc limit 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code\nRETURN Template_ID,Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the id and type code for the template used by the most documents?",
        "seq_out": "match (t1:`cre_doc_template_mgt.documents`)-[]-(t2:`cre_doc_template_mgt.templates`) with count(t1.template_id) as count, t1.template_id as template_id, t2.template_type_code as template_type_code return template_id,template_type_code order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_id as template_id, count(documents.template_type_code) as count return template_id,template_type_code order by count desc limit 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code\nRETURN Template_ID,Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the id and type code of the template that is used for the greatest number of documents.",
        "seq_out": "match (t1:`cre_doc_template_mgt.documents`)-[]-(t2:`cre_doc_template_mgt.templates`) with count(t1.template_id) as count, t1.template_id as template_id, t2.template_type_code as template_type_code return template_id,template_type_code order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with count(*) as count, documents.template_id as template_id where count > 1 return template_id",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(*) AS count, documents.Template_ID AS Template_ID\nWHERE count  > 1\nRETURN Template_ID",
        "question": "Show ids for all templates that are used by more than one document.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show ids for all templates that are used by more than one document.",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) with count(*) as count, documents.template_id as template_id where count > 1 return template_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with count(*) as count, documents.template_id as template_id where count > 1 return template_id",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(*) AS count, documents.Template_ID AS Template_ID\nWHERE count  > 1\nRETURN Template_ID",
        "question": "What are the template ids of any templates used in more than a single document?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the template ids of any templates used in more than a single document?",
        "seq_out": "match (documents:`cre_doc_template_mgt.documents`) with count(*) as count, documents.template_id as template_id where count > 1 return template_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) return count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "question": "How many templates do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many templates do we have?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) return count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "question": "Count the number of templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of templates.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) return templates.template_id,templates.version_number,templates.template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show template ids, version numbers, and template type codes for all templates.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) return templates.template_id,templates.version_number,templates.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) return templates.template_id,templates.version_number,templates.template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the ids, version numbers, and type codes for each template?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) return templates.template_id,templates.version_number,templates.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) return distinct templates.template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "question": "Show all distinct template type codes for all templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all distinct template type codes for all templates.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) return distinct templates.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) return distinct ref_template_types.template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "question": "What are the different template type codes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the different template type codes?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) return distinct templates.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT' return templates.template_id",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'\nRETURN templates.Template_ID",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT , PP ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT , PP ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT , PP ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT , PP ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the ids of templates with template type code PP or PPT?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT' return templates.template_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT' return templates.template_id",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'\nRETURN templates.Template_ID",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT , PP ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT , PP ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( PPT , PP ) | :`cre_doc_template_mgt.templates` : template_type_code ( PPT , PP ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the ids of templates that have the code PP or PPT.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT' return templates.template_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_code = 'CV' return count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'CV'\nRETURN count(*)",
        "question": "How many templates have template type code CV?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many templates have template type code CV?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) where templates.template_type_code = 'CV' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_code = 'CV' return count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'CV'\nRETURN count(*)",
        "question": "Count the number of templates of the type CV.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( CV ) , template_type_code ( CV ) | :`cre_doc_template_mgt.templates` : template_type_code ( CV ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of templates of the type CV.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) where templates.template_type_code = 'CV' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) where templates.version_number  < 5 return templates.version_number,templates.template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the version number and template type code for the template with version number later than 5?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) where templates.version_number > 5 return templates.version_number,templates.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) where templates.version_number > 5 return templates.version_number,templates.template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) where templates.version_number > 5 return templates.version_number,templates.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code,count",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code,count",
        "question": "Show all template type codes and number of templates for each.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all template type codes and number of templates for each.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code,count",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code,count",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the different template type codes, and how many templates correspond to each?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code order by count desc limit 1",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Which template type code has most number of templates?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Which template type code has most number of templates?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code order by count desc limit 1",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the type code of the template type that the most templates belong to.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) with count(templates.template_type_code) as count, templates.template_type_code as template_type_code return template_type_code order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) with count(*) as count, templates.template_type_code as template_type_code where count -[ 3 return template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "question": "Show all template type codes with less than three templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all template type codes with less than three templates.",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) with count(*) as count, templates.template_type_code as template_type_code where count < 3 return template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (templates: ` cre_doc_template_mgt.templates ` ) with count(*) as count, templates.template_type_code as template_type_code where count -[ 3 return template_type_code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the codes of template types that have fewer than 3 templates?",
        "seq_out": "match (templates:`cre_doc_template_mgt.templates`) with count(*) as count, templates.template_type_code as template_type_code where count < 3 return template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Data base' return documents.template_type_code",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Data base'\nRETURN T1.Template_Type_Code",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Data base ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Data base ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the template type code of the template used by document with the name \"Data base\"?",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Data base' return t1.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Data base' return documents.template_type_code",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Data base'\nRETURN T1.Template_Type_Code",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Data base ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Data base ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the template type code of the template that is used by a document named Data base.",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Data base' return t1.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.template_type_code = 'BK' return documents.document_name",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T1.Template_Type_Code = 'BK'\nRETURN T2.Document_Name",
        "question": "Show all document names using templates with template type code BK.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( BK ) | :`cre_doc_template_mgt.templates` : template_type_code ( BK ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( BK ) | :`cre_doc_template_mgt.templates` : template_type_code ( BK ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all document names using templates with template type code BK.",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) where t1.template_type_code = 'BK' return t2.document_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.template_type_code = 'BK' return documents.document_name",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T1.Template_Type_Code = 'BK'\nRETURN T2.Document_Name",
        "question": "What are the names of documents that use templates with the code BK?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( BK ) | :`cre_doc_template_mgt.templates` : template_type_code ( BK ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( BK ) | :`cre_doc_template_mgt.templates` : template_type_code ( BK ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the names of documents that use templates with the code BK?",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) where t1.template_type_code = 'BK' return t2.document_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_type_code as template_type_code, count(documents.template_type_code) as count return template_type_code,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code,count",
        "question": "Show all template type codes and the number of documents using each type.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all template type codes and the number of documents using each type.",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) with t1.template_type_code as template_type_code, count(t1.template_type_code) as count return template_type_code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_type_code as template_type_code, count(documents.template_type_code) as count return template_type_code,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code,count",
        "question": "What are the different template type codes, and how many documents use each type?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the different template type codes, and how many documents use each type?",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) with t1.template_type_code as template_type_code, count(t1.template_type_code) as count return template_type_code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_type_code as template_type_code, count(documents.template_type_code) as count return template_type_code order by count desc limit 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Which template type code is used by most number of documents?",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) with t1.template_type_code as template_type_code, count(t1.template_type_code) as count return template_type_code order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.template_type_code as template_type_code, count(documents.template_type_code) as count return template_type_code order by count desc limit 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the code of the template type that is most commonly used in documents.",
        "seq_out": "match (t1:`cre_doc_template_mgt.templates`)-[]-(t2:`cre_doc_template_mgt.documents`) with t1.template_type_code as template_type_code, count(t1.template_type_code) as count return template_type_code order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) return ref_template_types.template_type_code,ref_template_types.template_type_description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "question": "Show all template type codes and descriptions.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all template type codes and descriptions.",
        "seq_out": "match (ref_template_types:`cre_doc_template_mgt.ref_template_types`) return ref_template_types.template_type_code,ref_template_types.template_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types interioare ) return ref_template_types.template_type_code,ref_template_types.template_type_description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "question": "What are the type codes and descriptions for all template types?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the type codes and descriptions for all template types?",
        "seq_out": "match (ref_template_types:`cre_doc_template_mgt.ref_template_types`) return ref_template_types.template_type_code,ref_template_types.template_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_code = 'AD' return ref_template_types.template_type_description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Code = 'AD'\nRETURN ref_template_types.Template_Type_Description",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( AD ) | :`cre_doc_template_mgt.templates` : template_type_code ( AD ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( AD ) | :`cre_doc_template_mgt.templates` : template_type_code ( AD ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the template type descriptions for template type code \"AD\".",
        "seq_out": "match (ref_template_types:`cre_doc_template_mgt.ref_template_types`) where ref_template_types.template_type_code = 'AD' return ref_template_types.template_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_code = 'AD' return ref_template_types.template_type_description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Code = 'AD'\nRETURN ref_template_types.Template_Type_Description",
        "question": "Return the template type description of the template type with the code AD.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( AD ) | :`cre_doc_template_mgt.templates` : template_type_code ( AD ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code ( AD ) | :`cre_doc_template_mgt.templates` : template_type_code ( AD ) , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the template type description of the template type with the code AD.",
        "seq_out": "match (ref_template_types:`cre_doc_template_mgt.ref_template_types`) where ref_template_types.template_type_code = 'AD' return ref_template_types.template_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_description = 'Book' return ref_template_types.template_type_code",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Description = 'Book'\nRETURN ref_template_types.Template_Type_Code",
        "question": "What is the template type code for template type description \"Book\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Book ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Book ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the template type code for template type description \"Book\".",
        "seq_out": "match (ref_template_types:`cre_doc_template_mgt.ref_template_types`) where ref_template_types.template_type_description = 'Book' return ref_template_types.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_description = 'Book' return ref_template_types.template_type_code",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Description = 'Book'\nRETURN ref_template_types.Template_Type_Code",
        "question": "Return the type code of the template type with the description \"Book\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Book ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Book ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the type code of the template type with the description \"Book\".",
        "seq_out": "match (ref_template_types:`cre_doc_template_mgt.ref_template_types`) where ref_template_types.template_type_description = 'Book' return ref_template_types.template_type_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_description = 'Presentation' return ref_template_types.template_id",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T1.Template_Type_Description = 'Presentation'\nRETURN T2.Template_ID",
        "question": "What are the template ids with template type description \"Presentation\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Presentation ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Presentation ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the template ids with template type description \"Presentation\".",
        "seq_out": "match (t1:`cre_doc_template_mgt.ref_template_types`)-[]-(t2:`cre_doc_template_mgt.templates`) where t1.template_type_description = 'Presentation' return t2.template_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_template_types: ` cre_doc_template_types ` ) where ref_template_types.template_type_description = 'Presentation' return ref_template_types.template_id",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T1.Template_Type_Description = 'Presentation'\nRETURN T2.Template_ID",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Presentation ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description ( Presentation ) , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the ids corresponding to templates with the description 'Presentation'.",
        "seq_out": "match (t1:`cre_doc_template_mgt.ref_template_types`)-[]-(t2:`cre_doc_template_mgt.templates`) where t1.template_type_description = 'Presentation' return t2.template_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (paragraphs: ` cre_doc_template_mgt.paragraphs ` ) return count(*)",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "question": "How many paragraphs in total?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many paragraphs in total?",
        "seq_out": "match (paragraphs:`cre_doc_template_mgt.paragraphs`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (paragraphs: ` cre_doc_template_mgt.paragraphs ` ) return count(*)",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "question": "Count the number of paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of paragraphs.",
        "seq_out": "match (paragraphs:`cre_doc_template_mgt.paragraphs`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Summer Show' return count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Summer Show ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Summer Show ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "How many paragraphs for the document with name 'Summer Show'?",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Summer Show' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Summer Show' return count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Summer Show ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Summer Show ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Count the number of paragraphs in the document named 'Summer Show'.",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Summer Show' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Welcome to NY' return documents.paragraph_id,documents.paragraph_text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Welcome to NY ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Welcome to NY ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Welcome to NY' return t1.paragraph_id,t1.paragraph_text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Welcome to NY' return documents.paragraph_id,documents.paragraph_text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Welcome to NY ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Welcome to NY ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Welcome to NY' return t1.paragraph_id,t1.paragraph_text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Customer reviews' return documents.paragraph_text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Customer reviews'\nRETURN T1.Paragraph_Text",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Customer reviews ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Customer reviews ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all paragraph texts for the document \"Customer reviews\".",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Customer reviews' return t1.paragraph_text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) where documents.document_name = 'Customer reviews' return documents.paragraph_text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Customer reviews'\nRETURN T1.Paragraph_Text",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Customer reviews ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name ( Customer reviews ) , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) where t2.document_name = 'Customer reviews' return t1.paragraph_text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.document_id as document_id, count(documents.document_id) as count return document_id,document_name,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name,count",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Show all document ids, names and the number of paragraphs in each document.",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) with t2.document_name as document_name, t1.document_id as document_id, count(t1.document_id) as count return document_id,document_name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.document_id as document_id, count(documents.document_id) as count return document_id,document_name,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name,count",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) with t2.document_name as document_name, t1.document_id as document_id, count(t1.document_id) as count return document_id,document_name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (paragraphs: ` cre_doc_template_mgt.paragraphs ` ) with count(*) as count, paragraphs.document_id as document_id where count >= 2 return document_id",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH count(*) AS count, paragraphs.Document_ID AS Document_ID\nWHERE count  >= 2\nRETURN Document_ID",
        "question": "List all document ids with at least two paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "List all document ids with at least two paragraphs.",
        "seq_out": "match (paragraphs:`cre_doc_template_mgt.paragraphs`) with count(*) as count, paragraphs.document_id as document_id where count >= 2 return document_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with count(*) as count, documents.document_id as document_id where count >= 2 return document_id",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH count(*) AS count, paragraphs.Document_ID AS Document_ID\nWHERE count  >= 2\nRETURN Document_ID",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What are the ids of documents that have 2 or more paragraphs?",
        "seq_out": "match (paragraphs:`cre_doc_template_mgt.paragraphs`) with count(*) as count, paragraphs.document_id as document_id where count >= 2 return document_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with count(documents.document_id) as count, documents.document_name as document_name return document_id,document_name order by count desc limit 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the document id and name with greatest number of paragraphs?",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) with t2.document_name as document_name, t1.document_id as document_id, count(t1.document_id) as count return document_id,document_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with count(documents.document_id) as count, documents.document_name as document_name return document_id,document_name order by count desc limit 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the id and name of the document with the most paragraphs.",
        "seq_out": "match (t1:`cre_doc_template_mgt.paragraphs`)-[]-(t2:`cre_doc_template_mgt.documents`) with t2.document_name as document_name, t1.document_id as document_id, count(t1.document_id) as count return document_id,document_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (paragraphs: ` cre_doc_template_mgt.paragraphs ` ) with count(paragraphs.document_id) as count, paragraphs.document_id as document_id return document_id order by count asc limit 1",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count\nRETURN Document_ID\nORDER BY count ASC\nLIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "What is the document id with least number of paragraphs?",
        "seq_out": "match (paragraphs:`cre_doc_template_mgt.paragraphs`) with paragraphs.document_id as document_id, count(paragraphs.document_id) as count return document_id order by count asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (documents: ` cre_doc_template_mgt.documents ` ) with documents.document_id as document_id, count(documents.document_id) as count return document_id order by count limit 1",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count\nRETURN Document_ID\nORDER BY count ASC\nLIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_doc_template_mgt.ref_template_types` : template_type_description , template_type_code | :`cre_doc_template_mgt.templates` : template_type_code , date_effective_to , version_number , template_details , template_id , date_effective_from | :`cre_doc_template_mgt.documents` : document_name , document_description , template_id , document_id | :`cre_doc_template_mgt.paragraphs` : paragraph_text , paragraph_id , document_id | :`cre_doc_template_mgt.ref_template_types_has_cre_doc_template_mgt.templates` :  | :`cre_doc_template_mgt.templates_has_cre_doc_template_mgt.documents` :  | :`cre_doc_template_mgt.documents_has_cre_doc_template_mgt.paragraphs` :",
        "text_in": "Return the id of the document with the fewest paragraphs.",
        "seq_out": "match (paragraphs:`cre_doc_template_mgt.paragraphs`) with paragraphs.document_id as document_id, count(paragraphs.document_id) as count return document_id order by count asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return count(*)",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "question": "How many teachers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "How many teachers are there?",
        "seq_out": "match (teacher:`course_teach.teacher`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return count(*)",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "question": "What is the total count of teachers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What is the total count of teachers?",
        "seq_out": "match (teacher:`course_teach.teacher`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.name order by teacher.age asc",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "List the names of teachers in ascending order of age.",
        "seq_out": "match (teacher:`course_teach.teacher`) return teacher.name order by teacher.age asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.name order by teacher.age asc",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the teachers ordered by ascending age?",
        "seq_out": "match (teacher:`course_teach.teacher`) return teacher.name order by teacher.age asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.age,teacher.hometown",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "question": "What are the age and hometown of teachers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the age and hometown of teachers?",
        "seq_out": "match (teacher:`course_teach.teacher`) return teacher.age,teacher.hometown",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.age,teacher.hometown",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "question": "What is the age and hometown of every teacher?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What is the age and hometown of every teacher?",
        "seq_out": "match (teacher:`course_teach.teacher`) return teacher.age,teacher.hometown",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) where teacher.hometown  < > 'Little Lever Urban District' return teacher.name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : grade",
        "text_in": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "seq_out": "match (teacher:`course_teach.teacher`) where teacher.hometown <> 'little lever urban district' return teacher.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) where teacher.hometown -[ > 'Little Lever Urban District' return teacher.name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "seq_out": "match (teacher:`course_teach.teacher`) where teacher.hometown <> 'little lever urban district' return teacher.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.hometown order by teacher.age asc limit 1",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What is the hometown of the youngest teacher?",
        "seq_out": "match (teacher:`course_teach.teacher`) return teacher.hometown order by teacher.age asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.name order by teacher.age asc limit 1",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "question": "Where is the youngest teacher from?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Where is the youngest teacher from?",
        "seq_out": "match (teacher:`course_teach.teacher`) return teacher.hometown order by teacher.age asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) with teacher.hometown as hometown, count(teacher.hometown) as count return hometown,count",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown,count",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Show different hometown of teachers and the number of teachers from each hometown.",
        "seq_out": "match (teacher:`course_teach.teacher`) with teacher.hometown as hometown, count(teacher.hometown) as count return hometown,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) with teacher.hometown as hometown, count(teacher.hometown) as count return hometown,count",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown,count",
        "question": "For each hometown, how many teachers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "For each hometown, how many teachers are there?",
        "seq_out": "match (teacher:`course_teach.teacher`) with teacher.hometown as hometown, count(teacher.hometown) as count return hometown,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` course_teach.teacher ` ) -[ t2: ` course_teach.course_arrange ` ]- () return t1.name,t1.course_id",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Show names of teachers and the courses they are arranged to teach.",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.course`)-[]-(t3:`course_teach.teacher`) return t3.name,t2.course",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) return teacher.name,teacher.course",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course",
        "question": "What is the name of each teacher and what course they teach?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What is the name of each teacher and what course they teach?",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.course`)-[]-(t3:`course_teach.teacher`) return t3.name,t2.course",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` course_teach.teacher ` ) -[ t2: ` course_teach.course_arrange ` ]- () return t1.name,t1.course order by t1.name asc",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course\nORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.course`)-[]-(t3:`course_teach.teacher`) return t3.name,t2.course order by t3.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` course_teach.course ` ) -[ ]- (t2: ` course_teach.teacher ` ) return t2.name,t2.course order by t2.name asc",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course\nORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.course`)-[]-(t3:`course_teach.teacher`) return t3.name,t2.course order by t3.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (course: ` course_teach.course ` ) where course.course = 'Math' return course.name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nWHERE T2.Course = 'Math'\nRETURN T3.Name",
        "question": "Show the name of the teacher for the math course.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course ( Math ) , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course ( Math ) , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Show the name of the teacher for the math course.",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.course`)-[]-(t3:`course_teach.teacher`) where t2.course = 'Math' return t3.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (course: ` course_teach.course ` ) where course.course = 'Math' return course.name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nWHERE T2.Course = 'Math'\nRETURN T3.Name",
        "question": "What are the names of the people who teach math courses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course ( Math ) , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course ( Math ) , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the people who teach math courses?",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.course`)-[]-(t3:`course_teach.teacher`) where t2.course = 'Math' return t3.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) with count(teacher.name) as count, teacher.name as name return name,count",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "question": "Show names of teachers and the number of courses they teach.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Show names of teachers and the number of courses they teach.",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.teacher`) with count(t2.name) as count, t2.name as name return name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) with teacher.name as name, count(teacher.name) as count return name,count",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the teachers and how many courses do they teach?",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.teacher`) with count(t2.name) as count, t2.name as name return name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) with count(*) as count, teacher.name as name where count >= 2 return name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "question": "Show names of teachers that teach at least two courses.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "Show names of teachers that teach at least two courses.",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.teacher`) with count(*) as count, t2.name as name where count >= 2 return name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) with count(*) as count, teacher.name as name where count >= 2 return name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "question": "What are the names of the teachers who teach at least two courses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the teachers who teach at least two courses?",
        "seq_out": "match ()-[t1:`course_teach.course_arrange`]-(t2:`course_teach.teacher`) with count(*) as count, t2.name as name where count >= 2 return name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) where not (teacher: ` course_teach.teacher ` ) -[ : ` course_teach.course_arrange ` ]- () return teacher.name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.Name",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "List the names of teachers who have not been arranged to teach courses.",
        "seq_out": "match (teacher:`course_teach.teacher`) where not (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-() return teacher.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (teacher: ` course_teach.teacher ` ) where not (teacher: ` course_teach.teacher ` ) -[ : ` course_teach.course_arrange ` ]- () return teacher.name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.Name",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "struct_in": "| course_teach | :`course_teach.course` : course_id , course , staring_date | :`course_teach.teacher` : age , name , teacher_id , hometown | :`course_teach.course_arrange` : grade",
        "text_in": "What are the names of the teachers whose courses have not been arranged?",
        "seq_out": "match (teacher:`course_teach.teacher`) where not (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-() return teacher.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (visitor: ` museum_visit.visitor ` ) where visitor.age -[ 30 return count(*)",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Age < 30\nRETURN count(*)",
        "question": "How many visitors below age 30 are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "struct_in": "| museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "text_in": "How many visitors below age 30 are there?",
        "seq_out": "match (visitor:`museum_visit.visitor`) where visitor.age < 30 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (visitor: ` museum_visit.visitor ` ) where visitor.level_of_membership > 4 return visitor.name order by visitor.level_of_membership",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name\nORDER BY visitor.Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "struct_in": "| museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "text_in": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "seq_out": "match (visitor:`museum_visit.visitor`) where visitor.level_of_membership > 4 return visitor.name order by visitor.level_of_membership desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (visitor: ` museum_visit.visitor ` ) where visitor.level_of_membership -[ 4 return avg(visitor.age)",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership <= 4\nRETURN avg(visitor.Age)",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "struct_in": "| museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "text_in": "What is the average age of the visitors whose membership level is not higher than 4?",
        "seq_out": "match (visitor:`museum_visit.visitor`) where visitor.level_of_membership <= 4 return avg(visitor.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (visitor: ` museum_visit.visitor ` ) where visitor.level_of_membership > 4 return visitor.name,visitor.age order by visitor.age desc",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name,visitor.Level_of_membership\nORDER BY visitor.Age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "struct_in": "| museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "text_in": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "seq_out": "match (visitor:`museum_visit.visitor`) where visitor.level_of_membership > 4 return visitor.name,visitor.level_of_membership order by visitor.age desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (museum: ` museum_visit.museum ` ) return museum.museum_id,museum.name order by museum.num_of_staff desc limit 1",
        "query": "MATCH (museum:`museum_visit.museum`)\nRETURN museum.Museum_ID,museum.Name\nORDER BY museum.Num_of_Staff DESC\nLIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "struct_in": "| museum_visit | :`museum_visit.museum` : name , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "text_in": "Find the id and name of the museum that has the most staff members?",
        "seq_out": "match (museum:`museum_visit.museum`) return museum.museum_id,museum.name order by museum.num_of_staff desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (museum: ` museum_visit.museum ` ) where museum.name = 'Placy Museum' return museum.open_year,museum.num_of_staff",
        "query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Name = 'Plaza Museum'\nRETURN museum.Num_of_Staff,museum.Open_Year",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : name ( Plaza Museum ) , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "struct_in": "| museum_visit | :`museum_visit.museum` : name ( Plaza Museum ) , num_of_staff , open_year , museum_id | :`museum_visit.visitor` : age , name , level_of_membership , id",
        "text_in": "What are the opening year and staff number of the museum named Plaza Museum?",
        "seq_out": "match (museum:`museum_visit.museum`) where museum.name = 'Plaza Museum' return museum.num_of_staff,museum.open_year",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ship: ` battle_death.ship ` ) where ship.disposition_of_ship = 'Captured' return count(*)",
        "query": "MATCH (ship:`battle_death.ship`)\nWHERE ship.disposition_of_ship = 'Captured'\nRETURN count(*)",
        "question": "How many ships ended up being 'Captured'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship ( Captured ) , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship ( Captured ) , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "How many ships ended up being 'Captured'?",
        "seq_out": "match (ship:`battle_death.ship`) where ship.disposition_of_ship = 'Captured' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ship: ` battle_death.ship ` ) return ship.name,ship.tonnage order by ship.name desc",
        "query": "MATCH (ship:`battle_death.ship`)\nRETURN ship.name,ship.tonnage\nORDER BY ship.name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "seq_out": "match (ship:`battle_death.ship`) return ship.name,ship.tonnage order by ship.name desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (death: ` battle_death.death ` ) with count(death.tonnage) as count, death.tonnage as tonnage return tonnage,max(death.tonnage)",
        "query": "MATCH (death:`battle_death.death`)\nRETURN max(death.killed),min(death.killed)",
        "question": "What is maximum and minimum death toll caused each time?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "What is maximum and minimum death toll caused each time?",
        "seq_out": "match (death:`battle_death.death`) return max(death.killed),min(death.killed)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (battle: ` battle_death.battle ` ) where battle.bulgararian_commander -[ > 'Boril' return battle.name,battle.result",
        "query": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander <> 'Boril'\nRETURN battle.name,battle.result",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander ( Boril ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander ( Boril ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "seq_out": "match (battle:`battle_death.battle`) where battle.bulgarian_commander <> 'Boril' return battle.name,battle.result",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (battle: ` battle_death.battle ` ) where battle.ship_type = 'Brig' return distinct battle.id,battle.name",
        "query": "MATCH (T1:`battle_death.battle`)-[]-(T2:`battle_death.ship`)\nWHERE T2.ship_type = 'Brig'\nRETURN DISTINCT T1.id,T1.name",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type ( Brig ) , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type ( Brig ) , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "seq_out": "match (t1:`battle_death.battle`)-[]-(t2:`battle_death.ship`) where t2.ship_type = 'Brig' return distinct t1.id,t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (battle: ` battle_death.battle ` ) where battle.bulgariarian_commander = 'Kaloyan' and battle.latin_commander = 'Baldwin I' return distinct battle.name",
        "query": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'\nRETURN battle.name",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander ( Baldwin I ) , bulgarian_commander ( Kaloyan ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander ( Baldwin I ) , bulgarian_commander ( Kaloyan ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "seq_out": "match (battle:`battle_death.battle`) where battle.bulgarian_commander = 'Kaloyan' and battle.latin_commander = 'Baldwin I' return battle.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (battle: ` battle_death.battle ` ) return count(distinct battle.result)",
        "query": "MATCH (battle:`battle_death.battle`)\nRETURN count(DISTINCT battle.result)",
        "question": "How many different results are there for the battles?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "How many different results are there for the battles?",
        "seq_out": "match (battle:`battle_death.battle`) return count(distinct battle.result)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (death: ` battle_death.death ` ) where death.substring = 'East' return death.note",
        "query": "MATCH (death:`battle_death.death`)\nWHERE death.note =~'.*[E|e]ast.*'\nRETURN death.note",
        "question": "What are the notes of the death events which has substring 'East'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_has_battle_death.ship` :  | :`battle_death.ship_has_battle_death.death` :",
        "text_in": "What are the notes of the death events which has substring 'East'?",
        "seq_out": "match (death:`battle_death.death`) where death.note =~'.*[e|e]ast.*' return death.note",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (addresses: ` student_transcripts_tracking.addresses ` ) where addresses.line_1 and addresses.line_2 return addresses.address_id",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "question": "what are all the addresses including line 1 and line 2?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "what are all the addresses including line 1 and line 2?",
        "seq_out": "match (addresses:`student_transcripts_tracking.addresses`) return addresses.line_1,addresses.line_2",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (addresses: ` student_transcripts_tracking.addresses ` ) return addresses.line_1 and addresses.line_2",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "question": "What is the first and second line for all addresses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the first and second line for all addresses?",
        "seq_out": "match (addresses:`student_transcripts_tracking.addresses`) return addresses.line_1,addresses.line_2",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (courses: ` student_transcripts_tracking.courses ` ) return count(*)",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "question": "How many courses in total are listed?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many courses in total are listed?",
        "seq_out": "match (courses:`student_transcripts_tracking.courses`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (courses: ` student_transcripts_tracking.courses ` ) return count(*)",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "question": "How many courses are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many courses are there?",
        "seq_out": "match (courses:`student_transcripts_tracking.courses`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (courses: ` student_transcripts_tracking.courses ` ) where courses.course_name ='math' return courses.course_description",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "question": "How is the math course described?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How is the math course described?",
        "seq_out": "match (courses:`student_transcripts_tracking.courses`) where courses.course_name = 'math' return courses.course_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (courses: ` student_transcripts_tracking.courses ` ) where courses.course_name ='math' return courses.course_description",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "question": "What are the descriptions for all the math courses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the descriptions for all the math courses?",
        "seq_out": "match (courses:`student_transcripts_tracking.courses`) where courses.course_name = 'math' return courses.course_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (addresses: ` student_transcripts_tracking.addresses ` ) where addresses.city = 'Port Chelsea' return addresses.zip_postcode",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the zip code of the address in the city Port Chelsea?",
        "seq_out": "match (addresses:`student_transcripts_tracking.addresses`) where addresses.city = 'Port Chelsea' return addresses.zip_postcode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (addresses: ` student_transcripts_tracking.addresses ` ) where addresses.city = 'Port Chelsea' return addresses.zip_postcode",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "question": "What is the zip code for Port Chelsea?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the zip code for Port Chelsea?",
        "seq_out": "match (addresses:`student_transcripts_tracking.addresses`) where addresses.city = 'Port Chelsea' return addresses.zip_postcode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (degree_programs: ` student_transcripts_tracking.degree_programs ` ) with degree_programs.department_name as department_name, count(degree_programs.department_id) as count return department_name,department_id order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Departments`)\nWITH T2.department_name AS department_name, count(T1.department_id) AS count, T1.department_id AS department_id\nRETURN department_name,department_id\nORDER BY count DESC\nLIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Which department offers the most number of degrees? List department name and id.",
        "seq_out": "match (t1:`student_transcripts_tracking.degree_programs`)-[]-(t2:`student_transcripts_tracking.departments`) with t2.department_name as department_name, count(t1.department_id) as count, t1.department_id as department_id return department_name,department_id order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (departments: ` student_transcripts_tracking.departments ` ) where departments.degree_program_id = 'Y' return count(*)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "question": "How many departments offer any degree?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many departments offer any degree?",
        "seq_out": "match (degree_programs:`student_transcripts_tracking.degree_programs`) return count(distinct degree_programs.department_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (degree_programs: ` student_transcripts_tracking.degree_programs ` ) return count(distinct degree_programs.department_name)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "question": "How many different departments offer degrees?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many different departments offer degrees?",
        "seq_out": "match (degree_programs:`student_transcripts_tracking.degree_programs`) return count(distinct degree_programs.department_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (degree_programs: ` student_transcripts_tracking.degree_programs ` ) return count(distinct degree_programs.degree_summary_name)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.degree_summary_name)",
        "question": "How many different degree names are offered?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many different degree names are offered?",
        "seq_out": "match (degree_programs:`student_transcripts_tracking.degree_programs`) return count(distinct degree_programs.degree_summary_name)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (degree_programs: ` student_transcripts_tracking.degree_programs ` ) return count(distinct degree_programs.degree_program_id)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.degree_summary_name)",
        "question": "How many different degrees are offered?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many different degrees are offered?",
        "seq_out": "match (degree_programs:`student_transcripts_tracking.degree_programs`) return count(distinct degree_programs.degree_summary_name)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) return sections.section_name,sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "question": "What are the names and descriptions of all the sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the names and descriptions of all the sections?",
        "seq_out": "match (sections:`student_transcripts_tracking.sections`) return sections.section_name,sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) return sections.section_name,sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "question": "What are the names and descriptions for all the sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the names and descriptions for all the sections?",
        "seq_out": "match (sections:`student_transcripts_tracking.sections`) return sections.section_name,sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) with count(*) as count, sections.course_name as course_name, sections.course_id as course_id where count >= 2 return course_name,course_id",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "question": "What are the names and id of courses having at most 2 sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the names and id of courses having at most 2 sections?",
        "seq_out": "match (t1:`student_transcripts_tracking.courses`)-[]-(t2:`student_transcripts_tracking.sections`) with count(*) as count, t1.course_name as course_name, t1.course_id as course_id where count <= 2 return course_name,course_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) with count(*) as count, sections.course_name as course_name where count -[ 2 return course_name,courses.course_id",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the names and ids of every course with less than 2 sections?",
        "seq_out": "match (t1:`student_transcripts_tracking.courses`)-[]-(t2:`student_transcripts_tracking.sections`) with count(*) as count, t1.course_name as course_name, t1.course_id as course_id where count <= 2 return course_name,course_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) return sections.section_name order by sections.section_name",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "List the section_name in reversed lexicographical order.",
        "seq_out": "match (sections:`student_transcripts_tracking.sections`) return sections.section_name order by sections.section_name desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) return sections.section_name order by sections.section_name desc",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the names of the sections in reverse alphabetical order?",
        "seq_out": "match (sections:`student_transcripts_tracking.sections`) return sections.section_name order by sections.section_name desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) with students.semester_name as semester_name, count(students.semester_id) as count return semester_name,semester_id order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name\nRETURN semester_name,semester_id\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the semester which most student registered in? Show both the name and the id.",
        "seq_out": "match (t1:`student_transcripts_tracking.semesters`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with count(t1.semester_id) as count, t1.semester_id as semester_id, t1.semester_name as semester_name return semester_name,semester_id order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` student_transcripts_tracking.semesters ` ) -[ ]- (t2: ` student_transcripts_tracking.students ` ) with t1.semester_name as semester_name, count(t1.semester_id) as count, t1.semester_id as semester_id return semester_name,semester_id order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name\nRETURN semester_name,semester_id\nORDER BY count DESC\nLIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "For each semester, what is the name and id of the one with the most students registered?",
        "seq_out": "match (t1:`student_transcripts_tracking.semesters`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with count(t1.semester_id) as count, t1.semester_id as semester_id, t1.semester_name as semester_name return semester_name,semester_id order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (departments: ` student_transcripts_tracking.departments ` ) where departments.department_name ='.*[i|i]nformation.*' return departments.department_description",
        "query": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "question": "What is the description of the department whose name has the substring the computer?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the description of the department whose name has the substring the computer?",
        "seq_out": "match (departments:`student_transcripts_tracking.departments`) where departments.department_name =~'.*[c|c]omputer.*' return departments.department_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (departments: ` student_transcripts_tracking.departments ` ) where departments.department_name ='.*[c|c]oc.*' return departments.department_description",
        "query": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "question": "What is the department description for the one whose name has the word computer?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the department description for the one whose name has the word computer?",
        "seq_out": "match (departments:`student_transcripts_tracking.departments`) where departments.department_name =~'.*[c|c]omputer.*' return departments.department_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) with count(*) as count, student_enrolment.semester_name as semester_name where count >= 2 return first_name,mid_name,last_name,semester_id",
        "query": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name\nWHERE count  = 2\nRETURN first_name,middle_name,last_name,student_id",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "seq_out": "match (t1:`student_transcripts_tracking.students`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with t1.last_name as last_name, t1.student_id as student_id, count(*) as count, t1.middle_name as middle_name, t1.first_name as first_name where count = 2 return first_name,middle_name,last_name,student_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) with count(*) as count, student_enrolment.first_name,student_mid_name,student_last_name as middle_name where count >= 2 return first_name,mid_name,last_name,count",
        "query": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name\nWHERE count  = 2\nRETURN first_name,middle_name,last_name,student_id",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "seq_out": "match (t1:`student_transcripts_tracking.students`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with t1.last_name as last_name, t1.student_id as student_id, count(*) as count, t1.middle_name as middle_name, t1.first_name as first_name where count = 2 return first_name,middle_name,last_name,student_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) with student_enrolment.degree_program_id as degree_program_id, count(student_enrolment.degree_program_id) as count return degree_program_id order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name\nRETURN degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Find the kind of program which most number of students are enrolled in?",
        "seq_out": "match (t1:`student_transcripts_tracking.degree_programs`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with count(t1.degree_summary_name) as count, t1.degree_summary_name as degree_summary_name return degree_summary_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) with student_enrolment.degree_summary_name as degree_summary_name, count(student_enrolment.degree_summary_name) as count return degree_summary_name order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name\nRETURN degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the degree summary name that has the most number of students enrolled?",
        "seq_out": "match (t1:`student_transcripts_tracking.degree_programs`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with count(t1.degree_summary_name) as count, t1.degree_summary_name as degree_summary_name return degree_summary_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) with student_enrolment.student_enrolment_id as student_enrolment_id, count(student_enrolment.student_id) as count return student_enrolment_id,count order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count\nRETURN degree_program_id,degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "seq_out": "match (t1:`student_transcripts_tracking.degree_programs`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with t1.degree_summary_name as degree_summary_name, t1.degree_program_id as degree_program_id, count(t1.degree_program_id) as count return degree_program_id,degree_summary_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) with student_enrolment.degree_program_id as degree_program_id, count(student_enrolment.degree_program_id) as count return degree_program_id,degree_program_description order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count\nRETURN degree_program_id,degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the program id and the summary of the degree that has the most students enrolled?",
        "seq_out": "match (t1:`student_transcripts_tracking.degree_programs`)-[]-(t2:`student_transcripts_tracking.student_enrolment`) with t1.degree_summary_name as degree_summary_name, t1.degree_program_id as degree_program_id, count(t1.degree_program_id) as count return degree_program_id,degree_summary_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) where not (student_enrolment: ` student_transcripts_tracking.student_enrolment ` ) -[ ]- (: ` student_transcripts_tracking.semesters ` ) return distinct student_enrolment.semester_name",
        "query": "MATCH (semesters:`student_transcripts_tracking.Semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`)\nRETURN semesters.semester_name",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Which semesters do not have any student enrolled? List the semester name.",
        "seq_out": "match (semesters:`student_transcripts_tracking.semesters`) where not (semesters:`student_transcripts_tracking.semesters`)-[]-(:`student_transcripts_tracking.student_enrolment`) return semesters.semester_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (semesters: ` student_transcripts_tracking.semesters ` ) where not (semesters: ` student_transcripts_tracking.semesters ` ) -[ ]- (: ` student_transcripts_tracking.student_enrolment ` ) return distinct students.semester_name",
        "query": "MATCH (semesters:`student_transcripts_tracking.Semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`)\nRETURN semesters.semester_name",
        "question": "What is the name of the semester with no students enrolled?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the name of the semester with no students enrolled?",
        "seq_out": "match (semesters:`student_transcripts_tracking.semesters`) where not (semesters:`student_transcripts_tracking.semesters`)-[]-(:`student_transcripts_tracking.student_enrolment`) return semesters.semester_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) where students.first_name = 'Timmothy' and students.last_name = 'Ward' return students.cell_mobile_number",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name ( Timmothy ) , email_address , student_id , date_first_registered , last_name ( Ward ) , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name ( Timmothy ) , email_address , student_id , date_first_registered , last_name ( Ward ) , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) where students.first_name = 'Timmothy' and students.last_name = 'Ward' return students.cell_mobile_number",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return students.first_name,students.middle_name,students.last_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Who is the first student to register? List the first name, middle name and last name.",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return students.first_name,students.middle_name,students.last_name order by students.date_first_registered asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return students.first_name,students.middle_name,students.last_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the first, middle, and last name of the first student to register?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return students.first_name,students.middle_name,students.last_name order by students.date_first_registered asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return students.first_name,students.middle_name,students.last_name order by students.date_first_registered asc limit 1",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return students.first_name,students.middle_name,students.last_name order by students.date_left asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return students.first_name,students.middle_name,students.last_name order by students.date_first_registered asc limit 1",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the first, middle, and last name of the earliest school graduate?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return students.first_name,students.middle_name,students.last_name order by students.date_left asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (addresses: ` student_transcripts_tracking.addresses ` ) where addresses.permanent_address_id > 0 return addresses.first_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Whose permanent address is different from his or her current address? List his or her first name.",
        "seq_out": "match (students:`student_transcripts_tracking.students`) where students.current_address_id <> students.permanent_address_id return students.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) where students.permanent_address_id > 0 return students.first_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the first name of the student whose permanent address is different from his or her current one?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) where students.current_address_id <> students.permanent_address_id return students.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` student_transcripts_tracking.addresses ` ) -[ ]- (t2: ` student_transcripts_tracking.students ` ) with t1.current_address_id as current_address_id, count(t1.current_address_id) as count return current_address_id,count order by count desc limit 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`)\nWITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2\nRETURN address_id,line_1,line_2\nORDER BY count DESC\nLIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Which address holds the most number of students currently? List the address id and all lines.",
        "seq_out": "match (t1:`student_transcripts_tracking.addresses`)-[]-(t2:`student_transcripts_tracking.students`) with t1.line_1 as line_1, t1.address_id as address_id, count(t1.address_id) as count, t1.line_2 as line_2 return address_id,line_1,line_2 order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` student_transcripts_tracking.addresses ` ) -[ ]- (t2: ` student_transcripts_tracking.students ` ) with t1.address_id as address_id, t1.line_1 as line_1, t1.line_2 as line_2 return address_id,line_1",
        "query": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`)\nWITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2\nRETURN address_id,line_1,line_2\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the id, line 1, and line 2 of the address with the most students?",
        "seq_out": "match (t1:`student_transcripts_tracking.addresses`)-[]-(t2:`student_transcripts_tracking.students`) with t1.line_1 as line_1, t1.address_id as address_id, count(t1.address_id) as count, t1.line_2 as line_2 return address_id,line_1,line_2 order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (transcripts: ` student_transcripts_tracking.transcripts ` ) return transcripts.date_first_registered,transcripts.other_student_details",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "When is the first transcript released? List the date and details.",
        "seq_out": "match (transcripts:`student_transcripts_tracking.transcripts`) return transcripts.transcript_date,transcripts.other_details order by transcripts.transcript_date asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (semesters: ` student_transcripts_tracking.semesters ` ) return early_semesters.date_first_registered,semesters.other_student_details",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the earliest date of a transcript release, and what details can you tell me?",
        "seq_out": "match (transcripts:`student_transcripts_tracking.transcripts`) return transcripts.transcript_date,transcripts.other_details order by transcripts.transcript_date asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (transcripts: ` student_transcripts_tracking.transcripts ` ) return count(*)",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "question": "How many transcripts are released?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many transcripts are released?",
        "seq_out": "match (transcripts:`student_transcripts_tracking.transcripts`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (transcripts: ` student_transcripts_tracking.transcripts ` ) return count(*)",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "question": "How many transcripts are listed?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many transcripts are listed?",
        "seq_out": "match (transcripts:`student_transcripts_tracking.transcripts`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (transcripts: ` student_transcripts_tracking.transcripts ` ) return transcripts.last_name",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "question": "What is the last transcript release date?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the last transcript release date?",
        "seq_out": "match (transcripts:`student_transcripts_tracking.transcripts`) return transcripts.transcript_date order by transcripts.transcript_date desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (transcripts: ` student_transcripts_tracking.transcripts ` ) return transcripts.last_name order by transcripts.transcript_date desc limit 1",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "question": "When was the last transcript released?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "When was the last transcript released?",
        "seq_out": "match (transcripts:`student_transcripts_tracking.transcripts`) return transcripts.transcript_date order by transcripts.transcript_date desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return count(distinct students.current_address_id)",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "question": "How many different addresses do the students currently live?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "How many different addresses do the students currently live?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return count(distinct students.current_address_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` student_transcripts_tracking.addresses ` ) -[ ]- (t2: ` student_transcripts_tracking.students ` ) return distinct t1.address_id",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "question": "What are the different addresses that have students living there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What are the different addresses that have students living there?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return count(distinct students.current_address_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return students.student_details order by students.student_details desc",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "List all the student details in reversed lexicographical order.",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return students.other_student_details order by students.other_student_details desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (students: ` student_transcripts_tracking.students ` ) return students.other_student_details order by students.other_student_details",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What other details can you tell me about students in reverse alphabetical order?",
        "seq_out": "match (students:`student_transcripts_tracking.students`) return students.other_student_details order by students.other_student_details desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) return sections.section_name",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "question": "Describe the section h.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "Describe the section h.",
        "seq_out": "match (sections:`student_transcripts_tracking.sections`) where sections.section_name = 'h' return sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (sections: ` student_transcripts_tracking.sections ` ) where sections.section_name = 'h' return sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "question": "What is the description for the section named h?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.courses` : course_description , course_id , course_name | :`student_transcripts_tracking.departments` : department_description , department_name , department_id | :`student_transcripts_tracking.degree_programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.student_enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.student_enrolment_courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.transcript_contents` :  | :`student_transcripts_tracking.departments_has_student_transcripts_tracking.degree_programs` :  | :`student_transcripts_tracking.courses_has_student_transcripts_tracking.sections` :  | :`student_transcripts_tracking.addresses_has_student_transcripts_tracking.students` :  | :`student_transcripts_tracking.students_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.semesters_has_student_transcripts_tracking.student_enrolment` :  | :`student_transcripts_tracking.degree_programs_has_student_transcripts_tracking.student_enrolment` :",
        "text_in": "What is the description for the section named h?",
        "seq_out": "match (sections:`student_transcripts_tracking.sections`) where sections.section_name = 'h' return sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) return cartoon.title order by cartoon.title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "question": "List the title of all cartoons in alphabetical order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the title of all cartoons in alphabetical order.",
        "seq_out": "match (cartoon:`tvshow.cartoon`) return cartoon.title order by cartoon.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) return cartoon.title order by cartoon.title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the titles of the cartoons sorted alphabetically?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) return cartoon.title order by cartoon.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) where cartoon.directed_by = 'Ben Jones' return cartoon.directed_by",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List all cartoon directed by \"Ben Jones\".",
        "seq_out": "match (cartoon:`tvshow.cartoon`) where cartoon.directed_by = 'Ben Jones' return cartoon.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) where cartoon.directed_by = 'Ben Jones' return cartoon.title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the names of all cartoons directed by Ben Jones?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) where cartoon.directed_by = 'Ben Jones' return cartoon.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) where cartoon.written_by = 'Joseph Kuhr' return count(*)",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Joseph Kuhr ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Joseph Kuhr ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "How many cartoons were written by \"Joseph Kuhr\"?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) where cartoon.written_by = 'Joseph Kuhr' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) where cartoon.written_by = 'Joseph Kuhr' return count(*)",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Joseph Kuhr ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Joseph Kuhr ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the number of cartoones written by Joseph Kuhr?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) where cartoon.written_by = 'Joseph Kuhr' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) return cartoon.title,cartoon.directed_by order by cartoon.air_date",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title,cartoon.Directed_by\nORDER BY cartoon.Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "list all cartoon titles and their directors ordered by their air date",
        "seq_out": "match (cartoon:`tvshow.cartoon`) return cartoon.title,cartoon.directed_by order by cartoon.original_air_date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) return cartoon.title,cartoon.directed_by order by cartoon.air_date",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title,cartoon.Directed_by\nORDER BY cartoon.Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the name and directors of all the cartoons that are ordered by air date?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) return cartoon.title,cartoon.directed_by order by cartoon.original_air_date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti' return cartoon.title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Brandon Vietti , Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Brandon Vietti , Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "seq_out": "match (cartoon:`tvshow.cartoon`) where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti' return cartoon.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti' return cartoon.title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Brandon Vietti , Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by ( Brandon Vietti , Ben Jones ) , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti' return cartoon.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) with count(tv_channel.country) as count, tv_channel.country as country return country,count order by count desc limit 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(tv_channel.Country) AS count, tv_channel.Country AS Country\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) with count(tv_channel.country) as count, tv_channel.country as country return country,count order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) with count(tv_channel.country) as count, tv_channel.country as country return country,count order by count desc limit 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(tv_channel.Country) AS count, tv_channel.Country AS Country\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the country with the most number of TV Channels and how many does it have?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) with count(tv_channel.country) as count, tv_channel.country as country return country,count order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return count(distinct tv_series.series_name),count(tv_series.content)",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the number of different series names and contents in the TV Channel table.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) return count(distinct tv_channel.series_name),count(distinct tv_channel.content)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return count(distinct tv_series.content)",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "How many different series and contents are listed in the TV Channel table?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) return count(distinct tv_channel.series_name),count(distinct tv_channel.content)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.series_name = 'Sky Radio' return tv_channel.content",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.series_name = 'Sky Radio' return tv_channel.content",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_series ` ) where tv_channel.series_name = 'Sky Radio' return tv_channel.content",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "question": "What is the content of the series Sky Radio?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the content of the series Sky Radio?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.series_name = 'Sky Radio' return tv_channel.content",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.series_name = 'Sky Radio' return tv_channel.package_option",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Package_Option",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option ( Option ) , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option ( Option ) , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.series_name = 'Sky Radio' return tv_channel.package_option",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.series_name = 'Sky Radio' return tv_channel.package_option",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Package_Option",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option ( Option ) , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option ( Option ) , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.series_name = 'Sky Radio' return tv_channel.package_option",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where TV_channel.language = 'English' return count(*)",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "question": "How many TV Channel using language English?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "How many TV Channel using language English?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.language = 'English' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where TV_channel.language = 'English' return count(*)",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "question": "How many TV Channels use the English language?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "How many TV Channels use the English language?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.language = 'English' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) with count(tv_channel.language) as count, tv_channel.language as language return language,count order by count asc limit 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count\nORDER BY count ASC\nLIMIT 1",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) with tv_channel.language as language, count(tv_channel.language) as count return language,count order by count asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) with count(tv_channel.language) as count, tv_channel.language as language return language order by count asc limit 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count\nORDER BY count ASC\nLIMIT 1",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) with tv_channel.language as language, count(tv_channel.language) as count return language,count order by count asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) with count(tv_channel.language) as count, tv_channel.language as language return language,count",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count",
        "question": "List each language and the number of TV Channels using it.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List each language and the number of TV Channels using it.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) with tv_channel.language as language, count(tv_channel.language) as count return language,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) with count(tv_channel.language) as count, tv_channel.language as language return language,count",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count",
        "question": "For each language, list the number of TV Channels that use it.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "For each language, list the number of TV Channels that use it.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) with tv_channel.language as language, count(tv_channel.language) as count return language,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.title = 'The Rise of the blue beetle!' return tv_channel.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title ( The Rise of the Blue Beetle! ) , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title ( The Rise of the Blue Beetle! ) , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.cartoon`) where t2.title = 'The rise of the blue beetle!' return t1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.title = 'The Rise of the blue beetle' return tv_series.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title ( The Rise of the Blue Beetle! ) , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title ( The Rise of the Blue Beetle! ) , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.cartoon`) where t2.title = 'The rise of the blue beetle!' return t1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` tvshow.cartoon ` ) -[ ]- (t2: ` tvshow.tv_channel ` ) where t2.series_name = 'Sky Radio' return t1.title",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Title",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.cartoon`) where t1.series_name = 'Sky Radio' return t2.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` tvshow.cartoon ` ) -[ ]- (t2: ` tvshow.tv_series ` ) where t2.series_name = 'Sky Radio' return t1.title",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Title",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.cartoon`) where t1.series_name = 'Sky Radio' return t2.title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return tv_series.episode order by tv_series.rating",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the Episode of all TV series sorted by rating.",
        "seq_out": "match (tv_series:`tvshow.tv_series`) return tv_series.episode order by tv_series.rating",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return tv_series.episode order by tv_series.rating",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "question": "What are all of the episodes ordered by ratings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are all of the episodes ordered by ratings?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) return tv_series.episode order by tv_series.rating",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return TV_series.episode,tv_series.rating order by TV_series.rating desc limit 3",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "seq_out": "match (tv_series:`tvshow.tv_series`) return tv_series.episode,tv_series.rating order by tv_series.rating desc limit 3",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) with count(tv_series.rating) as count, tv_series.rating as rating return rating,count order by count desc limit 3",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) return tv_series.episode,tv_series.rating order by tv_series.rating desc limit 3",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return min(tv_series.share),max(tv_series.share)",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "question": "What is minimum and maximum share of TV series?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is minimum and maximum share of TV series?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) return max(tv_series.share),min(tv_series.share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) return max(tv_series.share),min(tv_series.share)",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "question": "What is the maximum and minimum share for the TV series?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the maximum and minimum share for the TV series?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) return max(tv_series.share),min(tv_series.share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.episode = 'A Love of a Lifetime' return tv_series.air_date",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) where tv_series.episode = 'A love of a Lifetime' return tv_series.air_date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.episode = 'A Love of a Lifetime' return tv_series.air_date",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "When did the episode \"A Love of a Lifetime\" air?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) where tv_series.episode = 'A love of a Lifetime' return tv_series.air_date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.episode = 'A Love of a Lifetime' return tv_series.weekly_rank",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) where tv_series.episode = 'A love of a Lifetime' return tv_series.weekly_rank",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.episode = 'A Love of a Lifetime' return tv_series.weekly_rank",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "seq_out": "match (tv_series:`tvshow.tv_series`) where tv_series.episode = 'A love of a Lifetime' return tv_series.weekly_rank",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.episode = 'A Love of a Lifetime' return tv_series.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T2.Episode = 'A Love of a Lifetime'\nRETURN T1.series_name",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.tv_series`) where t2.episode = 'A love of a Lifetime' return t1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.episode = 'A Love of a Lifetime' return tv_series.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T2.Episode = 'A Love of a Lifetime'\nRETURN T1.series_name",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode ( A Love of a Lifetime ) , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.tv_series`) where t2.episode = 'A love of a Lifetime' return t1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.series_name = 'Sky Radio' return tv_series.episode",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Episode",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.tv_series`) where t1.series_name = 'Sky Radio' return t2.episode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_series: ` tvshow.tv_series ` ) where tv_series.series_name = 'Sky Radio' return tv_series.episode",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Episode",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name ( Sky Radio ) , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the episode for the TV series named \"Sky Radio\"?",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.tv_series`) where t1.series_name = 'Sky Radio' return t2.episode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) with count(cartoon.directed_by) as count, cartoon.directed_by as directed_by return directed_by,count",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by\nRETURN count,Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "Find the number of cartoons directed by each of the listed directors.",
        "seq_out": "match (cartoon:`tvshow.cartoon`) with count(cartoon.directed_by) as count, cartoon.directed_by as directed_by return count,directed_by",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) with count(cartoon.directed_by) as count, cartoon.directed_by as directed_by return directed_by,count",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by\nRETURN count,Directed_by",
        "question": "How many cartoons did each director create?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "How many cartoons did each director create?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) with count(cartoon.directed_by) as count, cartoon.directed_by as directed_by return count,directed_by",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) return cartoon.production_code,cartoon.channel order by cartoon.original_air_date desc limit 1",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "Find the production code and channel of the most recently aired cartoon .",
        "seq_out": "match (cartoon:`tvshow.cartoon`) return cartoon.production_code,cartoon.channel order by cartoon.original_air_date desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (cartoon: ` tvshow.cartoon ` ) return cartoon.production_code,cartoon.channel order by cartoon.original_air_date desc limit 1",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the produdction code and channel of the most recent cartoon ?",
        "seq_out": "match (cartoon:`tvshow.cartoon`) return cartoon.production_code,cartoon.channel order by cartoon.original_air_date desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.hight_definition_tv = 'Y' return tv_channel.package_option,tv_channel.series_name",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "Find the package choice and series name of the TV channel that has high definition TV.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.hight_definition_tv = 'yes' return tv_channel.package_option,tv_channel.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_series ` ) where tv_channel.hight_definition_tv = 'Yes' return tv_channel.package_option,tv_series.series_name",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option ( Option ) , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option ( Option ) , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.hight_definition_tv = 'yes' return tv_channel.package_option,tv_channel.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.written_by = 'Todd Casey' return tv_channel.country",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Todd Casey ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Todd Casey ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.cartoon`) where t2.written_by = 'Todd Casey' return t1.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` tvshow.tv_channel ` ) -[ ]- (t2: ` tvshow.cartoon ` ) where t2.written_by = 'Todd Casey' return t1.country",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Todd Casey ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by ( Todd Casey ) , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "seq_out": "match (t1:`tvshow.tv_channel`)-[]-(t2:`tvshow.cartoon`) where t2.written_by = 'Todd Casey' return t1.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.language -[ > 'English' return tv_channel.pixel_aspect_ratio_par,tv_channel.country",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.language <> 'English' return tv_channel.pixel_aspect_ratio_par,tv_channel.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (tv_channel: ` tvshow.tv_channel ` ) where tv_channel.language -[ > 'English' return tv_channel.pixel_aspect_ratio_par,tv_channel.country",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` : ",
        "struct_in": "| tvshow | :`tvshow.tv_channel` : country , id , package_option , language ( English ) , hight_definition_tv , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , content | :`tvshow.tv_series` : id , weekly_rank , episode , 18_49_rating_share , rating , share , channel , viewers_m , air_date | :`tvshow.cartoon` : id , title , original_air_date , production_code , written_by , directed_by , channel | :`tvshow.tv_channel_has_tvshow.tv_series` :",
        "text_in": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "seq_out": "match (tv_channel:`tvshow.tv_channel`) where tv_channel.language <> 'English' return tv_channel.pixel_aspect_ratio_par,tv_channel.country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return count(*)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "question": "How many poker players are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "How many poker players are there?",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return count(*)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "question": "Count the number of poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Count the number of poker players.",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.earnings order by poker_player.earnings desc",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "List the earnings of poker players in descending order.",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return poker_player.earnings order by poker_player.earnings desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.earnings order by poker_player.earnings desc",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the earnings of poker players, ordered descending by value?",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return poker_player.earnings order by poker_player.earnings desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.final_table_made,poker_player.best_finish",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "question": "List the final tables made and the best finishes of poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "List the final tables made and the best finishes of poker players.",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return poker_player.final_table_made,poker_player.best_finish",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.final_table_made,poker_player.best_finish",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "question": "What are the final tables made and best finishes for all poker players?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the final tables made and best finishes for all poker players?",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return poker_player.final_table_made,poker_player.best_finish",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return avg(poker_player.earnings)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.Earnings)",
        "question": "What is the average earnings of poker players?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the average earnings of poker players?",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return avg(poker_player.earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return avg(poker_player.earnings)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.Earnings)",
        "question": "Return the average earnings across all poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the average earnings across all poker players.",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return avg(poker_player.earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.money_rank order by poker_player.employments desc limit 1",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the money rank of the poker player with the highest earnings?",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return poker_player.money_rank order by poker_player.earnings desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.money_rank order by poker_player.e earnings desc limit 1",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the money rank of the player with the greatest earnings.",
        "seq_out": "match (poker_player:`poker_player.poker_player`) return poker_player.money_rank order by poker_player.earnings desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) where poker_player.equity -[ 200000 return max(poker_player.final_table_made)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "seq_out": "match (poker_player:`poker_player.poker_player`) where poker_player.earnings < 200000 return max(poker_player.final_table_made)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) where poker_player.equity -[ 200000 return max(poker_player.final_table_made)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "seq_out": "match (poker_player:`poker_player.poker_player`) where poker_player.earnings < 200000 return max(poker_player.final_table_made)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` poker_player.poker_player ` ) -[ ]- (t2: ` poker_player.people ` ) return t2.name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "question": "What are the names of poker players?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names of poker players?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` poker_player.poker_player ` ) -[ ]- (t2: ` poker_player.people ` ) return t2.name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "question": "Return the names of all the poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the names of all the poker players.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) where poker_player.equity > 300000 return poker_player.name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T2.Earnings > 300000\nRETURN T1.Name",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names of poker players whose earnings is higher than 300000?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) where t2.earnings > 300000 return t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) where poker_player.equity > 300000 return poker_player.name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T2.Earnings > 300000\nRETURN T1.Name",
        "question": "Give the names of poker players who have earnings above 300000.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Give the names of poker players who have earnings above 300000.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) where t2.earnings > 300000 return t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.name order by poker_player.final_table_made asc",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "List the names of poker players ordered by the final tables made in ascending order.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.name order by t2.final_table_made",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) with poker_player.name as name, count(poker_player.final_table_made) as count return name order by count asc",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.name order by t2.final_table_made",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` poker_player.poker_player ` ) -[ ]- (t2: ` poker_player.people ` ) return t2.birth_date order by t2.employments limit 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Birth_Date\nORDER BY T2.Earnings ASC\nLIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the birth date of the poker player with the lowest earnings?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.birth_date order by t2.earnings asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` poker_player.poker_player ` ) -[ ]- (t2: ` poker_player.people ` ) return t2.birth_date order by t2.employments limit 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Birth_Date\nORDER BY T2.Earnings ASC\nLIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the birth date of the poker player with the lowest earnings.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.birth_date order by t2.earnings asc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.money_rank order by poker_player.height desc limit 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the money rank of the tallest poker player?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t2.money_rank order by t1.height desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.money_rank order by poker_player.height desc limit 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the money rank of the poker player with the greatest height.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t2.money_rank order by t1.height desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) where poker_player.height > 200 return avg(poker_player.earnings)",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the average earnings of poker players with height higher than 200?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) where t1.height > 200 return avg(t2.earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) where poker_player.height > 200 return avg(poker_player.earnings)",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "question": "Give average earnings of poker players who are taller than 200.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Give average earnings of poker players who are taller than 200.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) where t1.height > 200 return avg(t2.earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.name order by poker_player.equity desc",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names of poker players in descending order of earnings?",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.name order by t2.earnings desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (poker_player: ` poker_player.poker_player ` ) return poker_player.name order by poker_player.equity desc",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the names of poker players sorted by their earnings descending.",
        "seq_out": "match (t1:`poker_player.people`)-[]-(t2:`poker_player.poker_player`) return t1.name order by t2.earnings desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) with people.nationality as nationality, count(people.nationality) as count return nationality,count",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality,count",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are different nationalities of people and the corresponding number of people from each nation?",
        "seq_out": "match (people:`poker_player.people`) with people.nationality as nationality, count(people.nationality) as count return nationality,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) with people.nationality as nationality, count(people.nationality) as count return nationality,count",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality,count",
        "question": "How many people are there of each nationality?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "How many people are there of each nationality?",
        "seq_out": "match (people:`poker_player.people`) with people.nationality as nationality, count(people.nationality) as count return nationality,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) with people.nationality as nationality, count(people.nationality) as count return nationality order by count desc limit 1",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the most common nationality of people?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What is the most common nationality of people?",
        "seq_out": "match (people:`poker_player.people`) with people.nationality as nationality, count(people.nationality) as count return nationality order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) with people.nationality as nationality, count(people.nationality) as count return nationality order by count desc limit 1",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Give the nationality that is most common across all people.",
        "seq_out": "match (people:`poker_player.people`) with people.nationality as nationality, count(people.nationality) as count return nationality order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) with count(*) as count, people.nationality as nationality where count >= 2 return nationality",
        "query": "MATCH (people:`poker_player.people`)\nWITH count(*) AS count, people.Nationality AS Nationality\nWHERE count  >= 2\nRETURN Nationality",
        "question": "What are the nationalities that are shared by at least two people?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the nationalities that are shared by at least two people?",
        "seq_out": "match (people:`poker_player.people`) with count(*) as count, people.nationality as nationality where count >= 2 return nationality",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) with count(*) as count, people.nationality as nationality where count >= 2 return nationality",
        "query": "MATCH (people:`poker_player.people`)\nWITH count(*) AS count, people.Nationality AS Nationality\nWHERE count  >= 2\nRETURN Nationality",
        "question": "Return the nationalities for which there are two or more people.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Return the nationalities for which there are two or more people.",
        "seq_out": "match (people:`poker_player.people`) with count(*) as count, people.nationality as nationality where count >= 2 return nationality",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) return people.name,people.birth_date order by people.name asc",
        "query": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "List the names and birth dates of people in ascending alphabetical order of name.",
        "seq_out": "match (people:`poker_player.people`) return people.name,people.birth_date order by people.name asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) return people.name,people.birth_date order by people.name asc",
        "query": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "seq_out": "match (people:`poker_player.people`) return people.name,people.birth_date order by people.name asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) where people.nationality -[ > 'Russia' return people.name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality ( Russia ) , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality ( Russia ) , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Show names of people whose nationality is not \"Russia\".",
        "seq_out": "match (people:`poker_player.people`) where people.nationality <> 'Russia' return people.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) where people.nationality  < > 'Russia' return people.name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "question": "What are the names of people who are not from Russia?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality ( Russia ) , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality ( Russia ) , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names of people who are not from Russia?",
        "seq_out": "match (people:`poker_player.people`) where people.nationality <> 'Russia' return people.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) where not (people: ` poker_player.people ` ) -[ ]- (: ` poker_player.poker_player ` ) return people.name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "question": "List the names of people that are not poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "List the names of people that are not poker players.",
        "seq_out": "match (people:`poker_player.people`) where not (people:`poker_player.people`)-[]-(:`poker_player.poker_player`) return people.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) where not (people: ` poker_player.people ` ) -[ ]- (: ` poker_player.poker_player ` ) return people.name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "question": "What are the names of people who do not play poker?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "What are the names of people who do not play poker?",
        "seq_out": "match (people:`poker_player.people`) where not (people:`poker_player.people`)-[]-(:`poker_player.poker_player`) return people.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) return count(distinct people.nationality)",
        "query": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "question": "How many distinct nationalities are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "How many distinct nationalities are there?",
        "seq_out": "match (people:`poker_player.people`) return count(distinct people.nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (people: ` poker_player.people ` ) return count(distinct people.nationality)",
        "query": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "question": "Count the number of different nationalities.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : people_id , best_finish , earnings , poker_player_id , money_rank , final_table_made | :`poker_player.people` : name , people_id , nationality , height , birth_date | :`poker_player.people_has_poker_player.poker_player` :",
        "text_in": "Count the number of different nationalities.",
        "seq_out": "match (people:`poker_player.people`) return count(distinct people.nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (area_code_state: ` voter_1.area_code_state ` ) return count(*)",
        "query": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(*)",
        "question": "How many states are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "How many states are there?",
        "seq_out": "match (area_code_state:`voter_1.area_code_state`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (contestants: ` voter_1.contestants ` ) return contestants.contestant_number,contestants.contestant_name order by contestants.contestant_name desc",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nRETURN contestants.contestant_number,contestants.contestant_name\nORDER BY contestants.contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "List the contestant numbers and names, ordered by contestant name descending.",
        "seq_out": "match (contestants:`voter_1.contestants`) return contestants.contestant_number,contestants.contestant_name order by contestants.contestant_name desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (votes: ` voter_1.votes ` ) return votes.vote_id,votes.phone_number,votes.state",
        "query": "MATCH (votes:`voter_1.VOTES`)\nRETURN votes.vote_id,votes.phone_number,votes.state",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "List the vote ids, phone numbers and states of all votes.",
        "seq_out": "match (votes:`voter_1.votes`) return votes.vote_id,votes.phone_number,votes.state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (area_code_state: ` voter_1.area_code_state ` ) return max(area_code_state.area_code),min(area_code_state.area_code)",
        "query": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN max(area_code_state.area_code),min(area_code_state.area_code)",
        "question": "What are the maximum and minimum values of area codes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "What are the maximum and minimum values of area codes?",
        "seq_out": "match (area_code_state:`voter_1.area_code_state`) return max(area_code_state.area_code),min(area_code_state.area_code)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (votes: ` voter_1.votes ` ) where votes.state = 'CA' return votes.created order by votes.created desc limit 1",
        "query": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'CA'\nRETURN max(votes.created)",
        "question": "What is last date created of votes from the state 'CA'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state ( CA ) | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state ( CA )",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state ( CA ) | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state ( CA )",
        "text_in": "What is last date created of votes from the state 'CA'?",
        "seq_out": "match (votes:`voter_1.votes`) where votes.state = 'CA' return max(votes.created)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (contestants: ` voter_1.contestants ` ) where contestants.contestant_name -[ > 'Jessie Alloway' return contestants.contestant_name",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE contestants.contestant_name <> 'Jessie Alloway'\nRETURN contestants.contestant_name",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name ( Jessie Alloway ) | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name ( Jessie Alloway ) | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "seq_out": "match (contestants:`voter_1.contestants`) where contestants.contestant_name <> 'Jessie Alloway' return contestants.contestant_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (votes: ` voter_1.votes ` ) return distinct votes.state,votes.created",
        "query": "MATCH (votes:`voter_1.VOTES`)\nRETURN DISTINCT votes.state,votes.created",
        "question": "What are the distinct states and create time of all votes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "What are the distinct states and create time of all votes?",
        "seq_out": "match (votes:`voter_1.votes`) return distinct votes.state,votes.created",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (votes: ` voter_1.votes ` ) where votes.state = 'NY' or votes.state = 'CA' return count(*)",
        "query": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'NY' OR votes.state = 'CA'\nRETURN count(*)",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.area_code_state` : area_code , state ( NY , CA ) | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state ( NY , CA )",
        "struct_in": "| voter_1 | :`voter_1.area_code_state` : area_code , state ( NY , CA ) | :`voter_1.contestants` : contestant_number , contestant_name | :`voter_1.votes` : created , contestant_number , phone_number , vote_id , state ( NY , CA )",
        "text_in": "What are the number of votes from state 'NY' or 'CA'?",
        "seq_out": "match (votes:`voter_1.votes`) where votes.state = 'NY' or votes.state = 'CA' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return count(*)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "question": "How many conductors are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "How many conductors are there?",
        "seq_out": "match (conductor:`orchestra.conductor`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return count(*)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "question": "Count the number of conductors.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Count the number of conductors.",
        "seq_out": "match (conductor:`orchestra.conductor`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return conductor.name order by conductor.age asc",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "List the names of conductors in ascending order of age.",
        "seq_out": "match (conductor:`orchestra.conductor`) return conductor.name order by conductor.age asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return conductor.name order by conductor.age",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the names of conductors, ordered by age?",
        "seq_out": "match (conductor:`orchestra.conductor`) return conductor.name order by conductor.age asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) where conductor.nationality -[ > 'USA' return conductor.name",
        "query": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality ( USA ) | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality ( USA ) | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the names of conductors whose nationalities are not \"USA\"?",
        "seq_out": "match (conductor:`orchestra.conductor`) where conductor.nationality <> 'USA' return conductor.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) where conductor.nationality -[ > 'USA' return conductor.name",
        "query": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality ( USA ) | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality ( USA ) | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Return the names of conductors that do not have the nationality \"USA\".",
        "seq_out": "match (conductor:`orchestra.conductor`) where conductor.nationality <> 'USA' return conductor.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) return orchestra.record_company order by orchestra.year_of_founded desc",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "seq_out": "match (orchestra:`orchestra.orchestra`) return orchestra.record_company order by orchestra.year_of_founded desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) return orchestra.record_company order by orchestra.year_of_founded desc",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "seq_out": "match (orchestra:`orchestra.orchestra`) return orchestra.record_company order by orchestra.year_of_founded desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (show: ` orchestra.show ` ) return avg(show.attendance)",
        "query": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "question": "What is the average attendance of shows?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What is the average attendance of shows?",
        "seq_out": "match (show:`orchestra.show`) return avg(show.attendance)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (show: ` orchestra.show ` ) return avg(show.attendance)",
        "query": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "question": "Return the average attendance across all shows.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Return the average attendance across all shows.",
        "seq_out": "match (show:`orchestra.show`) return avg(show.attendance)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (performance: ` orchestra.performance ` ) where performance.type -[ > 'Live final' return max(performance.share),min(performance.share)",
        "query": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type ( Live final ) , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type ( Live final ) , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "seq_out": "match (performance:`orchestra.performance`) where performance.type <> 'Live final' return max(performance.share),min(performance.share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (performance: ` orchestra.performance ` ) where performance.type -[ > 'Live final' return max(performance.share),min(performance.share)",
        "query": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type ( Live final ) , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type ( Live final ) , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "seq_out": "match (performance:`orchestra.performance`) where performance.type <> 'Live final' return max(performance.share),min(performance.share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return count(distinct conductor.nationality)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "question": "How many different nationalities do conductors have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "How many different nationalities do conductors have?",
        "seq_out": "match (conductor:`orchestra.conductor`) return count(distinct conductor.nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return count(distinct conductor.nationality)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "question": "Count the number of different nationalities of conductors.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Count the number of different nationalities of conductors.",
        "seq_out": "match (conductor:`orchestra.conductor`) return count(distinct conductor.nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return conductor.name order by conductor.year_of_work desc",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "List names of conductors in descending order of years of work.",
        "seq_out": "match (conductor:`orchestra.conductor`) return conductor.name order by conductor.year_of_work desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.conductor ` ) -[ ]- (t2: ` orchestra.conductor ` ) return t1.name order by t2.year_of_work desc",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "seq_out": "match (conductor:`orchestra.conductor`) return conductor.name order by conductor.year_of_work desc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (conductor: ` orchestra.conductor ` ) return conductor.name order by conductor.year_of_work desc limit 1",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "List the name of the conductor with the most years of work.",
        "seq_out": "match (conductor:`orchestra.conductor`) return conductor.name order by conductor.year_of_work desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.orchestra ` ) -[ ]- (t2: ` orchestra.conductor ` ) return t2.name order by t2.year_of_work desc limit 1",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What is the name of the conductor who has worked the greatest number of years?",
        "seq_out": "match (conductor:`orchestra.conductor`) return conductor.name order by conductor.year_of_work desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.orchestra ` ) -[ ]- (t2: ` orchestra.conductor ` ) return t1.name,t2.orchestral",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nRETURN T1.Name,T2.Orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Show the names of conductors and the orchestras they have conducted.",
        "seq_out": "match (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`) return t1.name,t2.orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.orchestra ` ) -[ ]- (t2: ` orchestra.conductor ` ) return t1.name,t2.name",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nRETURN T1.Name,T2.Orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "seq_out": "match (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`) return t1.name,t2.orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.orchestra ` ) -[ ]- (t2: ` orchestra.conductor ` ) where t2.year_of_founded > 2008 return t2.name",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "seq_out": "match (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`) where t2.year_of_founded > 2008 return t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.orchestra ` ) -[ ]- (t2: ` orchestra.conductor ` ) where t2.year_of_founded > 2008 return t1.name",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "seq_out": "match (t1:`orchestra.conductor`)-[]-(t2:`orchestra.orchestra`) where t2.year_of_founded > 2008 return t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) with count(orchestra.record_company) as count, orchestra.record_company as record_company return record_company,count",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company,count",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Please show the different record companies and the corresponding number of orchestras.",
        "seq_out": "match (orchestra:`orchestra.orchestra`) with orchestra.record_company as record_company, count(orchestra.record_company) as count return record_company,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) with count(orchestra.record_company) as count, orchestra.record_company as record_company return count,record_company",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company,count",
        "question": "How many orchestras does each record company manage?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "How many orchestras does each record company manage?",
        "seq_out": "match (orchestra:`orchestra.orchestra`) with orchestra.record_company as record_company, count(orchestra.record_company) as count return record_company,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) with count(orchestra.orchese) as count, orchestra.orchese as orchestra return orchestra.orchese order by count asc",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format\nRETURN Major_Record_Format\nORDER BY count ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Please show the record formats of orchestras in ascending order of count.",
        "seq_out": "match (orchestra:`orchestra.orchestra`) with count(orchestra.major_record_format) as count, orchestra.major_record_format as major_record_format return major_record_format order by count asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) with count(orchestra.major_record_format) as count, orchestra.major_record_format as major_record_format return major_record_format order by count desc",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format\nRETURN Major_Record_Format\nORDER BY count ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the major record formats of orchestras, sorted by their frequency?",
        "seq_out": "match (orchestra:`orchestra.orchestra`) with count(orchestra.major_record_format) as count, orchestra.major_record_format as major_record_format return major_record_format order by count asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) with count(orchestra.record_company) as count, orchestra.record_company as record_company return record_company order by count desc limit 1",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company\nORDER BY count DESC\nLIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "List the record company shared by the most number of orchestras.",
        "seq_out": "match (orchestra:`orchestra.orchestra`) with orchestra.record_company as record_company, count(orchestra.record_company) as count return record_company order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) with count(orchestra.record_company) as count, orchestra.record_company as record_company return record_company order by count desc limit 1",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What is the record company used by the greatest number of orchestras?",
        "seq_out": "match (orchestra:`orchestra.orchestra`) with orchestra.record_company as record_company, count(orchestra.record_company) as count return record_company order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) where not (orchestra: ` orchestra.orchestra ` ) -[ ]- (: ` orchestra.performance ` ) return orchestra.orchestra",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.Orchestra",
        "question": "List the names of orchestras that have no performance.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "List the names of orchestras that have no performance.",
        "seq_out": "match (orchestra:`orchestra.orchestra`) where not (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`) return orchestra.orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` orchestra.orchestra ` ) -[ ]- (t2: ` orchestra.performance ` ) where not (t3: ` orchestra.orchestra ` ) -[ ]- (t4: ` orchestra.performance ` ) return t1.orchestue",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.Orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "What are the orchestras that do not have any performances?",
        "seq_out": "match (orchestra:`orchestra.orchestra`) where not (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`) return orchestra.orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD' return count(*)",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format ( DVD , CD ) , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format ( DVD , CD ) , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "seq_out": "match (orchestra:`orchestra.orchestra`) where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (orchestra: ` orchestra.orchestra ` ) where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD' return count(*)",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format ( DVD , CD ) , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : age , name , year_of_work , conductor_id , nationality | :`orchestra.orchestra` : orchestra_id , conductor_id , orchestra , major_record_format ( DVD , CD ) , year_of_founded , record_company | :`orchestra.performance` : type , date , orchestra_id , official_ratings_(millions) , weekly_rank , performance_id , share | :`orchestra.show` : if_first_show , performance_id , show_id , result , attendance | :`orchestra.conductor_has_orchestra.orchestra` :  | :`orchestra.orchestra_has_orchestra.performance` :  | :`orchestra.performance_has_orchestra.show` :",
        "text_in": "Count the number of orchestras that have CD or DVD as their record format.",
        "seq_out": "match (orchestra:`orchestra.orchestra`) where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD' return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) return count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "question": "How many high schoolers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "How many high schoolers are there?",
        "seq_out": "match (highschooler:`network_1.highschooler`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) return count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "question": "Count the number of high schoolers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Count the number of high schoolers.",
        "seq_out": "match (highschooler:`network_1.highschooler`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) return highschooler.name,highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "question": "Show the names and grades of each high schooler.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Show the names and grades of each high schooler.",
        "seq_out": "match (highschooler:`network_1.highschooler`) return highschooler.name,highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) return highschooler.name,highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "question": "What are the names and grades for each high schooler?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "What are the names and grades for each high schooler?",
        "seq_out": "match (highschooler:`network_1.highschooler`) return highschooler.name,highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) return distinct highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "question": "Show all the grades of the high schoolers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Show all the grades of the high schoolers.",
        "seq_out": "match (highschooler:`network_1.highschooler`) return highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) return distinct highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "question": "What is the grade of each high schooler?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "What is the grade of each high schooler?",
        "seq_out": "match (highschooler:`network_1.highschooler`) return highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.name = 'Kyle' return highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "question": "What grade is Kyle in?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "What grade is Kyle in?",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.name = 'Kyle' return highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.name = 'Kyle' return highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "question": "Return the grade for the high schooler named Kyle.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Return the grade for the high schooler named Kyle.",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.name = 'Kyle' return highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.grade = 10 return highschooler.name",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "question": "Show the names of all high schoolers in grade 10.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Show the names of all high schoolers in grade 10.",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.grade = 10 return highschooler.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.grade = 10 return highschooler.name",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "question": "What are the names of all high schoolers in grade 10?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "What are the names of all high schoolers in grade 10?",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.grade = 10 return highschooler.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.name = 'Kyle' return highschooler.id",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "question": "Show the ID of the high schooler named Kyle.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Show the ID of the high schooler named Kyle.",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.name = 'Kyle' return highschooler.id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.name = 'Kyle' return highschooler.id",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "question": "What is Kyle's id?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name ( Kyle ) , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "What is Kyle's id?",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.name = 'Kyle' return highschooler.id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.grade = 9 or highschooler.grade = 10 return count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "How many high schoolers are there in grade 9 or 10?",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.grade = 9 or highschooler.grade = 10 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) where highschooler.grade = 9 or highschooler.grade = 10 return count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Count the number of high schoolers in grades 9 or 10.",
        "seq_out": "match (highschooler:`network_1.highschooler`) where highschooler.grade = 9 or highschooler.grade = 10 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) with count(highschooler.grade) as count, highschooler.grade as grade return count,grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "question": "Show the number of high schoolers for each grade.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Show the number of high schoolers for each grade.",
        "seq_out": "match (highschooler:`network_1.highschooler`) with highschooler.grade as grade, count(highschooler.grade) as count return grade,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) with count(highschooler.grade) as count, highschooler.grade as grade return count,grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "question": "How many high schoolers are in each grade?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "How many high schoolers are in each grade?",
        "seq_out": "match (highschooler:`network_1.highschooler`) with highschooler.grade as grade, count(highschooler.grade) as count return grade,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) with count(*) as count, highschooler.grade as grade where count >= 4 return grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "question": "Show me all grades that have at least 4 students.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Show me all grades that have at least 4 students.",
        "seq_out": "match (highschooler:`network_1.highschooler`) with highschooler.grade as grade, count(*) as count where count >= 4 return grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (highschooler: ` network_1.highschooler ` ) with count(*) as count, highschooler.grade as grade where count >= 4 return grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "question": "Which grades have 4 or more high schoolers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.highschooler` : name , grade , id | :`network_1.friend` : friend_id , student_id | :`network_1.likes` : liked_id , student_id",
        "text_in": "Which grades have 4 or more high schoolers?",
        "seq_out": "match (highschooler:`network_1.highschooler`) with highschooler.grade as grade, count(*) as count where count >= 4 return grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) with dogs.owner_id as owner_id, count(dogs.owner_id) as count return owner_id,first_name,last_name order by count desc limit 1",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id\nRETURN owner_id,first_name,last_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "seq_out": "match (t1:`dog_kennels.dogs`)-[]-(t2:`dog_kennels.owners`) with t2.first_name as first_name, t2.last_name as last_name, count(t1.owner_id) as count, t1.owner_id as owner_id return owner_id,first_name,last_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) with dogs.owner_id as owner_id, count(dogs.owner_id) as count return owner_id,first_name,last_name order by count desc limit 1",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id\nRETURN owner_id,first_name,last_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "seq_out": "match (t1:`dog_kennels.dogs`)-[]-(t2:`dog_kennels.owners`) with t2.first_name as first_name, t2.last_name as last_name, count(t1.owner_id) as count, t1.owner_id as owner_id return owner_id,first_name,last_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.treatments ` ) -[ ]- (t2: ` dog_kennels.professionals ` ) with count(*) as count, t2.professional_id as professional_id, t1.role_code as role_code where count >= 2 return professional_id,role_code,first_name",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "seq_out": "match (t1:`dog_kennels.professionals`)-[]-(t2:`dog_kennels.treatments`) with count(*) as count, t1.first_name as first_name, t1.professional_id as professional_id, t1.role_code as role_code where count >= 2 return professional_id,role_code,first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) with count(*) as count, t2.professional_id as professional_id, t1.role_code as role_code where count >= 2 return professional_id,role_code,first_name",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "seq_out": "match (t1:`dog_kennels.professionals`)-[]-(t2:`dog_kennels.treatments`) with count(*) as count, t1.first_name as first_name, t1.professional_id as professional_id, t1.role_code as role_code where count >= 2 return professional_id,role_code,first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) with dogs.breed_name as breed_name, count(dogs.breed_code) as count return breed_name order by count desc limit 1",
        "query": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1.breed_name AS breed_name, count(T1.breed_name) AS count\nRETURN breed_name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What is the name of the breed with the most dogs?",
        "seq_out": "match (t1:`dog_kennels.breeds`)-[]-(t2:`dog_kennels.dogs`) with t1.breed_name as breed_name, count(t1.breed_name) as count return breed_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) with dogs.breed_name as breed_name, count(dogs.breed_code) as count return breed_name order by count desc limit 1",
        "query": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1.breed_name AS breed_name, count(T1.breed_name) AS count\nRETURN breed_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which breed do the most dogs have? Give me the breed name.",
        "seq_out": "match (t1:`dog_kennels.breeds`)-[]-(t2:`dog_kennels.dogs`) with t1.breed_name as breed_name, count(t1.breed_name) as count return breed_name order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) with count(*) as count, t2.professional_id as professional_id, t1.cell_number as cell_number, t1.first_name as first_name where count >= 2 return professional_id,cell_number",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "seq_out": "match (t1:`dog_kennels.professionals`)-[]-(t2:`dog_kennels.treatments`) with count(*) as count, t1.cell_number as cell_number, t1.professional_id as professional_id where count >= 2 return professional_id,cell_number",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) with count(*) as count, t2.professional_id as professional_id, t1.cell_number as cell_number where count >= 2 return professional_id,cell_number",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "seq_out": "match (t1:`dog_kennels.professionals`)-[]-(t2:`dog_kennels.treatments`) with count(*) as count, t1.cell_number as cell_number, t1.professional_id as professional_id where count >= 2 return professional_id,cell_number",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.treatments ` ) -[ ]- (t2: ` dog_kennels.professionals ` ) return t1.date_of_treatment,t2.first_name",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List the date of each treatment, together with the first name of the professional who operated it.",
        "seq_out": "match (t1:`dog_kennels.treatments`)-[]-(t2:`dog_kennels.professionals`) return t1.date_of_treatment,t2.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) return t1.date_of_treatment,t2.first_name",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the date and the operating professional's first name of each treatment?",
        "seq_out": "match (t1:`dog_kennels.treatments`)-[]-(t2:`dog_kennels.professionals`) return t1.date_of_treatment,t2.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (treatments: ` dog_kennels.treatments ` ) return treatments.cost_of_treatment,treatments.treatment_type_description",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`)\nRETURN T1.cost_of_treatment,T2.treatment_type_description",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List the cost of each treatment and the corresponding treatment type description.",
        "seq_out": "match (t1:`dog_kennels.treatments`)-[]-(t2:`dog_kennels.treatment_types`) return t1.cost_of_treatment,t2.treatment_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (treatments: ` dog_kennels.treatments ` ) return treatments.cost_of_treatment,treatments.treatment_type_description",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`)\nRETURN T1.cost_of_treatment,T2.treatment_type_description",
        "question": "What are the cost and treatment type description of each treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the cost and treatment type description of each treatment?",
        "seq_out": "match (t1:`dog_kennels.treatments`)-[]-(t2:`dog_kennels.treatment_types`) return t1.cost_of_treatment,t2.treatment_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) with dogs.first_name as first_name, dogs.last_name as last_name, count(dogs.owner_id) as count return first_name,last_name,size_code",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T1.last_name,T2.size_code",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List each owner's first name, last name, and the size of his for her dog.",
        "seq_out": "match (t1:`dog_kennels.owners`)-[]-(t2:`dog_kennels.dogs`) return t1.first_name,t1.last_name,t2.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return owners.first_name,dogs.last_name,dogs.size_code",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T1.last_name,T2.size_code",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are each owner's first name, last name, and the size of their dog?",
        "seq_out": "match (t1:`dog_kennels.owners`)-[]-(t2:`dog_kennels.dogs`) return t1.first_name,t1.last_name,t2.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return distinct dogs.owner_name,dogs.name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List pairs of the owner's first name and the dogs's name.",
        "seq_out": "match (t1:`dog_kennels.owners`)-[]-(t2:`dog_kennels.dogs`) return t1.first_name,t2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) with owners.first_name as first_name, count(dogs.owner_id) as count return first_name,count",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "question": "What are each owner's first name and their dogs's name?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are each owner's first name and their dogs's name?",
        "seq_out": "match (t1:`dog_kennels.owners`)-[]-(t2:`dog_kennels.dogs`) return t1.first_name,t2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.dogs ` ) -[ ]- (t2: ` dog_kennels.owners ` ) where t2.state = 'Virginia' return t1.first_name,t2.last_name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "seq_out": "match (t1:`dog_kennels.owners`)-[]-(t2:`dog_kennels.dogs`) where t1.state = 'Virginia' return t1.first_name,t2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (owners: ` dog_kennels.owners ` ) where owners.state = 'Virginia' return owners.first_name,owners.last_name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "seq_out": "match (t1:`dog_kennels.owners`)-[]-(t2:`dog_kennels.dogs`) where t1.state = 'Virginia' return t1.first_name,t2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.dogs ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) return t1.date_arrived,t2.date_departed",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "seq_out": "match (t1:`dog_kennels.dogs`)-[]-(t2:`dog_kennels.treatments`) return distinct t1.date_arrived,t1.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.dogs ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) return t1.date_arrived,t2.date_departed",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "seq_out": "match (t1:`dog_kennels.dogs`)-[]-(t2:`dog_kennels.treatments`) return distinct t1.date_arrived,t1.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin' return professionals.email_address",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "seq_out": "match (professionals:`dog_kennels.professionals`) where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin' return professionals.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin' return professionals.email_address",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "seq_out": "match (professionals:`dog_kennels.professionals`) where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin' return professionals.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return dogs.date_arrived,dogs.date_departed",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the arriving date and the departing date of all the dogs?",
        "seq_out": "match (dogs:`dog_kennels.dogs`) return dogs.date_arrived,dogs.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return dogs.date_arrived,dogs.date_departed",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "question": "List the arrival date and the departure date for all the dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List the arrival date and the departure date for all the dogs.",
        "seq_out": "match (dogs:`dog_kennels.dogs`) return dogs.date_arrived,dogs.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.dogs ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) return count(distinct t2.date_of_treatment)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "question": "How many dogs went through any treatments?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How many dogs went through any treatments?",
        "seq_out": "match (treatments:`dog_kennels.treatments`) return count(distinct treatments.dog_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.dogs ` ) -[ ]- (t2: ` dog_kennels.treatments ` ) return count(distinct t2.date_of_treatment)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "question": "Count the number of dogs that went through a treatment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Count the number of dogs that went through a treatment.",
        "seq_out": "match (treatments:`dog_kennels.treatments`) return count(distinct treatments.dog_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.dogs ` ) return count(distinct t2.professional_id)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "question": "How many professionals have performed any treatment to dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How many professionals have performed any treatment to dogs?",
        "seq_out": "match (treatments:`dog_kennels.treatments`) return count(distinct treatments.professional_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.dogs ` ) return count(distinct t2.professional_id)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "question": "Find the number of professionals who have ever treated dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the number of professionals who have ever treated dogs.",
        "seq_out": "match (treatments:`dog_kennels.treatments`) return count(distinct treatments.professional_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) where professionals.city ='.*[west|west] return professionals.role_code,professionals.city,professionals.state",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "seq_out": "match (professionals:`dog_kennels.professionals`) where professionals.city =~'.*[w|w]est.*' return professionals.role_code,professionals.street,professionals.city,professionals.state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) where professionals.street ='.*[west|west] return professionals.role_code,professionals.city,professionals.state",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "seq_out": "match (professionals:`dog_kennels.professionals`) where professionals.city =~'.*[w|w]est.*' return professionals.role_code,professionals.street,professionals.city,professionals.state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (owners: ` dog_kennels.owners ` ) where owners.state ='.*[n|n]on.*' return owners.first_name,owners.last_name,owners.email_address",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "seq_out": "match (owners:`dog_kennels.owners`) where owners.state =~'.*[n|n]orth.*' return owners.first_name,owners.last_name,owners.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (owners: ` dog_kennels.owners ` ) where owners.state ='.*[n|n]on.*' return owners.first_name,owners.last_name,owners.email_address",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "seq_out": "match (owners:`dog_kennels.owners`) where owners.state =~'.*[n|n]orth.*' return owners.first_name,owners.last_name,owners.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (treatments: ` dog_kennels.treatments ` ) return treatments.cost_of_treatment order by treatments.cost_of_treatment desc limit 1",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How much does the most recent treatment cost?",
        "seq_out": "match (treatments:`dog_kennels.treatments`) return treatments.cost_of_treatment order by treatments.date_of_treatment desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (treatments: ` dog_kennels.treatments ` ) return treatments.cost_of_treatment order by treatments.date_of_treatment desc limit 1",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Show me the cost of the most recently performed treatment.",
        "seq_out": "match (treatments:`dog_kennels.treatments`) return treatments.cost_of_treatment order by treatments.date_of_treatment desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) where not (dogs: ` dog_kennels.dogs ` ) -[ ]- (: ` dog_kennels.treatments ` ) return count(*)",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "How many dogs have not gone through any treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How many dogs have not gone through any treatment?",
        "seq_out": "match (dogs:`dog_kennels.dogs`) where not (dogs:`dog_kennels.dogs`)-[]-(:`dog_kennels.treatments`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) where not (dogs: ` dog_kennels.dogs ` ) -[ ]- (: ` dog_kennels.treatments ` ) return count(*)",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Tell me the number of dogs that have not received any treatment .",
        "seq_out": "match (dogs:`dog_kennels.dogs`) where not (dogs:`dog_kennels.dogs`)-[]-(:`dog_kennels.treatments`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) where not (dogs: ` dog_kennels.dogs ` ) -[ ]- (: ` dog_kennels.owners ` ) return count(*)",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`)\nRETURN count(*)",
        "question": "How many owners temporarily do not have any dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How many owners temporarily do not have any dogs?",
        "seq_out": "match (owners:`dog_kennels.owners`) where not (owners:`dog_kennels.owners`)-[]-(:`dog_kennels.dogs`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) where not (dogs: ` dog_kennels.dogs ` ) -[ ]- (: ` dog_kennels.owners ` ) return count(*)",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`)\nRETURN count(*)",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the number of owners who do not own any dogs at this moment.",
        "seq_out": "match (owners:`dog_kennels.owners`) where not (owners:`dog_kennels.owners`)-[]-(:`dog_kennels.dogs`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.professionals ` ) -[ ]- (t2: ` dog_kennels.dogs ` ) where not (t3: ` dog_kennels.dogs ` ) -[ ]- (t4: ` dog_kennels.treatments ` ) return count(*)",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "How many professionals did not operate any treatment on dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How many professionals did not operate any treatment on dogs?",
        "seq_out": "match (professionals:`dog_kennels.professionals`) where not (professionals:`dog_kennels.professionals`)-[]-(:`dog_kennels.treatments`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) where not (professionals: ` dog_kennels.professionals ` ) -[ ]- (: ` dog_kennels.dogs ` ) return count(*)",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "Find the number of professionals who have not treated any dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the number of professionals who have not treated any dogs.",
        "seq_out": "match (professionals:`dog_kennels.professionals`) where not (professionals:`dog_kennels.professionals`)-[]-(:`dog_kennels.treatments`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return dogs.age order by dogs.age desc limit 1",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "question": "What is the age of the oldest dog?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What is the age of the oldest dog?",
        "seq_out": "match (dogs:`dog_kennels.dogs`) return max(dogs.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return dogs.age order by dogs.age desc limit 1",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "question": "Tell me the age of the oldest dog.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Tell me the age of the oldest dog.",
        "seq_out": "match (dogs:`dog_kennels.dogs`) return max(dogs.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (charges: ` dog_kennels.charges ` ) with count(charges.charge_type) as count, charges.charge_amount as charge_amount return charge_type,amount",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How much does each charge type costs? List both charge type and amount.",
        "seq_out": "match (charges:`dog_kennels.charges`) return charges.charge_type,charges.charge_amount",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (charges: ` dog_kennels.charges ` ) return charges.charge_type,charges.charge_amount",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "question": "List each charge type and its amount.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List each charge type and its amount.",
        "seq_out": "match (charges:`dog_kennels.charges`) return charges.charge_type,charges.charge_amount",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (charges: ` dog_kennels.charges ` ) return charges.charge_amount order by charges.charge_amount desc limit 1",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "question": "How much does the most expensive charge type costs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "How much does the most expensive charge type costs?",
        "seq_out": "match (charges:`dog_kennels.charges`) return max(charges.charge_amount)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (charges: ` dog_kennels.charges ` ) return charges.charge_amount order by charges.charge_type desc limit 1",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "question": "What is the charge amount of the most expensive charge type?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What is the charge amount of the most expensive charge type?",
        "seq_out": "match (charges:`dog_kennels.charges`) return max(charges.charge_amount)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) return professionals.email_address,professionals.cell_number,professionals.home_phone",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "List the email, cell phone and home phone of all the professionals.",
        "seq_out": "match (professionals:`dog_kennels.professionals`) return professionals.email_address,professionals.cell_number,professionals.home_phone",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (professionals: ` dog_kennels.professionals ` ) return professionals.email_address,professionals.cell_phone,professionals.home_phone",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "question": "What are the email, cell phone and home phone of each professional?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are the email, cell phone and home phone of each professional?",
        "seq_out": "match (professionals:`dog_kennels.professionals`) return professionals.email_address,professionals.cell_number,professionals.home_phone",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` dog_kennels.breeds ` ) -[ ]- (t2: ` dog_kennels.sizes ` ) return distinct t1.breed_code,t2.size_type",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "question": "What are all the possible breed type and size type combinations?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "What are all the possible breed type and size type combinations?",
        "seq_out": "match (dogs:`dog_kennels.dogs`) return distinct dogs.breed_code,dogs.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (dogs: ` dog_kennels.dogs ` ) return distinct dogs.breed_code,dogs.size_code",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.breeds` : breed_code , breed_name | :`dog_kennels.charges` : charge_id , charge_type , charge_amount | :`dog_kennels.sizes` : size_code , size_description | :`dog_kennels.treatment_types` : treatment_type_description , treatment_type_code | :`dog_kennels.owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.owners_has_dog_kennels.dogs` :  | :`dog_kennels.sizes_has_dog_kennels.dogs` :  | :`dog_kennels.breeds_has_dog_kennels.dogs` :  | :`dog_kennels.dogs_has_dog_kennels.treatments` :  | :`dog_kennels.professionals_has_dog_kennels.treatments` :  | :`dog_kennels.treatment_types_has_dog_kennels.treatments` :",
        "text_in": "Find the distinct breed type and size type combinations for dogs.",
        "seq_out": "match (dogs:`dog_kennels.dogs`) return distinct dogs.breed_code,dogs.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return count(*)",
        "query": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "question": "How many singers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "How many singers are there?",
        "seq_out": "match (singer:`singer.singer`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return count(*)",
        "query": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "question": "What is the count of singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What is the count of singers?",
        "seq_out": "match (singer:`singer.singer`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return singer.name order by singer.net_worth_millions asc",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "List the name of singers in ascending order of net worth.",
        "seq_out": "match (singer:`singer.singer`) return singer.name order by singer.net_worth_millions asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return singer.name order by singer.net_worth_millions asc",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the names of singers ordered by ascending net worth?",
        "seq_out": "match (singer:`singer.singer`) return singer.name order by singer.net_worth_millions asc",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return singer.birth_year,singer.citizenship",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "question": "What are the birth year and citizenship of singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the birth year and citizenship of singers?",
        "seq_out": "match (singer:`singer.singer`) return singer.birth_year,singer.citizenship",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return singer.birth_year,singer.citizenship",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "question": "What are the birth years and citizenships of the singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the birth years and citizenships of the singers?",
        "seq_out": "match (singer:`singer.singer`) return singer.birth_year,singer.citizenship",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) where singer.citizenship -[ > 'France' return singer.name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship ( France ) , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship ( France ) , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "List the name of singers whose citizenship is not \"France\".",
        "seq_out": "match (singer:`singer.singer`) where singer.citizenship <> 'France' return singer.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) where singer. citizenship -[ > 'France' return singer.name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "question": "What are the names of the singers who are not French citizens?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the names of the singers who are not French citizens?",
        "seq_out": "match (singer:`singer.singer`) where singer.citizenship <> 'France' return singer.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) where singer.birth_year = 1948 or singer.birth_year = 1949 return singer.name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "Show the name of singers whose birth year is either 1948 or 1949?",
        "seq_out": "match (singer:`singer.singer`) where singer.birth_year = 1948 or singer.birth_year = 1949 return singer.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) where singer.birth_year = 1948 or singer.birth_year = 1949 return singer.name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "seq_out": "match (singer:`singer.singer`) where singer.birth_year = 1948 or singer.birth_year = 1949 return singer.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return singer.name order by singer.net_worth_millions desc limit 1",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What is the name of the singer with the largest net worth?",
        "seq_out": "match (singer:`singer.singer`) return singer.name order by singer.net_worth_millions desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) return singer.name order by singer.net_worth_millions desc limit 1",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What is the name of the singer who is worth the most?",
        "seq_out": "match (singer:`singer.singer`) return singer.name order by singer.net_worth_millions desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) with count(singer. citizenship) as count, singer.citizenship as citizenship return citizenship,count",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "Show different citizenship of singers and the number of singers of each citizenship.",
        "seq_out": "match (singer:`singer.singer`) with singer.citizenship as citizenship, count(singer.citizenship) as count return citizenship,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) with count(singer. citizenship) as count, singer. citizenship as citizenship return citizenship,count",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "question": "For each citizenship, how many singers are from that country?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "For each citizenship, how many singers are from that country?",
        "seq_out": "match (singer:`singer.singer`) with singer.citizenship as citizenship, count(singer.citizenship) as count return citizenship,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) with count(singer.citizenship) as count, singer.citizenship as citizenship return citizenship order by count desc limit 1",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship\nORDER BY count DESC\nLIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "Please show the most common citizenship of singers.",
        "seq_out": "match (singer:`singer.singer`) with singer.citizenship as citizenship, count(singer.citizenship) as count return citizenship order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) with count(singer.civilihood) as count, singer.civilihood as citizenship return citizenship order by count desc limit 1",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the most common singer citizenship ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What is the most common singer citizenship ?",
        "seq_out": "match (singer:`singer.singer`) with singer.citizenship as citizenship, count(singer.citizenship) as count return citizenship order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (song: ` singer.song ` ) return song.title,song.name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nRETURN T2.Title,T1.Name",
        "question": "Show titles of songs and names of singers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "Show titles of songs and names of singers.",
        "seq_out": "match (t1:`singer.singer`)-[]-(t2:`singer.song`) return t2.title,t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (song: ` singer.song ` ) return song.title,song.name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nRETURN T2.Title,T1.Name",
        "question": "What are the song titles and singer names?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the song titles and singer names?",
        "seq_out": "match (t1:`singer.singer`)-[]-(t2:`singer.song`) return t2.title,t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (song: ` singer.song ` ) where song.sales > 300000 return distinct song.name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "Show distinct names of singers that have songs with sales more than 300000.",
        "seq_out": "match (t1:`singer.singer`)-[]-(t2:`singer.song`) where t2.sales > 300000 return distinct t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (song: ` singer.song ` ) where song.sales > 300000 return distinct song.name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "what are the different names of the singers that have sales more than 300000?",
        "seq_out": "match (t1:`singer.singer`)-[]-(t2:`singer.song`) where t2.sales > 300000 return distinct t1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) with count(*) as count, singer.name as name where count > 1 return name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Show the names of singers that have more than one song.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "Show the names of singers that have more than one song.",
        "seq_out": "match (t1:`singer.singer`)-[]-(t2:`singer.song`) with t1.name as name, count(*) as count where count > 1 return name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (song: ` singer.song ` ) with count(*) as count, song.name as name where count > 1 return name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "What are the names of the singers that have more than one songs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What are the names of the singers that have more than one songs?",
        "seq_out": "match (t1:`singer.singer`)-[]-(t2:`singer.song`) with t1.name as name, count(*) as count where count > 1 return name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (singer: ` singer.singer ` ) where not (singer: ` singer.singer ` ) -[ ]- (: ` singer.song ` ) return singer.name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.Name",
        "question": "List the name of singers that do not have any song.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "List the name of singers that do not have any song.",
        "seq_out": "match (singer:`singer.singer`) where not (singer:`singer.singer`)-[]-(:`singer.song`) return singer.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (song: ` singer.song ` ) where not (song: ` singer.song ` ) -[ ]- (: ` singer.song ` ) return song.name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.Name",
        "question": "What is the sname of every sing that does not have any song?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : name , net_worth_millions , birth_year , citizenship , singer_id | :`singer.song` : title , sales , song_id , highest_position , singer_id | :`singer.singer_has_singer.song` :",
        "text_in": "What is the sname of every sing that does not have any song?",
        "seq_out": "match (singer:`singer.singer`) where not (singer:`singer.singer`)-[]-(:`singer.song`) return singer.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (other_available_features: ` real_estate_properties.other_available_features ` ) return count(*)",
        "query": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`)\nRETURN count(*)",
        "question": "How many available features are there in total?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` :",
        "text_in": "How many available features are there in total?",
        "seq_out": "match (other_available_features:`real_estate_properties.other_available_features`) return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (t1: ` real_estate_properties.other_available_features ` ) -[ ]- (t2: ` real_estate_properties.feature_type_code) where t2.feature_name = 'AirCon' return t1.feature_type_name",
        "query": "MATCH (T1:`real_estate_properties.Other_Available_Features`)-[]-(T2:`real_estate_properties.Ref_Feature_Types`)\nWHERE T1.feature_name = 'AirCon'\nRETURN T2.feature_type_name",
        "question": "What is the feature type name of feature AirCon?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name ( AirCon ) | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name ( AirCon ) | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` :",
        "text_in": "What is the feature type name of feature AirCon?",
        "seq_out": "match (t1:`real_estate_properties.other_available_features`)-[]-(t2:`real_estate_properties.ref_feature_types`) where t1.feature_name = 'AirCon' return t2.feature_type_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (ref_property_types: ` real_estate_properties.ref_property_types ` ) where ref_property_types.property_type_code ='.*[a|a]nternet.*' return ref_property_types.property_type_description",
        "query": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`)\nWITH count(T1.property_type_code) AS count, T2.property_type_description AS property_type_description\nRETURN property_type_description",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` :",
        "text_in": "Show the property type descriptions of properties belonging to that code.",
        "seq_out": "match (t1:`real_estate_properties.properties`)-[]-(t2:`real_estate_properties.ref_property_types`) with count(t1.property_type_code) as count, t2.property_type_description as property_type_description return property_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (property_types: ` real_estate_properties.property_types ` ) where property_types.property_type_code = 'Appartement' or property_types.room_count > 1 return property_types.property_name",
        "query": "MATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'House'\nRETURN properties.property_name  AS property_name \nUNION\nMATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'Apartment' AND properties.room_count > 1\nRETURN properties.property_name  AS property_name",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code ( Apartment , House ) , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code ( Apartment , House ) , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.ref_feature_types` : feature_type_code , feature_type_name | :`real_estate_properties.ref_property_types` : property_type_code ( Apartment , House ) , property_type_description | :`real_estate_properties.other_available_features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code ( Apartment , House ) , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.other_property_features` : property_feature_description | :`real_estate_properties.ref_feature_types_has_real_estate_properties.other_available_features` :  | :`real_estate_properties.ref_property_types_has_real_estate_properties.properties` :",
        "text_in": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "seq_out": "match (properties:`real_estate_properties.properties`) where properties.property_type_code = 'House' return properties.property_name as property_name union match (properties:`real_estate_properties.properties`) where properties.property_type_code = 'Apartment' and properties.room_count > 1 return properties.property_name as property_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    }
]