[
    {
        "db_id": "concert_singer",
        "query": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN max(stadium.Capacity),stadium.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "query": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "query": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "query": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "query": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "query": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "query": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH count(pets.PetType) AS count, pets.PetType AS PetType\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "List the maximum weight and type for each type of pet.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH count(pets.PetType) AS count, pets.PetType AS PetType\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "Find the number of dog pets that are raised by female students (with sex F).",
        "sql_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "pets",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.petid",
                            "T3.petid"
                        ]
                    }
                }
            ],
            "where": {
                "and": [
                    {
                        "eq": [
                            "T1.sex",
                            {
                                "literal": "F"
                            }
                        ]
                    },
                    {
                        "eq": [
                            "T3.pettype",
                            {
                                "literal": "dog"
                            }
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH (T3:`pets_1.Pets`)-[]-(T2:`pets_1.Has_Pet`)-[]-(T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "How many dog pets are raised by female students?",
        "sql_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "pets",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.petid",
                            "T3.petid"
                        ]
                    }
                }
            ],
            "where": {
                "and": [
                    {
                        "eq": [
                            "T1.sex",
                            {
                                "literal": "F"
                            }
                        ]
                    },
                    {
                        "eq": [
                            "T3.pettype",
                            {
                                "literal": "dog"
                            }
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH (T3:`pets_1.Pets`)-[]-(T2:`pets_1.Has_Pet`)-[]-(T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "Find the average weight for each pet type.",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH count(pets.PetType) AS count, pets.PetType AS PetType\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "What is the average weight for each type of pet?",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH count(pets.PetType) AS count, pets.PetType AS PetType\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "Find the average age of students who do not have any pet .",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.558823529411768
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "query": "What is the average age for all students who do not own any pets ?",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.558823529411768
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "How many car makers are there in france?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the number of makers of care in France?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "How many car models are produced in the usa?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the count of the car models produced in the United States?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the number of the cars with horsepower more than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the number of cars with a horsepower greater than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the average weight of cars each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH count(cars_data.Year) AS count, cars_data.Year AS Year\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the average weight and year for each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH count(cars_data.Year) AS count, cars_data.Year AS Year\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the maximum accelerate for different number of cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Cylinders AS Cylinders, count(cars_data.Cylinders) AS count\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "query": "What is the maximum accelerate for all the different cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Cylinders AS Cylinders, count(cars_data.Cylinders) AS count\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "query": "How many flights do we have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "query": "Return the number of flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "query": "How many flights does airline 'JetBlue Airways' have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "query": "Give the number of Jetblue Airways flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "Find the names of employees who never won any award in the evaluation.",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "What are the names of the employees who never received any evaluation?",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "Find the name of the shops that do not hire any employee.",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "Which shops run with no employees? Find the shop names",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "What the smallest version number and its template type code?",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "Return the lowest version number, along with its corresponding template type code.",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "query": "List the most common hometown of teachers.",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH count(teacher.Hometown) AS count, teacher.Hometown AS Hometown\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "query": "What is the most commmon hometowns for teachers?",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH count(teacher.Hometown) AS count, teacher.Hometown AS Hometown\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "query": "Find the average number of staff working for the museums that were open before 2009.",
        "sql_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "num_of_staff"
                }
            },
            "from": "museum",
            "where": {
                "lt": [
                    "open_year",
                    2009
                ]
            }
        },
        "sql_ans": [
            [
                31.333333333333332
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year < 2009\nRETURN avg(museum.Num_of_Staff)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "query": "What is the name of the museum that had no visitor yet?",
        "sql_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "museum",
            "where": {
                "nin": [
                    "Museum_ID",
                    {
                        "select": {
                            "value": "museum_id"
                        },
                        "from": "visit"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Jefferson Development Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE NOT (museum:`museum_visit.museum`)-[:`museum_visit.visit`]-()\nRETURN museum.Name",
        "cypher_ans": [
            [
                "Plaza Museum"
            ],
            [
                "Capital Plaza Museum"
            ],
            [
                "Jefferson Development Museum"
            ],
            [
                "Willow Grande Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ],
            [
                "ZirMed Gateway Museum"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "query": "What are the average and maximum number of tickets bought in all visits?",
        "sql_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "num_of_ticket"
                    }
                },
                {
                    "value": {
                        "max": "num_of_ticket"
                    }
                }
            ],
            "from": "visit"
        },
        "sql_ans": [
            [
                10.5,
                24
            ]
        ],
        "cypher_query": "MATCH ()-[visit:`museum_visit.visit`]-()\nRETURN avg(visit.Num_of_Ticket),max(visit.Num_of_Ticket)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "query": "How many museums were opened after 2013 or before 2008?",
        "sql_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "museum",
            "where": {
                "or": [
                    {
                        "gt": [
                            "open_year",
                            2013
                        ]
                    },
                    {
                        "lt": [
                            "open_year",
                            2008
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year > 2013 OR museum.Open_Year < 2008\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "Find the total number of players.",
        "sql_query": "SELECT count(*) FROM players",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "players"
        },
        "sql_ans": [
            [
                20662
            ]
        ],
        "cypher_query": "MATCH (players:`wta_1.players`)\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "How many players are there?",
        "sql_query": "SELECT count(*) FROM players",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "players"
        },
        "sql_ans": [
            [
                20662
            ]
        ],
        "cypher_query": "MATCH (players:`wta_1.players`)\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "Find the total number of matches.",
        "sql_query": "SELECT count(*) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                278
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "Count the number of matches.",
        "sql_query": "SELECT count(*) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                278
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "Find the average age of losers and winners of all matches.",
        "sql_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "loser_age"
                    }
                },
                {
                    "value": {
                        "avg": "winner_age"
                    }
                }
            ],
            "from": "matches"
        },
        "sql_ans": [
            [
                27.31121386258453,
                27.062177773183823
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN avg(matches.loser_age),avg(matches.winner_age)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "What are the average ages of losers and winners across matches?",
        "sql_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "loser_age"
                    }
                },
                {
                    "value": {
                        "avg": "winner_age"
                    }
                }
            ],
            "from": "matches"
        },
        "sql_ans": [
            [
                27.31121386258453,
                27.062177773183823
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN avg(matches.loser_age),avg(matches.winner_age)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "Find the average rank of winners in all matches.",
        "sql_query": "SELECT avg(winner_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "winner_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                13.715827338129497
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN avg(matches.winner_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "What is the average rank for winners in all matches?",
        "sql_query": "SELECT avg(winner_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "winner_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                13.715827338129497
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN avg(matches.winner_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "Find the highest rank of losers in all matches.",
        "sql_query": "SELECT min(loser_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "min": "loser_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN min(matches.loser_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "What is the best rank of losers across all matches?",
        "sql_query": "SELECT min(loser_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "min": "loser_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nRETURN min(matches.loser_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "List the number of all matches who played in years of 2013 or 2016.",
        "sql_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2013
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2016
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                170
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nWHERE matches.year = 2013 OR matches.year = 2016\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "query": "How many matches were played in 2013 or 2016?",
        "sql_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2013
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2016
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                170
            ]
        ],
        "cypher_query": "MATCH (matches:`wta_1.matches`)\nWHERE matches.year = 2013 OR matches.year = 2016\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "query": "What is the average number of injuries caused each time?",
        "sql_query": "SELECT avg(injured) FROM death",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "injured"
                }
            },
            "from": "death"
        },
        "sql_ans": [
            [
                1.0769230769230769
            ]
        ],
        "cypher_query": "MATCH (death:`battle_death.death`)\nRETURN avg(death.injured)",
        "cypher_ans": [
            [
                1.076923076923077
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "query": "How many battles did not lose any ship with tonnage '225'?",
        "sql_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "battle",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "lost_in_battle"
                        },
                        "from": "ship",
                        "where": {
                            "eq": [
                                "tonnage",
                                {
                                    "literal": "225"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                7
            ]
        ],
        "cypher_query": "MATCH (battle:`battle_death.battle`)\nWHERE NOT (battle:`battle_death.battle`)-[]-(:`battle_death.ship { tonnage : '225' }`)\nRETURN count(*)",
        "cypher_ans": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "query": "How many contestants did not get voted?",
        "sql_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "contestants",
            "where": {
                "nin": [
                    "contestant_number",
                    {
                        "select": {
                            "value": "contestant_number"
                        },
                        "from": "votes"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE NOT (contestants:`voter_1.CONTESTANTS`)-[]-(:`voter_1.VOTES`)\nRETURN count(*)",
        "cypher_ans": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "How many countries have a republic as their form of government?",
        "sql_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "GovernmentForm",
                    "Republic"
                ]
            }
        },
        "sql_ans": [
            [
                122
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.GovernmentForm = 'Republic'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "How many countries have governments that are republics?",
        "sql_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "GovernmentForm",
                    "Republic"
                ]
            }
        },
        "sql_ans": [
            [
                122
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.GovernmentForm = 'Republic'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "Region",
                    "Central Africa"
                ]
            }
        },
        "sql_ans": [
            [
                50.31111111111111
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Region = 'Central Africa'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "How long is the people\u2019s average life expectancy in Central Africa?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "Region",
                    "Central Africa"
                ]
            }
        },
        "sql_ans": [
            [
                50.31111111111111
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Region = 'Central Africa'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "What is the average life expectancy in African countries that are republics?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "and": [
                    {
                        "eq": [
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "eq": [
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                50.84347826086956
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "Give the average life expectancy for countries in Africa which are republics?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "and": [
                    {
                        "eq": [
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "eq": [
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                50.84347826086956
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "What is the total number of languages used in Aruba?",
        "sql_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "T2.Language"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Name",
                    "Aruba"
                ]
            }
        },
        "sql_ans": [
            [
                4
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Aruba'\nRETURN count(T2.Language)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "How many languages are spoken in Aruba?",
        "sql_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "T2.Language"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Name",
                    "Aruba"
                ]
            }
        },
        "sql_ans": [
            [
                4
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Aruba'\nRETURN count(T2.Language)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "How many official languages does Afghanistan have?",
        "sql_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "and": [
                    {
                        "eq": [
                            "T1.Name",
                            "Afghanistan"
                        ]
                    },
                    {
                        "eq": [
                            "IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "How many official languages are spoken in Afghanistan?",
        "sql_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "and": [
                    {
                        "eq": [
                            "T1.Name",
                            "Afghanistan"
                        ]
                    },
                    {
                        "eq": [
                            "IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "how many countries are in Asia?",
        "sql_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "continent",
                    "Asia"
                ]
            }
        },
        "sql_ans": [
            [
                51
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "query": "Count the number of countries in Asia.",
        "sql_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "continent",
                    "Asia"
                ]
            }
        },
        "sql_ans": [
            [
                51
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "query": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(T2.Conductor_ID) AS count, T1.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "query": "What is the name of the conductor who has conducted the most orchestras?",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(T2.Conductor_ID) AS count, T1.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "query": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH count(*) AS count, T1.Year_of_Founded AS Year_of_Founded\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "query": "What are years of founding for orchestras that have had more than a single performance?",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH count(*) AS count, T1.Year_of_Founded AS Year_of_Founded\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "query": "Which grade has the most high schoolers?",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH count(highschooler.grade) AS count, highschooler.grade AS grade\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "query": "Return the grade that has the greatest number of high schoolers.",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH count(highschooler.grade) AS count, highschooler.grade AS grade\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "query": "How many friends does the high school student Kyle have?",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "query": "Count the number of friends Kyle has.",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "query": "How many likes does Kyle have?",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "query": "Return the number of likes that the high schooler named Kyle has.",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "singer",
        "query": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "query": "For each citizenship, what is the maximum net worth?",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    }
]