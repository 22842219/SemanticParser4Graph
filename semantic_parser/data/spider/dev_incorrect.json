[
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN max(stadium.Capacity),stadium.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "parsed_sql": {
            "select": {
                "value": "T2.petid"
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Lname",
                    {
                        "literal": "Smith"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2001
            ]
        ],
        "cypher_query": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "parsed_sql": {
            "select": {
                "value": "T2.petid"
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Lname",
                    {
                        "literal": "Smith"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2001
            ]
        ],
        "cypher_query": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[:`pets_1.Has_Pet`]-()\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.625000000000007
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[:`pets_1.Has_Pet`]-()\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.625000000000007
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Year AS Year, count(cars_data.Year) AS count\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Year AS Year, count(cars_data.Year) AS count\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH count(cars_data.Cylinders) AS count, cars_data.Cylinders AS Cylinders\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH count(cars_data.Cylinders) AS count, cars_data.Cylinders AS Cylinders\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "sql_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "num_of_staff"
                }
            },
            "from": "museum",
            "where": {
                "lt": [
                    "open_year",
                    2009
                ]
            }
        },
        "sql_ans": [
            [
                31.333333333333332
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year < 2009\nRETURN avg(museum.Num_of_Staff)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "sql_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "museum",
            "where": {
                "nin": [
                    "Museum_ID",
                    {
                        "select": {
                            "value": "museum_id"
                        },
                        "from": "visit"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Jefferson Development Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE NOT (museum:`museum_visit.museum`)-[:`museum_visit.visit`]-()\nRETURN museum.Name",
        "cypher_ans": [
            [
                "Plaza Museum"
            ],
            [
                "Capital Plaza Museum"
            ],
            [
                "Jefferson Development Museum"
            ],
            [
                "Willow Grande Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ],
            [
                "ZirMed Gateway Museum"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "sql_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "num_of_ticket"
                    }
                },
                {
                    "value": {
                        "max": "num_of_ticket"
                    }
                }
            ],
            "from": "visit"
        },
        "sql_ans": [
            [
                10.5,
                24
            ]
        ],
        "cypher_query": "MATCH ()-[visit:`museum_visit.visit`]-()\nRETURN avg(visit.Num_of_Ticket),max(visit.Num_of_Ticket)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "sql_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "museum",
            "where": {
                "or": [
                    {
                        "gt": [
                            "open_year",
                            2013
                        ]
                    },
                    {
                        "lt": [
                            "open_year",
                            2008
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year > 2013 OR museum.Open_Year < 2008\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "sql_query": "SELECT avg(injured) FROM death",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "injured"
                }
            },
            "from": "death"
        },
        "sql_ans": [
            [
                1.0769230769230769
            ]
        ],
        "cypher_query": "MATCH (death:`battle_death.death`)\nRETURN avg(death.injured)",
        "cypher_ans": [
            [
                1.076923076923077
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "battle",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "lost_in_battle"
                        },
                        "from": "ship",
                        "where": {
                            "eq": [
                                "tonnage",
                                {
                                    "literal": "225"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                7
            ]
        ],
        "cypher_query": "MATCH (battle:`battle_death.battle`)\nWHERE NOT (battle:`battle_death.battle`)-[]-(:`battle_death.ship { tonnage : '225' }`)\nRETURN count(*)",
        "cypher_ans": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ],
            [
                "1998-11-22 12:18:29",
                15
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH count(*) AS count, T1.transcript_id AS transcript_id, T2.transcript_date AS transcript_date\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "cypher_ans": [
            [
                "2013-06-30 13:01:40",
                null
            ],
            [
                "2010-12-13 10:55:15",
                null
            ],
            [
                "1975-05-06 12:04:47",
                null
            ],
            [
                "1998-11-22 12:18:29",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ],
            [
                "1998-11-22 12:18:29",
                15
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH count(*) AS count, T1.transcript_id AS transcript_id, T2.transcript_date AS transcript_date\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "cypher_ans": [
            [
                "2013-06-30 13:01:40",
                null
            ],
            [
                "2010-12-13 10:55:15",
                null
            ],
            [
                "1975-05-06 12:04:47",
                null
            ],
            [
                "1998-11-22 12:18:29",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "count": "*"
                    }
                },
                {
                    "value": "student_course_id"
                }
            ],
            "from": "Transcript_Contents",
            "groupby": {
                "value": "student_course_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                4,
                0
            ]
        ],
        "cypher_query": "MATCH ()-[transcript_contents:`student_transcripts_tracking.Transcript_Contents`]-()\nWITH count(transcript_contents.student_course_id) AS count, transcript_contents.student_course_id AS student_course_id\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                0,
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "count": "*"
                    }
                },
                {
                    "value": "student_course_id"
                }
            ],
            "from": "Transcript_Contents",
            "groupby": {
                "value": "student_course_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                4,
                0
            ]
        ],
        "cypher_query": "MATCH ()-[transcript_contents:`student_transcripts_tracking.Transcript_Contents`]-()\nWITH count(transcript_contents.student_course_id) AS count, transcript_contents.student_course_id AS student_course_id\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                0,
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "asc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "1975-10-28 15:16:51",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T1.transcript_id AS transcript_id, count(T1.transcript_id) AS count, T2.transcript_date AS transcript_date\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "cypher_ans": [
            [
                "1975-10-28 15:16:51",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "asc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "1975-10-28 15:16:51",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T1.transcript_id AS transcript_id, count(T1.transcript_id) AS count, T2.transcript_date AS transcript_date\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "cypher_ans": [
            [
                "1975-10-28 15:16:51",
                null
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "T2.Earnings"
                }
            },
            "from": [
                {
                    "value": "people",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "poker_player",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T1.Height",
                    200
                ]
            }
        },
        "sql_ans": [
            [
                309445.0
            ]
        ],
        "cypher_query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "T2.Earnings"
                }
            },
            "from": [
                {
                    "value": "people",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "poker_player",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T1.Height",
                    200
                ]
            }
        },
        "sql_ans": [
            [
                309445.0
            ]
        ],
        "cypher_query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "people",
            "where": {
                "nin": [
                    "People_ID",
                    {
                        "select": {
                            "value": "People_ID"
                        },
                        "from": "poker_player"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "cypher_query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "cypher_ans": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "people",
            "where": {
                "nin": [
                    "People_ID",
                    {
                        "select": {
                            "value": "People_ID"
                        },
                        "from": "poker_player"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "cypher_query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "cypher_ans": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "sql_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "contestants",
            "where": {
                "nin": [
                    "contestant_number",
                    {
                        "select": {
                            "value": "contestant_number"
                        },
                        "from": "votes"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE NOT (contestants:`voter_1.CONTESTANTS`)-[]-(:`voter_1.VOTES`)\nRETURN count(*)",
        "cypher_ans": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(T2.Conductor_ID) AS count, T1.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(T2.Conductor_ID) AS count, T1.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH T1.Year_of_Founded AS Year_of_Founded, count(*) AS count\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH T1.Year_of_Founded AS Year_of_Founded, count(*) AS count\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH count(highschooler.grade) AS count, highschooler.grade AS grade\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH count(highschooler.grade) AS count, highschooler.grade AS grade\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Friend",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1101,
                1
            ],
            [
                1247,
                2
            ],
            [
                1304,
                1
            ],
            [
                1316,
                1
            ],
            [
                1381,
                1
            ],
            [
                1468,
                2
            ],
            [
                1501,
                1
            ],
            [
                1510,
                2
            ],
            [
                1661,
                1
            ],
            [
                1689,
                2
            ],
            [
                1709,
                1
            ],
            [
                1782,
                3
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH friend.student_id AS student_id, count(friend.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Friend",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1101,
                1
            ],
            [
                1247,
                2
            ],
            [
                1304,
                1
            ],
            [
                1316,
                1
            ],
            [
                1381,
                1
            ],
            [
                1468,
                2
            ],
            [
                1501,
                1
            ],
            [
                1510,
                2
            ],
            [
                1661,
                1
            ],
            [
                1689,
                2
            ],
            [
                1709,
                1
            ],
            [
                1782,
                3
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH friend.student_id AS student_id, count(friend.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Tiffany",
                1
            ],
            [
                "Kris",
                2
            ],
            [
                "Jessica",
                1
            ],
            [
                "Jordan",
                2
            ],
            [
                "Logan",
                1
            ],
            [
                "Gabriel",
                2
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                3
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Jordan",
                0
            ],
            [
                "Gabriel",
                0
            ],
            [
                "Tiffany",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ],
            [
                "Logan",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Tiffany",
                1
            ],
            [
                "Kris",
                2
            ],
            [
                "Jessica",
                1
            ],
            [
                "Jordan",
                2
            ],
            [
                "Logan",
                1
            ],
            [
                "Gabriel",
                2
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                3
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Jordan",
                0
            ],
            [
                "Gabriel",
                0
            ],
            [
                "Tiffany",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ],
            [
                "Logan",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Jordan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Jordan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    3
                ]
            }
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 3\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    3
                ]
            }
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 3\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": "T3.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                "Jordan"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "cypher_ans": [
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Austin"
            ],
            [
                "Austin"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": "T3.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                "Jordan"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "cypher_ans": [
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Austin"
            ],
            [
                "Austin"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Likes",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1025,
                1
            ],
            [
                1247,
                1
            ],
            [
                1316,
                1
            ],
            [
                1501,
                1
            ],
            [
                1641,
                1
            ],
            [
                1689,
                1
            ],
            [
                1709,
                1
            ],
            [
                1782,
                1
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Likes",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1025,
                1
            ],
            [
                1247,
                1
            ],
            [
                1316,
                1
            ],
            [
                1501,
                1
            ],
            [
                1641,
                1
            ],
            [
                1689,
                1
            ],
            [
                1709,
                1
            ],
            [
                1782,
                1
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "John",
                1
            ],
            [
                "Alexis",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Jessica",
                1
            ],
            [
                "Brittany",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Gabriel",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "Jordan",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "John",
                1
            ],
            [
                "Alexis",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Jessica",
                1
            ],
            [
                "Brittany",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Gabriel",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "Jordan",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "John"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Gabriel"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "John"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Gabriel"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Gabriel"
            ],
            [
                "Cassandra"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Gabriel"
            ],
            [
                "Cassandra"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.grade",
                    5
                ]
            },
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "Alexis"
            ],
            [
                "Kris"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ],
            [
                "Cassandra"
            ],
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ],
            [
                "Logan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.grade",
                    5
                ]
            },
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "Alexis"
            ],
            [
                "Kris"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ],
            [
                "Cassandra"
            ],
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ],
            [
                "Logan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    }
][
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN max(stadium.Capacity),stadium.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH count(concert.Year) AS count, concert.Year AS Year\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH count(concert.Year) AS count, concert.Year AS Year\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "parsed_sql": {
            "select": {
                "value": "T2.petid"
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Lname",
                    {
                        "literal": "Smith"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2001
            ]
        ],
        "cypher_query": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "parsed_sql": {
            "select": {
                "value": "T2.petid"
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Lname",
                    {
                        "literal": "Smith"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2001
            ]
        ],
        "cypher_query": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[:`pets_1.Has_Pet`]-()\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.625000000000007
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[:`pets_1.Has_Pet`]-()\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.625000000000007
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Year AS Year, count(cars_data.Year) AS count\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Year AS Year, count(cars_data.Year) AS count\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH count(cars_data.Cylinders) AS count, cars_data.Cylinders AS Cylinders\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH count(cars_data.Cylinders) AS count, cars_data.Cylinders AS Cylinders\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "sql_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "num_of_staff"
                }
            },
            "from": "museum",
            "where": {
                "lt": [
                    "open_year",
                    2009
                ]
            }
        },
        "sql_ans": [
            [
                31.333333333333332
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year < 2009\nRETURN avg(museum.Num_of_Staff)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "sql_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "museum",
            "where": {
                "nin": [
                    "Museum_ID",
                    {
                        "select": {
                            "value": "museum_id"
                        },
                        "from": "visit"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Jefferson Development Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE NOT (museum:`museum_visit.museum`)-[:`museum_visit.visit`]-()\nRETURN museum.Name",
        "cypher_ans": [
            [
                "Plaza Museum"
            ],
            [
                "Capital Plaza Museum"
            ],
            [
                "Jefferson Development Museum"
            ],
            [
                "Willow Grande Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ],
            [
                "ZirMed Gateway Museum"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "sql_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "num_of_ticket"
                    }
                },
                {
                    "value": {
                        "max": "num_of_ticket"
                    }
                }
            ],
            "from": "visit"
        },
        "sql_ans": [
            [
                10.5,
                24
            ]
        ],
        "cypher_query": "MATCH ()-[visit:`museum_visit.visit`]-()\nRETURN avg(visit.Num_of_Ticket),max(visit.Num_of_Ticket)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "sql_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "museum",
            "where": {
                "or": [
                    {
                        "gt": [
                            "open_year",
                            2013
                        ]
                    },
                    {
                        "lt": [
                            "open_year",
                            2008
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year > 2013 OR museum.Open_Year < 2008\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of players.",
        "sql_query": "SELECT count(*) FROM players",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "players"
        },
        "sql_ans": [
            [
                20662
            ]
        ],
        "cypher_query": "MATCH (players:`wta_1.players`)\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "How many players are there?",
        "sql_query": "SELECT count(*) FROM players",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "players"
        },
        "sql_ans": [
            [
                20662
            ]
        ],
        "cypher_query": "MATCH (players:`wta_1.players`)\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "sql_query": "SELECT count(*) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                278
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Count the number of matches.",
        "sql_query": "SELECT count(*) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                278
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the average age of losers and winners of all matches.",
        "sql_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "loser_age"
                    }
                },
                {
                    "value": {
                        "avg": "winner_age"
                    }
                }
            ],
            "from": "matches"
        },
        "sql_ans": [
            [
                27.31121386258453,
                27.062177773183823
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN avg(matches.loser_age),avg(matches.winner_age)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "sql_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "loser_age"
                    }
                },
                {
                    "value": {
                        "avg": "winner_age"
                    }
                }
            ],
            "from": "matches"
        },
        "sql_ans": [
            [
                27.31121386258453,
                27.062177773183823
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN avg(matches.loser_age),avg(matches.winner_age)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the average rank of winners in all matches.",
        "sql_query": "SELECT avg(winner_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "winner_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                13.715827338129497
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN avg(matches.winner_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "What is the average rank for winners in all matches?",
        "sql_query": "SELECT avg(winner_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "winner_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                13.715827338129497
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN avg(matches.winner_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the highest rank of losers in all matches.",
        "sql_query": "SELECT min(loser_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "min": "loser_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN min(matches.loser_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?",
        "sql_query": "SELECT min(loser_rank) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "min": "loser_rank"
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN min(matches.loser_rank)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "find the number of distinct country codes of all players.",
        "sql_query": "SELECT count(DISTINCT country_code) FROM players",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "country_code"
                        }
                    }
                }
            },
            "from": "players"
        },
        "sql_ans": [
            [
                153
            ]
        ],
        "cypher_query": "MATCH (players:`wta_1.players`)\nRETURN count(DISTINCT players.country_code)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "How many distinct countries do players come from?",
        "sql_query": "SELECT count(DISTINCT country_code) FROM players",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "country_code"
                        }
                    }
                }
            },
            "from": "players"
        },
        "sql_ans": [
            [
                153
            ]
        ],
        "cypher_query": "MATCH (players:`wta_1.players`)\nRETURN count(DISTINCT players.country_code)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of distinct name of losers.",
        "sql_query": "SELECT count(DISTINCT loser_name) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "loser_name"
                        }
                    }
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                49
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN count(DISTINCT matches.loser_name)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "How many different loser names are there?",
        "sql_query": "SELECT count(DISTINCT loser_name) FROM matches",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "loser_name"
                        }
                    }
                }
            },
            "from": "matches"
        },
        "sql_ans": [
            [
                49
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nRETURN count(DISTINCT matches.loser_name)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "sql_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2013
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2016
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                170
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nWHERE matches.year = 2013 OR matches.year = 2016\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "How many matches were played in 2013 or 2016?",
        "sql_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "matches",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2013
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2016
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                170
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nWHERE matches.year = 2013 OR matches.year = 2016\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "sql_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "winner_name"
                        }
                    }
                }
            },
            "from": "matches",
            "where": {
                "and": [
                    {
                        "eq": [
                            "tourney_name",
                            {
                                "literal": "WTA Championships"
                            }
                        ]
                    },
                    {
                        "eq": [
                            "winner_hand",
                            {
                                "literal": "L"
                            }
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nWHERE matches.tourney_name = 'WTA Championships' AND matches.winner_hand = 'L'\nRETURN count(DISTINCT matches.winner_name)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "sql_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "winner_name"
                        }
                    }
                }
            },
            "from": "matches",
            "where": {
                "and": [
                    {
                        "eq": [
                            "tourney_name",
                            {
                                "literal": "WTA Championships"
                            }
                        ]
                    },
                    {
                        "eq": [
                            "winner_hand",
                            {
                                "literal": "L"
                            }
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH ()-[matches:`wta_1.matches`]-()\nWHERE matches.tourney_name = 'WTA Championships' AND matches.winner_hand = 'L'\nRETURN count(DISTINCT matches.winner_name)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "sql_query": "SELECT avg(injured) FROM death",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "injured"
                }
            },
            "from": "death"
        },
        "sql_ans": [
            [
                1.0769230769230769
            ]
        ],
        "cypher_query": "MATCH (death:`battle_death.death`)\nRETURN avg(death.injured)",
        "cypher_ans": [
            [
                1.076923076923077
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "battle",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "lost_in_battle"
                        },
                        "from": "ship",
                        "where": {
                            "eq": [
                                "tonnage",
                                {
                                    "literal": "225"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                7
            ]
        ],
        "cypher_query": "MATCH (battle:`battle_death.battle`)\nWHERE NOT (battle:`battle_death.battle`)-[]-(:`battle_death.ship { tonnage : '225' }`)\nRETURN count(*)",
        "cypher_ans": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ],
            [
                "1998-11-22 12:18:29",
                15
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T1.transcript_id AS transcript_id, count(*) AS count, T2.transcript_date AS transcript_date\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "cypher_ans": [
            [
                "2013-06-30 13:01:40",
                null
            ],
            [
                "2010-12-13 10:55:15",
                null
            ],
            [
                "1975-05-06 12:04:47",
                null
            ],
            [
                "1998-11-22 12:18:29",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ],
            [
                "1998-11-22 12:18:29",
                15
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T1.transcript_id AS transcript_id, count(*) AS count, T2.transcript_date AS transcript_date\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "cypher_ans": [
            [
                "2013-06-30 13:01:40",
                null
            ],
            [
                "2010-12-13 10:55:15",
                null
            ],
            [
                "1975-05-06 12:04:47",
                null
            ],
            [
                "1998-11-22 12:18:29",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "count": "*"
                    }
                },
                {
                    "value": "student_course_id"
                }
            ],
            "from": "Transcript_Contents",
            "groupby": {
                "value": "student_course_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                4,
                0
            ]
        ],
        "cypher_query": "MATCH ()-[transcript_contents:`student_transcripts_tracking.Transcript_Contents`]-()\nWITH transcript_contents.student_course_id AS student_course_id, count(transcript_contents.student_course_id) AS count\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                0,
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "count": "*"
                    }
                },
                {
                    "value": "student_course_id"
                }
            ],
            "from": "Transcript_Contents",
            "groupby": {
                "value": "student_course_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                4,
                0
            ]
        ],
        "cypher_query": "MATCH ()-[transcript_contents:`student_transcripts_tracking.Transcript_Contents`]-()\nWITH transcript_contents.student_course_id AS student_course_id, count(transcript_contents.student_course_id) AS count\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                0,
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "asc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "1975-10-28 15:16:51",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T1.transcript_id AS transcript_id, count(T1.transcript_id) AS count, T2.transcript_date AS transcript_date\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "cypher_ans": [
            [
                "1975-10-28 15:16:51",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "asc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "1975-10-28 15:16:51",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T1.transcript_id AS transcript_id, count(T1.transcript_id) AS count, T2.transcript_date AS transcript_date\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "cypher_ans": [
            [
                "1975-10-28 15:16:51",
                null
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "T2.Earnings"
                }
            },
            "from": [
                {
                    "value": "people",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "poker_player",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T1.Height",
                    200
                ]
            }
        },
        "sql_ans": [
            [
                309445.0
            ]
        ],
        "cypher_query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "T2.Earnings"
                }
            },
            "from": [
                {
                    "value": "people",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "poker_player",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T1.Height",
                    200
                ]
            }
        },
        "sql_ans": [
            [
                309445.0
            ]
        ],
        "cypher_query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "people",
            "where": {
                "nin": [
                    "People_ID",
                    {
                        "select": {
                            "value": "People_ID"
                        },
                        "from": "poker_player"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "cypher_query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "cypher_ans": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "people",
            "where": {
                "nin": [
                    "People_ID",
                    {
                        "select": {
                            "value": "People_ID"
                        },
                        "from": "poker_player"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "cypher_query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "cypher_ans": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "sql_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "contestants",
            "where": {
                "nin": [
                    "contestant_number",
                    {
                        "select": {
                            "value": "contestant_number"
                        },
                        "from": "votes"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE NOT (contestants:`voter_1.CONTESTANTS`)-[]-(:`voter_1.VOTES`)\nRETURN count(*)",
        "cypher_ans": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many countries have a republic as their form of government?",
        "sql_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "GovernmentForm",
                    "Republic"
                ]
            }
        },
        "sql_ans": [
            [
                122
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.GovernmentForm = 'Republic'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many countries have governments that are republics?",
        "sql_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "GovernmentForm",
                    "Republic"
                ]
            }
        },
        "sql_ans": [
            [
                122
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.GovernmentForm = 'Republic'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "Region",
                    "Central Africa"
                ]
            }
        },
        "sql_ans": [
            [
                50.31111111111111
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Region = 'Central Africa'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "Region",
                    "Central Africa"
                ]
            }
        },
        "sql_ans": [
            [
                50.31111111111111
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Region = 'Central Africa'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "and": [
                    {
                        "eq": [
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "eq": [
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                50.84347826086956
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "sql_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "LifeExpectancy"
                }
            },
            "from": "country",
            "where": {
                "and": [
                    {
                        "eq": [
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "eq": [
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                50.84347826086956
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'\nRETURN avg(country.LifeExpectancy)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many unique languages are spoken in the world?",
        "sql_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "LANGUAGE"
                        }
                    }
                }
            },
            "from": "countrylanguage"
        },
        "sql_ans": [
            [
                457
            ]
        ],
        "cypher_query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nRETURN count(DISTINCT countrylanguage.Language)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "What is the number of distinct languages used around the world?",
        "sql_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "LANGUAGE"
                        }
                    }
                }
            },
            "from": "countrylanguage"
        },
        "sql_ans": [
            [
                457
            ]
        ],
        "cypher_query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nRETURN count(DISTINCT countrylanguage.Language)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many type of governments are in Africa?",
        "sql_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "GovernmentForm"
                        }
                    }
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "Continent",
                    "Africa"
                ]
            }
        },
        "sql_ans": [
            [
                10
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Africa'\nRETURN count(DISTINCT country.GovernmentForm)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many different forms of governments are there in Africa?",
        "sql_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "GovernmentForm"
                        }
                    }
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "Continent",
                    "Africa"
                ]
            }
        },
        "sql_ans": [
            [
                10
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Africa'\nRETURN count(DISTINCT country.GovernmentForm)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "sql_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "T2.Language"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Name",
                    "Aruba"
                ]
            }
        },
        "sql_ans": [
            [
                4
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Aruba'\nRETURN count(T2.Language)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many languages are spoken in Aruba?",
        "sql_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "T2.Language"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Name",
                    "Aruba"
                ]
            }
        },
        "sql_ans": [
            [
                4
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Aruba'\nRETURN count(T2.Language)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?",
        "sql_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "and": [
                    {
                        "eq": [
                            "T1.Name",
                            "Afghanistan"
                        ]
                    },
                    {
                        "eq": [
                            "IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "sql_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "and": [
                    {
                        "eq": [
                            "T1.Name",
                            "Afghanistan"
                        ]
                    },
                    {
                        "eq": [
                            "IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "sql_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "Continent"
                        }
                    }
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Language",
                    "Chinese"
                ]
            }
        },
        "sql_ans": [
            [
                4
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.Language = 'Chinese'\nRETURN count(DISTINCT T1.Continent)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "sql_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": {
                        "distinct": {
                            "value": "Continent"
                        }
                    }
                }
            },
            "from": [
                {
                    "value": "country",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "countrylanguage",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Language",
                    "Chinese"
                ]
            }
        },
        "sql_ans": [
            [
                4
            ]
        ],
        "cypher_query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.Language = 'Chinese'\nRETURN count(DISTINCT T1.Continent)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "how many countries are in Asia?",
        "sql_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "continent",
                    "Asia"
                ]
            }
        },
        "sql_ans": [
            [
                51
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "sql_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "country",
            "where": {
                "eq": [
                    "continent",
                    "Asia"
                ]
            }
        },
        "sql_ans": [
            [
                51
            ]
        ],
        "cypher_query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH T1.Name AS Name, count(T2.Conductor_ID) AS count\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH T1.Name AS Name, count(T2.Conductor_ID) AS count\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH T1.Year_of_Founded AS Year_of_Founded, count(*) AS count\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH T1.Year_of_Founded AS Year_of_Founded, count(*) AS count\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Friend",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1101,
                1
            ],
            [
                1247,
                2
            ],
            [
                1304,
                1
            ],
            [
                1316,
                1
            ],
            [
                1381,
                1
            ],
            [
                1468,
                2
            ],
            [
                1501,
                1
            ],
            [
                1510,
                2
            ],
            [
                1661,
                1
            ],
            [
                1689,
                2
            ],
            [
                1709,
                1
            ],
            [
                1782,
                3
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH friend.student_id AS student_id, count(friend.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Friend",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1101,
                1
            ],
            [
                1247,
                2
            ],
            [
                1304,
                1
            ],
            [
                1316,
                1
            ],
            [
                1381,
                1
            ],
            [
                1468,
                2
            ],
            [
                1501,
                1
            ],
            [
                1510,
                2
            ],
            [
                1661,
                1
            ],
            [
                1689,
                2
            ],
            [
                1709,
                1
            ],
            [
                1782,
                3
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH friend.student_id AS student_id, count(friend.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Tiffany",
                1
            ],
            [
                "Kris",
                2
            ],
            [
                "Jessica",
                1
            ],
            [
                "Jordan",
                2
            ],
            [
                "Logan",
                1
            ],
            [
                "Gabriel",
                2
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                3
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name,count",
        "cypher_ans": [
            [
                "Jordan",
                0
            ],
            [
                "Gabriel",
                0
            ],
            [
                "Tiffany",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ],
            [
                "Logan",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Tiffany",
                1
            ],
            [
                "Kris",
                2
            ],
            [
                "Jessica",
                1
            ],
            [
                "Jordan",
                2
            ],
            [
                "Logan",
                1
            ],
            [
                "Gabriel",
                2
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                3
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name,count",
        "cypher_ans": [
            [
                "Jordan",
                0
            ],
            [
                "Gabriel",
                0
            ],
            [
                "Tiffany",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ],
            [
                "Logan",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Jordan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Jordan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    3
                ]
            }
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 3\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    3
                ]
            }
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 3\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": "T3.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                "Jordan"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "cypher_ans": [
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Austin"
            ],
            [
                "Austin"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": "T3.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                "Jordan"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "cypher_ans": [
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Austin"
            ],
            [
                "Austin"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Likes",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1025,
                1
            ],
            [
                1247,
                1
            ],
            [
                1316,
                1
            ],
            [
                1501,
                1
            ],
            [
                1641,
                1
            ],
            [
                1689,
                1
            ],
            [
                1709,
                1
            ],
            [
                1782,
                1
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Likes",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1025,
                1
            ],
            [
                1247,
                1
            ],
            [
                1316,
                1
            ],
            [
                1501,
                1
            ],
            [
                1641,
                1
            ],
            [
                1689,
                1
            ],
            [
                1709,
                1
            ],
            [
                1782,
                1
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "John",
                1
            ],
            [
                "Alexis",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Jessica",
                1
            ],
            [
                "Brittany",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name,count",
        "cypher_ans": [
            [
                "Gabriel",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "Jordan",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "John",
                1
            ],
            [
                "Alexis",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Jessica",
                1
            ],
            [
                "Brittany",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name,count",
        "cypher_ans": [
            [
                "Gabriel",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "Jordan",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "John"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Gabriel"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "John"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(T1.student_id) AS count, T2.name AS name\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Gabriel"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Gabriel"
            ],
            [
                "Cassandra"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Gabriel"
            ],
            [
                "Cassandra"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.grade",
                    5
                ]
            },
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "Alexis"
            ],
            [
                "Kris"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ],
            [
                "Cassandra"
            ],
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ],
            [
                "Logan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.grade",
                    5
                ]
            },
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "Alexis"
            ],
            [
                "Kris"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ],
            [
                "Cassandra"
            ],
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ],
            [
                "Logan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    }
][
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN max(stadium.Capacity),stadium.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "weight"
                    }
                },
                {
                    "value": "petType"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "petType"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                13.4,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "weight"
                    }
                },
                {
                    "value": "pettype"
                }
            ],
            "from": "pets",
            "groupby": {
                "value": "pettype"
            }
        },
        "sql_ans": [
            [
                12.0,
                "cat"
            ],
            [
                11.350000000000001,
                "dog"
            ]
        ],
        "cypher_query": "MATCH (pets:`pets_1.Pets`)\nWITH pets.PetType AS PetType, count(pets.PetType) AS count\nRETURN count,PetType",
        "cypher_ans": [
            [
                1,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "parsed_sql": {
            "select": {
                "value": "T2.petid"
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Lname",
                    {
                        "literal": "Smith"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2001
            ]
        ],
        "cypher_query": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "parsed_sql": {
            "select": {
                "value": "T2.petid"
            },
            "from": [
                {
                    "value": "student",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "has_pet",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T1.Lname",
                    {
                        "literal": "Smith"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                2001
            ]
        ],
        "cypher_query": "MATCH (T1:`pets_1.Student`)-[T2:`pets_1.Has_Pet`]-()\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[:`pets_1.Has_Pet`]-()\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.625000000000007
            ]
        ]
    },
    {
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "sql_query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "age"
                }
            },
            "from": "student",
            "where": {
                "nin": [
                    "stuid",
                    {
                        "select": {
                            "value": "stuid"
                        },
                        "from": "has_pet"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                19.625
            ]
        ],
        "cypher_query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[:`pets_1.Has_Pet`]-()\nRETURN avg(student.Age)",
        "cypher_ans": [
            [
                19.625000000000007
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "CAR_MAKERS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.CountryName",
                    {
                        "literal": "france"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                3
            ]
        ],
        "cypher_query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWHERE T2.CountryName = 'france'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "MODEL_LIST",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "CAR_MAKERS",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "COUNTRIES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.CountryName",
                    {
                        "literal": "usa"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                13
            ]
        ],
        "cypher_query": "MATCH (T3:`car_1.countries`)-[]-(T2:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWHERE T3.CountryName = 'usa'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "sql_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "CARS_DATA",
            "where": {
                "gt": [
                    "horsepower",
                    150
                ]
            }
        },
        "sql_ans": [
            [
                281
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Horsepower > 150\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Year AS Year, count(cars_data.Year) AS count\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "sql_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "Weight"
                    }
                },
                {
                    "value": "YEAR"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "YEAR"
            }
        },
        "sql_ans": [
            [
                3441.3142857142857,
                1970
            ],
            [
                2960.344827586207,
                1971
            ],
            [
                3237.714285714286,
                1972
            ],
            [
                3419.025,
                1973
            ],
            [
                2877.925925925926,
                1974
            ],
            [
                3176.8,
                1975
            ],
            [
                3078.735294117647,
                1976
            ],
            [
                2997.3571428571427,
                1977
            ],
            [
                2861.8055555555557,
                1978
            ],
            [
                3055.344827586207,
                1979
            ],
            [
                2436.655172413793,
                1980
            ],
            [
                2532.1666666666665,
                1981
            ],
            [
                2453.548387096774,
                1982
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Year AS Year, count(cars_data.Year) AS count\nRETURN count,Year",
        "cypher_ans": [
            [
                35,
                1970
            ],
            [
                29,
                1971
            ],
            [
                28,
                1972
            ],
            [
                40,
                1973
            ],
            [
                27,
                1974
            ],
            [
                30,
                1975
            ],
            [
                34,
                1976
            ],
            [
                28,
                1977
            ],
            [
                36,
                1978
            ],
            [
                29,
                1979
            ],
            [
                29,
                1980
            ],
            [
                30,
                1981
            ],
            [
                31,
                1982
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Cylinders AS Cylinders, count(cars_data.Cylinders) AS count\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "sql_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "Accelerate"
                    }
                },
                {
                    "value": "Cylinders"
                }
            ],
            "from": "CARS_DATA",
            "groupby": {
                "value": "Cylinders"
            }
        },
        "sql_ans": [
            [
                13.5,
                3
            ],
            [
                24.8,
                4
            ],
            [
                20.1,
                5
            ],
            [
                21.0,
                6
            ],
            [
                22.2,
                8
            ]
        ],
        "cypher_query": "MATCH (cars_data:`car_1.cars_data`)\nWITH cars_data.Cylinders AS Cylinders, count(cars_data.Cylinders) AS count\nRETURN count,Cylinders",
        "cypher_ans": [
            [
                108,
                8
            ],
            [
                207,
                4
            ],
            [
                84,
                6
            ],
            [
                4,
                3
            ],
            [
                3,
                5
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "FLIGHTS"
        },
        "sql_ans": [
            [
                1200
            ]
        ],
        "cypher_query": "MATCH ()-[flights:`flight_2.flights`]-()\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "sql_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "FLIGHTS",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "AIRLINES",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        },
        "sql_ans": [
            [
                100
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'JetBlue Airways'\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "employee",
            "where": {
                "nin": [
                    "Employee_ID",
                    {
                        "select": {
                            "value": "Employee_ID"
                        },
                        "from": "evaluation"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Mark Regan"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ]
        ],
        "cypher_query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE NOT (employee:`employee_hire_evaluation.employee`)-[]-(:`employee_hire_evaluation.evaluation`)\nRETURN employee.Name",
        "cypher_ans": [
            [
                "George Chuter"
            ],
            [
                "Lee Mears"
            ],
            [
                "Mark Regan"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Tim Payne"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "shop",
            "where": {
                "nin": [
                    "shop_id",
                    {
                        "select": {
                            "value": "shop_id"
                        },
                        "from": "hiring"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "FC Honka"
            ],
            [
                "KuPS"
            ],
            [
                "IFK Mariehamn"
            ]
        ],
        "cypher_query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWHERE NOT (shop:`employee_hire_evaluation.shop`)-[]-(:`employee_hire_evaluation.hiring`)\nRETURN shop.Name",
        "cypher_ans": [
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ],
            [
                "FC Inter"
            ],
            [
                "FF Jaro"
            ],
            [
                "FC KooTeePee"
            ],
            [
                "KuPS"
            ],
            [
                "FC Lahti"
            ],
            [
                "IFK Mariehamn"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "min": "Version_Number"
                    }
                },
                {
                    "value": "template_type_code"
                }
            ],
            "from": "Templates"
        },
        "sql_ans": [
            [
                0,
                "PP"
            ]
        ],
        "cypher_query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN min(templates.Version_Number),templates.Template_Type_Code",
        "cypher_ans": [
            [
                0,
                "PP"
            ],
            [
                2,
                "BK"
            ],
            [
                1,
                "PPT"
            ],
            [
                7,
                "AD"
            ],
            [
                5,
                "CV"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH count(teacher.Hometown) AS count, teacher.Hometown AS Hometown\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Hometown"
            },
            "from": "teacher",
            "groupby": {
                "value": "Hometown"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Turton Urban District"
            ]
        ],
        "cypher_query": "MATCH (teacher:`course_teach.teacher`)\nWITH count(teacher.Hometown) AS count, teacher.Hometown AS Hometown\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Blackrod Urban District"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "sql_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "num_of_staff"
                }
            },
            "from": "museum",
            "where": {
                "lt": [
                    "open_year",
                    2009
                ]
            }
        },
        "sql_ans": [
            [
                31.333333333333332
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year < 2009\nRETURN avg(museum.Num_of_Staff)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "sql_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "museum",
            "where": {
                "nin": [
                    "Museum_ID",
                    {
                        "select": {
                            "value": "museum_id"
                        },
                        "from": "visit"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Jefferson Development Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE NOT (museum:`museum_visit.museum`)-[:`museum_visit.visit`]-()\nRETURN museum.Name",
        "cypher_ans": [
            [
                "Plaza Museum"
            ],
            [
                "Capital Plaza Museum"
            ],
            [
                "Jefferson Development Museum"
            ],
            [
                "Willow Grande Museum"
            ],
            [
                "RiverPark Museum"
            ],
            [
                "Place Tower Museum"
            ],
            [
                "Central City District Residential Museum"
            ],
            [
                "ZirMed Gateway Museum"
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "sql_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "avg": "num_of_ticket"
                    }
                },
                {
                    "value": {
                        "max": "num_of_ticket"
                    }
                }
            ],
            "from": "visit"
        },
        "sql_ans": [
            [
                10.5,
                24
            ]
        ],
        "cypher_query": "MATCH ()-[visit:`museum_visit.visit`]-()\nRETURN avg(visit.Num_of_Ticket),max(visit.Num_of_Ticket)",
        "cypher_ans": [
            [
                null,
                null
            ]
        ]
    },
    {
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "sql_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "museum",
            "where": {
                "or": [
                    {
                        "gt": [
                            "open_year",
                            2013
                        ]
                    },
                    {
                        "lt": [
                            "open_year",
                            2008
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Open_Year > 2013 OR museum.Open_Year < 2008\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "sql_query": "SELECT avg(injured) FROM death",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "injured"
                }
            },
            "from": "death"
        },
        "sql_ans": [
            [
                1.0769230769230769
            ]
        ],
        "cypher_query": "MATCH (death:`battle_death.death`)\nRETURN avg(death.injured)",
        "cypher_ans": [
            [
                1.076923076923077
            ]
        ]
    },
    {
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "battle",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "lost_in_battle"
                        },
                        "from": "ship",
                        "where": {
                            "eq": [
                                "tonnage",
                                {
                                    "literal": "225"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                7
            ]
        ],
        "cypher_query": "MATCH (battle:`battle_death.battle`)\nWHERE NOT (battle:`battle_death.battle`)-[]-(:`battle_death.ship { tonnage : '225' }`)\nRETURN count(*)",
        "cypher_ans": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ],
            [
                "1998-11-22 12:18:29",
                15
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id, count(*) AS count\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "cypher_ans": [
            [
                "2013-06-30 13:01:40",
                null
            ],
            [
                "2010-12-13 10:55:15",
                null
            ],
            [
                "1975-05-06 12:04:47",
                null
            ],
            [
                "1998-11-22 12:18:29",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ],
            [
                "1998-11-22 12:18:29",
                15
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id, count(*) AS count\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "cypher_ans": [
            [
                "2013-06-30 13:01:40",
                null
            ],
            [
                "2010-12-13 10:55:15",
                null
            ],
            [
                "1975-05-06 12:04:47",
                null
            ],
            [
                "1998-11-22 12:18:29",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "count": "*"
                    }
                },
                {
                    "value": "student_course_id"
                }
            ],
            "from": "Transcript_Contents",
            "groupby": {
                "value": "student_course_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                4,
                0
            ]
        ],
        "cypher_query": "MATCH ()-[transcript_contents:`student_transcripts_tracking.Transcript_Contents`]-()\nWITH count(transcript_contents.student_course_id) AS count, transcript_contents.student_course_id AS student_course_id\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                0,
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "count": "*"
                    }
                },
                {
                    "value": "student_course_id"
                }
            ],
            "from": "Transcript_Contents",
            "groupby": {
                "value": "student_course_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                4,
                0
            ]
        ],
        "cypher_query": "MATCH ()-[transcript_contents:`student_transcripts_tracking.Transcript_Contents`]-()\nWITH count(transcript_contents.student_course_id) AS count, transcript_contents.student_course_id AS student_course_id\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                0,
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "asc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "1975-10-28 15:16:51",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH count(T1.transcript_id) AS count, T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "cypher_ans": [
            [
                "1975-10-28 15:16:51",
                null
            ]
        ]
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.transcript_date"
                },
                {
                    "value": "T1.transcript_id"
                }
            ],
            "from": [
                {
                    "value": "Transcript_Contents",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Transcripts",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.transcript_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "asc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "1975-10-28 15:16:51",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`student_transcripts_tracking.Transcript_Contents`]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH count(T1.transcript_id) AS count, T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "cypher_ans": [
            [
                "1975-10-28 15:16:51",
                null
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "parsed_sql": {
            "select": {
                "value": "package_option"
            },
            "from": "TV_Channel",
            "where": {
                "nin": [
                    "id",
                    {
                        "select": {
                            "value": "channel"
                        },
                        "from": "cartoon",
                        "where": {
                            "eq": [
                                "directed_by",
                                {
                                    "literal": "Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "cypher_query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE NOT (tv_channel:`tvshow.TV_Channel`)-[]-(:`tvshow.Cartoon { Directed_by : 'Ben Jones' }`)\nRETURN tv_channel.Package_Option",
        "cypher_ans": [
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Option"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "T2.Earnings"
                }
            },
            "from": [
                {
                    "value": "people",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "poker_player",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T1.Height",
                    200
                ]
            }
        },
        "sql_ans": [
            [
                309445.0
            ]
        ],
        "cypher_query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "parsed_sql": {
            "select": {
                "value": {
                    "avg": "T2.Earnings"
                }
            },
            "from": [
                {
                    "value": "people",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "poker_player",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T1.Height",
                    200
                ]
            }
        },
        "sql_ans": [
            [
                309445.0
            ]
        ],
        "cypher_query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "cypher_ans": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "people",
            "where": {
                "nin": [
                    "People_ID",
                    {
                        "select": {
                            "value": "People_ID"
                        },
                        "from": "poker_player"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "cypher_query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "cypher_ans": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "people",
            "where": {
                "nin": [
                    "People_ID",
                    {
                        "select": {
                            "value": "People_ID"
                        },
                        "from": "poker_player"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "cypher_query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "cypher_ans": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "sql_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "contestants",
            "where": {
                "nin": [
                    "contestant_number",
                    {
                        "select": {
                            "value": "contestant_number"
                        },
                        "from": "votes"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE NOT (contestants:`voter_1.CONTESTANTS`)-[]-(:`voter_1.VOTES`)\nRETURN count(*)",
        "cypher_ans": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(T2.Conductor_ID) AS count, T1.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "conductor",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "orchestra",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Conductor_ID"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Michael Tilson Thomas"
            ]
        ],
        "cypher_query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH count(T2.Conductor_ID) AS count, T1.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Antal Dor\u00e1ti"
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH count(*) AS count, T1.Year_of_Founded AS Year_of_Founded\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "sql_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "Year_of_Founded"
            },
            "from": [
                {
                    "value": "orchestra",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "performance",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.Orchestra_ID"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH (T1:`orchestra.orchestra`)-[]-(T2:`orchestra.performance`)\nWITH count(*) AS count, T1.Year_of_Founded AS Year_of_Founded\nWHERE count  > 1\nRETURN Year_of_Founded",
        "cypher_ans": [
            [
                2003.0
            ],
            [
                2008.0
            ],
            [
                2002.0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "grade"
            },
            "from": "Highschooler",
            "groupby": {
                "value": "grade"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                12
            ]
        ],
        "cypher_query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Friend",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1101,
                1
            ],
            [
                1247,
                2
            ],
            [
                1304,
                1
            ],
            [
                1316,
                1
            ],
            [
                1381,
                1
            ],
            [
                1468,
                2
            ],
            [
                1501,
                1
            ],
            [
                1510,
                2
            ],
            [
                1661,
                1
            ],
            [
                1689,
                2
            ],
            [
                1709,
                1
            ],
            [
                1782,
                3
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH count(friend.student_id) AS count, friend.student_id AS student_id\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Friend",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1101,
                1
            ],
            [
                1247,
                2
            ],
            [
                1304,
                1
            ],
            [
                1316,
                1
            ],
            [
                1381,
                1
            ],
            [
                1468,
                2
            ],
            [
                1501,
                1
            ],
            [
                1510,
                2
            ],
            [
                1661,
                1
            ],
            [
                1689,
                2
            ],
            [
                1709,
                1
            ],
            [
                1782,
                3
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH count(friend.student_id) AS count, friend.student_id AS student_id\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Tiffany",
                1
            ],
            [
                "Kris",
                2
            ],
            [
                "Jessica",
                1
            ],
            [
                "Jordan",
                2
            ],
            [
                "Logan",
                1
            ],
            [
                "Gabriel",
                2
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                3
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Jordan",
                0
            ],
            [
                "Gabriel",
                0
            ],
            [
                "Tiffany",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ],
            [
                "Logan",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Tiffany",
                1
            ],
            [
                "Kris",
                2
            ],
            [
                "Jessica",
                1
            ],
            [
                "Jordan",
                2
            ],
            [
                "Logan",
                1
            ],
            [
                "Gabriel",
                2
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                3
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Jordan",
                0
            ],
            [
                "Gabriel",
                0
            ],
            [
                "Tiffany",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ],
            [
                "Logan",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Jordan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Jordan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    3
                ]
            }
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(*) AS count\nWHERE count  >= 3\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    3
                ]
            }
        },
        "sql_ans": [
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(*) AS count\nWHERE count  >= 3\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": "T3.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                "Jordan"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "cypher_ans": [
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Austin"
            ],
            [
                "Austin"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": "T3.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                "Jordan"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "cypher_ans": [
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jessica"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Austin"
            ],
            [
                "Austin"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Likes",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1025,
                1
            ],
            [
                1247,
                1
            ],
            [
                1316,
                1
            ],
            [
                1501,
                1
            ],
            [
                1641,
                1
            ],
            [
                1689,
                1
            ],
            [
                1709,
                1
            ],
            [
                1782,
                1
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "student_id"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": "Likes",
            "groupby": {
                "value": "student_id"
            }
        },
        "sql_ans": [
            [
                1025,
                1
            ],
            [
                1247,
                1
            ],
            [
                1316,
                1
            ],
            [
                1501,
                1
            ],
            [
                1641,
                1
            ],
            [
                1689,
                1
            ],
            [
                1709,
                1
            ],
            [
                1782,
                1
            ],
            [
                1911,
                1
            ],
            [
                1934,
                1
            ]
        ],
        "cypher_query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "cypher_ans": [
            [
                null,
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "John",
                1
            ],
            [
                "Alexis",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Jessica",
                1
            ],
            [
                "Brittany",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Gabriel",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "Jordan",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            }
        },
        "sql_ans": [
            [
                "John",
                1
            ],
            [
                "Alexis",
                1
            ],
            [
                "Austin",
                1
            ],
            [
                "Jessica",
                1
            ],
            [
                "Brittany",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Cassandra",
                1
            ],
            [
                "Andrew",
                1
            ],
            [
                "Gabriel",
                1
            ],
            [
                "Kyle",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "cypher_ans": [
            [
                "Gabriel",
                0
            ],
            [
                "Cassandra",
                0
            ],
            [
                "Haley",
                0
            ],
            [
                "Andrew",
                0
            ],
            [
                "Kris",
                0
            ],
            [
                "Brittany",
                0
            ],
            [
                "Alexis",
                0
            ],
            [
                "Austin",
                0
            ],
            [
                "Jessica",
                0
            ],
            [
                "Jordan",
                0
            ],
            [
                "John",
                0
            ],
            [
                "Kyle",
                0
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "John"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Gabriel"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "John"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Gabriel"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(*) AS count\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Gabriel"
            ],
            [
                "Cassandra"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(*) AS count\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Gabriel"
            ],
            [
                "Cassandra"
            ],
            [
                "Kris"
            ],
            [
                "Alexis"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.grade",
                    5
                ]
            },
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "Alexis"
            ],
            [
                "Kris"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH T2.name AS name, count(*) AS count\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ],
            [
                "Cassandra"
            ],
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ],
            [
                "Logan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "Friend",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.grade",
                    5
                ]
            },
            "groupby": {
                "value": "T1.student_id"
            },
            "having": {
                "gte": [
                    {
                        "count": "*"
                    },
                    2
                ]
            }
        },
        "sql_ans": [
            [
                "Alexis"
            ],
            [
                "Kris"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Andrew"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH T2.name AS name, count(*) AS count\nWHERE count  >= 2\nRETURN name",
        "cypher_ans": [
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ],
            [
                "Cassandra"
            ],
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ],
            [
                "Jessica"
            ],
            [
                "Kyle"
            ],
            [
                "Logan"
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": [
                {
                    "value": "Likes",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "Highschooler",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T2.name",
                    "Kyle"
                ]
            }
        },
        "sql_ans": [
            [
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN count(*)",
        "cypher_ans": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    }
][][]