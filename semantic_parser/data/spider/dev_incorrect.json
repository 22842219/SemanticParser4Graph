[][][
    {
        "db_id": "singer",
        "question": "How many singers are there?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the count of singers?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "asc"
            }
        },
        "sql_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions ASC",
        "cypher_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "asc"
            }
        },
        "sql_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions ASC",
        "cypher_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Joe Sharp"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Joe Sharp"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.Title"
                },
                {
                    "value": "T1.Name"
                }
            ],
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        },
        "sql_ans": [
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nRETURN T2.Title,T1.Name",
        "cypher_ans": [
            [
                "Do They Know It's Christmas",
                "Joe Sharp"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Joe Sharp"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Cha Cha Slide",
                "Timbaland"
            ],
            [
                "Call on Me",
                "Rose White"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Timbaland"
            ],
            [
                "All This Time",
                "Tribal King"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "John Nizinik"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.Title"
                },
                {
                    "value": "T1.Name"
                }
            ],
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        },
        "sql_ans": [
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nRETURN T2.Title,T1.Name",
        "cypher_ans": [
            [
                "Do They Know It's Christmas",
                "Joe Sharp"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Joe Sharp"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Cha Cha Slide",
                "Timbaland"
            ],
            [
                "Call on Me",
                "Rose White"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Timbaland"
            ],
            [
                "All This Time",
                "Tribal King"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "John Nizinik"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "parsed_sql": {
            "select": {
                "value": {
                    "distinct": {
                        "value": "T1.Name"
                    }
                }
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.Sales",
                    300000
                ]
            }
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ],
            [
                "Rose White"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "parsed_sql": {
            "select": {
                "value": {
                    "distinct": {
                        "value": "T1.Name"
                    }
                }
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.Sales",
                    300000
                ]
            }
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ],
            [
                "Rose White"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.Name"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.Name"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "where": {
                "nin": [
                    "Singer_ID",
                    {
                        "select": {
                            "value": "Singer_ID"
                        },
                        "from": "song"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nWHERE NOT (si:singer)-[]-(:song)\nRETURN si.Name",
        "cypher_ans": [
            [
                "Justin Brown"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "where": {
                "nin": [
                    "Singer_ID",
                    {
                        "select": {
                            "value": "Singer_ID"
                        },
                        "from": "song"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nWHERE NOT (si:singer)-[]-(:song)\nRETURN si.Name",
        "cypher_ans": [
            [
                "Justin Brown"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    }
][
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "sql_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "parsed_sql": {
            "select": [
                {
                    "value": "name"
                },
                {
                    "value": "country"
                },
                {
                    "value": "age"
                }
            ],
            "from": "singer",
            "orderby": {
                "value": "age",
                "sort": "desc"
            }
        },
        "sql_ans": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name,si.Country,si.Age\nORDER BY si.Age DESC",
        "cypher_ans": [
            [
                "Liliane Bettencourt",
                null,
                null
            ],
            [
                "Christy Walton",
                null,
                null
            ],
            [
                "Alice Walton",
                null,
                null
            ],
            [
                "Iris Fontbona",
                null,
                null
            ],
            [
                "Jacqueline Mars",
                null,
                null
            ],
            [
                "Gina Rinehart",
                null,
                null
            ],
            [
                "Susanne Klatten",
                null,
                null
            ],
            [
                "Abigail Johnson",
                null,
                null
            ],
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "sql_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "parsed_sql": {
            "select": [
                {
                    "value": "name"
                },
                {
                    "value": "country"
                },
                {
                    "value": "age"
                }
            ],
            "from": "singer",
            "orderby": {
                "value": "age",
                "sort": "desc"
            }
        },
        "sql_ans": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name,si.Country,si.Age\nORDER BY si.Age DESC",
        "cypher_ans": [
            [
                "Liliane Bettencourt",
                null,
                null
            ],
            [
                "Christy Walton",
                null,
                null
            ],
            [
                "Alice Walton",
                null,
                null
            ],
            [
                "Iris Fontbona",
                null,
                null
            ],
            [
                "Jacqueline Mars",
                null,
                null
            ],
            [
                "Gina Rinehart",
                null,
                null
            ],
            [
                "Susanne Klatten",
                null,
                null
            ],
            [
                "Abigail Johnson",
                null,
                null
            ],
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (st:stadium)\nRETURN max(st.Capacity),st.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWHERE co.Year = 2014 OR co.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWHERE co.Year = 2014 OR co.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:concert)-[]-(T2:stadium)\nWITH T2.Name AS Name, count(T1.Stadium_ID) AS count\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:concert)-[]-(T2:stadium)\nWITH T2.Name AS Name, count(T1.Stadium_ID) AS count\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": "T2.capacity"
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "where": {
                "gte": [
                    "T1.year",
                    2014
                ]
            },
            "groupby": {
                "value": "T2.stadium_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Somerset Park",
                11998
            ]
        ],
        "cypher_query": "MATCH (T1:concert)-[]-(T2:stadium)\nWHERE T1.Year >= 2014\nWITH T2.Capacity AS Capacity, count(T2.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,Capacity\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWITH co.Year AS Year, count(co.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWITH co.Year AS Year, count(co.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (st:stadium)\nWHERE NOT (st:stadium)-[]-(:concert)\nRETURN st.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (st:stadium)\nWHERE NOT (st:stadium)-[]-(:concert)\nRETURN st.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.concert_name"
                },
                {
                    "value": "T2.theme"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T2.concert_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.concert_id"
            }
        },
        "sql_ans": [
            [
                "Auditions",
                "Free choice",
                3
            ],
            [
                "Super bootcamp",
                "Free choice 2",
                2
            ],
            [
                "Home Visits",
                "Bleeding Love",
                1
            ],
            [
                "Week 1",
                "Wide Awake",
                1
            ],
            [
                "Week 1",
                "Happy Tonight",
                2
            ],
            [
                "Week 2",
                "Party All Night",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:concert)\nWITH T2.Theme AS Theme, T2.concert_Name AS concert_Name, count(T2.concert_ID) AS count\nRETURN concert_Name,Theme,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "singer",
        "question": "How many singers are there?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the count of singers?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "asc"
            }
        },
        "sql_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions ASC",
        "cypher_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "asc"
            }
        },
        "sql_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions ASC",
        "cypher_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Joe Sharp"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Joe Sharp"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.Title"
                },
                {
                    "value": "T1.Name"
                }
            ],
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        },
        "sql_ans": [
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nRETURN T2.Title,T1.Name",
        "cypher_ans": [
            [
                "Do They Know It's Christmas",
                "Joe Sharp"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Joe Sharp"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Cha Cha Slide",
                "Timbaland"
            ],
            [
                "Call on Me",
                "Rose White"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Timbaland"
            ],
            [
                "All This Time",
                "Tribal King"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "John Nizinik"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.Title"
                },
                {
                    "value": "T1.Name"
                }
            ],
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        },
        "sql_ans": [
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nRETURN T2.Title,T1.Name",
        "cypher_ans": [
            [
                "Do They Know It's Christmas",
                "Joe Sharp"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Joe Sharp"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Cha Cha Slide",
                "Timbaland"
            ],
            [
                "Call on Me",
                "Rose White"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Timbaland"
            ],
            [
                "All This Time",
                "Tribal King"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "John Nizinik"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "parsed_sql": {
            "select": {
                "value": {
                    "distinct": {
                        "value": "T1.Name"
                    }
                }
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.Sales",
                    300000
                ]
            }
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ],
            [
                "Rose White"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "parsed_sql": {
            "select": {
                "value": {
                    "distinct": {
                        "value": "T1.Name"
                    }
                }
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.Sales",
                    300000
                ]
            }
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ],
            [
                "Rose White"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.Name"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.Name"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "where": {
                "nin": [
                    "Singer_ID",
                    {
                        "select": {
                            "value": "Singer_ID"
                        },
                        "from": "song"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nWHERE NOT (si:singer)-[]-(:song)\nRETURN si.Name",
        "cypher_ans": [
            [
                "Justin Brown"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "where": {
                "nin": [
                    "Singer_ID",
                    {
                        "select": {
                            "value": "Singer_ID"
                        },
                        "from": "song"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nWHERE NOT (si:singer)-[]-(:song)\nRETURN si.Name",
        "cypher_ans": [
            [
                "Justin Brown"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    }
][
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "sql_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "parsed_sql": {
            "select": [
                {
                    "value": "name"
                },
                {
                    "value": "country"
                },
                {
                    "value": "age"
                }
            ],
            "from": "singer",
            "orderby": {
                "value": "age",
                "sort": "desc"
            }
        },
        "sql_ans": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name,si.Country,si.Age\nORDER BY si.Age DESC",
        "cypher_ans": [
            [
                "Liliane Bettencourt",
                null,
                null
            ],
            [
                "Christy Walton",
                null,
                null
            ],
            [
                "Alice Walton",
                null,
                null
            ],
            [
                "Iris Fontbona",
                null,
                null
            ],
            [
                "Jacqueline Mars",
                null,
                null
            ],
            [
                "Gina Rinehart",
                null,
                null
            ],
            [
                "Susanne Klatten",
                null,
                null
            ],
            [
                "Abigail Johnson",
                null,
                null
            ],
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "sql_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "parsed_sql": {
            "select": [
                {
                    "value": "name"
                },
                {
                    "value": "country"
                },
                {
                    "value": "age"
                }
            ],
            "from": "singer",
            "orderby": {
                "value": "age",
                "sort": "desc"
            }
        },
        "sql_ans": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name,si.Country,si.Age\nORDER BY si.Age DESC",
        "cypher_ans": [
            [
                "Liliane Bettencourt",
                null,
                null
            ],
            [
                "Christy Walton",
                null,
                null
            ],
            [
                "Alice Walton",
                null,
                null
            ],
            [
                "Iris Fontbona",
                null,
                null
            ],
            [
                "Jacqueline Mars",
                null,
                null
            ],
            [
                "Gina Rinehart",
                null,
                null
            ],
            [
                "Susanne Klatten",
                null,
                null
            ],
            [
                "Abigail Johnson",
                null,
                null
            ],
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (st:stadium)\nRETURN max(st.Capacity),st.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWHERE co.Year = 2014 OR co.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWHERE co.Year = 2014 OR co.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:concert)-[]-(T2:stadium)\nWITH count(T1.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:concert)-[]-(T2:stadium)\nWITH count(T1.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": "T2.capacity"
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "where": {
                "gte": [
                    "T1.year",
                    2014
                ]
            },
            "groupby": {
                "value": "T2.stadium_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Somerset Park",
                11998
            ]
        ],
        "cypher_query": "MATCH (T1:concert)-[]-(T2:stadium)\nWHERE T1.Year >= 2014\nWITH T2.Capacity AS Capacity, T2.Name AS Name, count(T2.Stadium_ID) AS count\nRETURN Name,Capacity\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWITH count(co.Year) AS count, co.Year AS Year\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (co:concert)\nWITH count(co.Year) AS count, co.Year AS Year\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (st:stadium)\nWHERE NOT (st:stadium)-[]-(:concert)\nRETURN st.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (st:stadium)\nWHERE NOT (st:stadium)-[]-(:concert)\nRETURN st.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.concert_name"
                },
                {
                    "value": "T2.theme"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T2.concert_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.concert_id"
            }
        },
        "sql_ans": [
            [
                "Auditions",
                "Free choice",
                3
            ],
            [
                "Super bootcamp",
                "Free choice 2",
                2
            ],
            [
                "Home Visits",
                "Bleeding Love",
                1
            ],
            [
                "Week 1",
                "Wide Awake",
                1
            ],
            [
                "Week 1",
                "Happy Tonight",
                2
            ],
            [
                "Week 2",
                "Party All Night",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:concert)\nWITH T2.Theme AS Theme, T2.concert_Name AS concert_Name, count(T2.concert_ID) AS count\nRETURN concert_Name,Theme,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "singer",
        "question": "How many singers are there?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the count of singers?",
        "sql_query": "SELECT count(*) FROM singer",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "singer"
        },
        "sql_ans": [
            [
                8
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN count(*)",
        "cypher_ans": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "asc"
            }
        },
        "sql_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions ASC",
        "cypher_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "asc"
            }
        },
        "sql_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions ASC",
        "cypher_ans": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "Rose White"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Joe Sharp"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "orderby": {
                "value": "Net_Worth_Millions",
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nRETURN si.Name\nORDER BY si.Net_Worth_Millions DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "Joe Sharp"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.Title"
                },
                {
                    "value": "T1.Name"
                }
            ],
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        },
        "sql_ans": [
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nRETURN T2.Title,T1.Name",
        "cypher_ans": [
            [
                "Do They Know It's Christmas",
                "Joe Sharp"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Joe Sharp"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Cha Cha Slide",
                "Timbaland"
            ],
            [
                "Call on Me",
                "Rose White"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Timbaland"
            ],
            [
                "All This Time",
                "Tribal King"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "John Nizinik"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.Title"
                },
                {
                    "value": "T1.Name"
                }
            ],
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        },
        "sql_ans": [
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nRETURN T2.Title,T1.Name",
        "cypher_ans": [
            [
                "Do They Know It's Christmas",
                "Joe Sharp"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Joe Sharp"
            ],
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Cha Cha Slide",
                "Timbaland"
            ],
            [
                "Call on Me",
                "Rose White"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Timbaland"
            ],
            [
                "All This Time",
                "Tribal King"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Left Outside Alone",
                "John Nizinik"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "parsed_sql": {
            "select": {
                "value": {
                    "distinct": {
                        "value": "T1.Name"
                    }
                }
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.Sales",
                    300000
                ]
            }
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ],
            [
                "Rose White"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "parsed_sql": {
            "select": {
                "value": {
                    "distinct": {
                        "value": "T1.Name"
                    }
                }
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where": {
                "gt": [
                    "T2.Sales",
                    300000
                ]
            }
        },
        "sql_ans": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ],
            [
                "Rose White"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.Name"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "parsed_sql": {
            "select": {
                "value": "T1.Name"
            },
            "from": [
                {
                    "value": "singer",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "song",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.Name"
            },
            "having": {
                "gt": [
                    {
                        "count": "*"
                    },
                    1
                ]
            }
        },
        "sql_ans": [
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ],
        "cypher_query": "MATCH (T1:singer)-[]-(T2:song)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "cypher_ans": [
            [
                "Joe Sharp"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Timbaland"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "where": {
                "nin": [
                    "Singer_ID",
                    {
                        "select": {
                            "value": "Singer_ID"
                        },
                        "from": "song"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nWHERE NOT (si:singer)-[]-(:song)\nRETURN si.Name",
        "cypher_ans": [
            [
                "Justin Brown"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "parsed_sql": {
            "select": {
                "value": "Name"
            },
            "from": "singer",
            "where": {
                "nin": [
                    "Singer_ID",
                    {
                        "select": {
                            "value": "Singer_ID"
                        },
                        "from": "song"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "cypher_query": "MATCH (si:singer)\nWHERE NOT (si:singer)-[]-(:song)\nRETURN si.Name",
        "cypher_ans": [
            [
                "Justin Brown"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    }
][][][][][][][][][][][][][
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN max(stadium.Capacity),stadium.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWITH T2.Name AS Name, count(T1.Stadium_ID) AS count\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWITH T2.Name AS Name, count(T1.Stadium_ID) AS count\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": "T2.capacity"
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "where": {
                "gte": [
                    "T1.year",
                    2014
                ]
            },
            "groupby": {
                "value": "T2.stadium_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Somerset Park",
                11998
            ]
        ],
        "cypher_query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWHERE T1.Year >= 2014\nWITH T2.Name AS Name, count(T2.Stadium_ID) AS count, T2.Capacity AS Capacity\nRETURN Name,Capacity\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH count(concert.Year) AS count, concert.Year AS Year\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH count(concert.Year) AS count, concert.Year AS Year\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.concert_name"
                },
                {
                    "value": "T2.theme"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T2.concert_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.concert_id"
            }
        },
        "sql_ans": [
            [
                "Auditions",
                "Free choice",
                3
            ],
            [
                "Super bootcamp",
                "Free choice 2",
                2
            ],
            [
                "Home Visits",
                "Bleeding Love",
                1
            ],
            [
                "Week 1",
                "Wide Awake",
                1
            ],
            [
                "Week 1",
                "Happy Tonight",
                2
            ],
            [
                "Week 2",
                "Party All Night",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.concert`)\nWITH T2.concert_Name AS concert_Name, T2.Theme AS Theme, count(T2.concert_ID) AS count\nRETURN concert_Name,Theme,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)-[]-(T3:`concert_singer.concert`)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)-[]-(T3:`concert_singer.concert`)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    }
][
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql_query": "select max(capacity), average from stadium",
        "parsed_sql": {
            "select": [
                {
                    "value": {
                        "max": "capacity"
                    }
                },
                {
                    "value": "average"
                }
            ],
            "from": "stadium"
        },
        "sql_ans": [
            [
                52500,
                730
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN max(stadium.Capacity),stadium.Average",
        "cypher_ans": [
            [
                10104,
                2106
            ],
            [
                11998,
                1477
            ],
            [
                2000,
                864
            ],
            [
                52500,
                730
            ],
            [
                3808,
                642
            ],
            [
                4125,
                638
            ],
            [
                3100,
                637
            ],
            [
                4000,
                615
            ],
            [
                3960,
                552
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "parsed_sql": {
            "select": {
                "value": {
                    "count": "*"
                }
            },
            "from": "concert",
            "where": {
                "or": [
                    {
                        "eq": [
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq": [
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        },
        "sql_ans": [
            [
                6
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWHERE concert.Year = 2014 OR concert.Year = 2015\nRETURN count(*)",
        "cypher_ans": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWITH count(T1.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T1.stadium_id"
            }
        },
        "sql_ans": [
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ],
            [
                "Recreation Park",
                1
            ],
            [
                "Balmoor",
                1
            ]
        ],
        "cypher_query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWITH count(T1.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": "T2.capacity"
                }
            ],
            "from": [
                {
                    "value": "concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "stadium",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "where": {
                "gte": [
                    "T1.year",
                    2014
                ]
            },
            "groupby": {
                "value": "T2.stadium_id"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "Somerset Park",
                11998
            ]
        ],
        "cypher_query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWHERE T1.Year >= 2014\nWITH count(T2.Stadium_ID) AS count, T2.Capacity AS Capacity, T2.Name AS Name\nRETURN Name,Capacity\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "parsed_sql": {
            "select": {
                "value": "YEAR"
            },
            "from": "concert",
            "groupby": {
                "value": "YEAR"
            },
            "orderby": {
                "value": {
                    "count": "*"
                },
                "sort": "desc"
            },
            "limit": 1
        },
        "sql_ans": [
            [
                "2015"
            ]
        ],
        "cypher_query": "MATCH (concert:`concert_singer.concert`)\nWITH concert.Year AS Year, count(concert.Year) AS count\nRETURN Year\nORDER BY count DESC\nLIMIT 1",
        "cypher_ans": [
            [
                "2014"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "parsed_sql": {
            "select": {
                "value": "name"
            },
            "from": "stadium",
            "where": {
                "nin": [
                    "stadium_id",
                    {
                        "select": {
                            "value": "stadium_id"
                        },
                        "from": "concert"
                    }
                ]
            }
        },
        "sql_ans": [
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ]
        ],
        "cypher_query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE NOT (stadium:`concert_singer.stadium`)-[]-(:`concert_singer.concert`)\nRETURN stadium.Name",
        "cypher_ans": [
            [
                "Stark's Park"
            ],
            [
                "Somerset Park"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ],
            [
                "Gayfield Park"
            ],
            [
                "Recreation Park"
            ],
            [
                "Balmoor"
            ],
            [
                "Glebe Park"
            ]
        ]
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.concert_name"
                },
                {
                    "value": "T2.theme"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T2.concert_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.concert_id"
            }
        },
        "sql_ans": [
            [
                "Auditions",
                "Free choice",
                3
            ],
            [
                "Super bootcamp",
                "Free choice 2",
                2
            ],
            [
                "Home Visits",
                "Bleeding Love",
                1
            ],
            [
                "Week 1",
                "Wide Awake",
                1
            ],
            [
                "Week 1",
                "Happy Tonight",
                2
            ],
            [
                "Week 2",
                "Party All Night",
                1
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.concert`)\nWITH count(T2.concert_ID) AS count, T2.concert_Name AS concert_Name, T2.Theme AS Theme\nRETURN concert_Name,Theme,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)\nWITH T2.Name AS Name, count(T2.Singer_ID) AS count\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "parsed_sql": {
            "select": [
                {
                    "value": "T2.name"
                },
                {
                    "value": {
                        "count": "*"
                    }
                }
            ],
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby": {
                "value": "T2.singer_id"
            }
        },
        "sql_ans": [
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ],
            [
                "John Nizinik",
                2
            ],
            [
                "Tribal King",
                2
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)\nWITH T2.Name AS Name, count(T2.Singer_ID) AS count\nRETURN Name,count",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)-[]-(T3:`concert_singer.concert`)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "parsed_sql": {
            "select": {
                "value": "T2.name"
            },
            "from": [
                {
                    "value": "singer_in_concert",
                    "name": "T1",
                    "is_table": true
                },
                {
                    "join": {
                        "name": "T2",
                        "value": "singer",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join": {
                        "name": "T3",
                        "value": "concert",
                        "is_table": true
                    },
                    "on": {
                        "eq": [
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where": {
                "eq": [
                    "T3.year",
                    2014
                ]
            }
        },
        "sql_ans": [
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ],
            [
                "John Nizinik"
            ],
            [
                "Tribal King"
            ],
            [
                "Rose White"
            ]
        ],
        "cypher_query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)-[]-(T3:`concert_singer.concert`)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "cypher_ans": []
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "parsed_sql": {
            "select": [
                {
                    "value": "Citizenship"
                },
                {
                    "value": {
                        "max": "Net_Worth_Millions"
                    }
                }
            ],
            "from": "singer",
            "groupby": {
                "value": "Citizenship"
            }
        },
        "sql_ans": [
            [
                "Australia",
                17.0
            ],
            [
                "Chile",
                17.4
            ],
            [
                "France",
                30.0
            ],
            [
                "Germany",
                14.3
            ],
            [
                "United States",
                28.8
            ]
        ],
        "cypher_query": "MATCH (singer:`singer.singer`)\nWITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship\nRETURN Citizenship,count",
        "cypher_ans": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    }
][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]