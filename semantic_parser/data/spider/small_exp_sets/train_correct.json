[
    {
        "db_id": "department_management",
        "question": "How many heads of the departments are older than 56 ?",
        "cypher_query": "MATCH (head:`department_management.head`)\nWHERE head.age > 56\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "head",
                "age"
            ],
            "Token_Name_Label": "`department_management.head`",
            "Token_Operator": [
                ".",
                ">",
                "*"
            ],
            "Token_Literal_Number_Integer": "56",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "cypher_query": "MATCH (head:`department_management.head`)\nRETURN head.name,head.born_state,head.age\nORDER BY head.age",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "name",
                "ORDER BY"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "head",
                "born_state",
                "age"
            ],
            "Token_Name_Label": "`department_management.head`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "P\u00e1draig Harrington",
                "Connecticut",
                43.0
            ],
            [
                "Stewart Cink",
                "Florida",
                50.0
            ],
            [
                "Dudley Hart",
                "California",
                52.0
            ],
            [
                "Jeff Maggert",
                "Delaware",
                53.0
            ],
            [
                "Nick Faldo",
                "California",
                56.0
            ],
            [
                "Tiger Woods",
                "Alabama",
                67.0
            ],
            [
                "Franklin Langham",
                "Connecticut",
                67.0
            ],
            [
                "Sergio Garc\u00eda",
                "California",
                68.0
            ],
            [
                "K. J. Choi",
                "Alabama",
                69.0
            ],
            [
                "Billy Mayfair",
                "California",
                69.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "List the creation year, name and budget of each department.",
        "cypher_query": "MATCH (department:`department_management.department`)\nRETURN department.Creation,department.Name,department.Budget_in_Billions",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "department",
                "Creation",
                "Budget_in_Billions"
            ],
            "Token_Name_Label": "`department_management.department`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "1789",
                "State",
                9.96
            ],
            [
                "1789",
                "Treasury",
                11.1
            ],
            [
                "1947",
                "Defense",
                439.3
            ],
            [
                "1870",
                "Justice",
                23.4
            ],
            [
                "1849",
                "Interior",
                10.7
            ],
            [
                "1889",
                "Agriculture",
                77.6
            ],
            [
                "1903",
                "Commerce",
                6.2
            ],
            [
                "1913",
                "Labor",
                59.7
            ],
            [
                "1953",
                "Health and Human Services",
                543.2
            ],
            [
                "1965",
                "Housing and Urban Development",
                46.2
            ],
            [
                "1966",
                "Transportation",
                58.0
            ],
            [
                "1977",
                "Energy",
                21.5
            ],
            [
                "1979",
                "Education",
                62.8
            ],
            [
                "1989",
                "Veterans Affairs",
                73.2
            ],
            [
                "2002",
                "Homeland Security",
                44.6
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the maximum and minimum budget of the departments?",
        "cypher_query": "MATCH (department:`department_management.department`)\nRETURN max(department.Budget_in_Billions),min(department.Budget_in_Billions)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "department",
                "Budget_in_Billions"
            ],
            "Token_Name_Label": "`department_management.department`",
            "Token_Name_Function": [
                "max",
                "min"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                543.2,
                6.2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "cypher_query": "MATCH (department:`department_management.department`)\nWHERE 10<=department.Ranking<=15\nRETURN avg(department.Num_Employees)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "department",
                "Ranking",
                "Num_Employees"
            ],
            "Token_Name_Label": "`department_management.department`",
            "Token_Literal_Number_Integer": [
                "10",
                "15"
            ],
            "Token_Operator": [
                "<=",
                "."
            ],
            "Token_Name_Function": "avg"
        },
        "answers": [
            [
                105468.16666666667
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the heads who are born outside the California state?",
        "cypher_query": "MATCH (head:`department_management.head`)\nWHERE head.born_state <> 'California'\nRETURN head.name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "head",
                "born_state"
            ],
            "Token_Name_Label": "`department_management.head`",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_String": "'California'"
        },
        "answers": [
            [
                "Tiger Woods"
            ],
            [
                "K. J. Choi"
            ],
            [
                "Jeff Maggert"
            ],
            [
                "Stewart Cink"
            ],
            [
                "P\u00e1draig Harrington"
            ],
            [
                "Franklin Langham"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "cypher_query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-(T3:`department_management.head`)\nWHERE T3.born_state = 'Alabama'\nRETURN DISTINCT T1.Creation",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "born_state",
                "Creation"
            ],
            "Token_Name_Label": [
                "`department_management.department`",
                "`department_management.management`",
                "`department_management.head`"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Alabama'"
        },
        "answers": [
            [
                "1903"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the states where at least 3 heads were born?",
        "cypher_query": "MATCH (head:`department_management.head`)\nWITH head.born_state AS born_state, count(*) AS count\nWHERE count  >= 3\nRETURN born_state",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "head",
                "born_state",
                "count"
            ],
            "Token_Name_Label": "`department_management.head`",
            "Token_Operator": [
                ".",
                "*",
                ">="
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "California"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "cypher_query": "MATCH (department:`department_management.department`)\nWITH department.Creation AS Creation, count(department.Creation) AS count\nRETURN Creation\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "department",
                "Creation",
                "count"
            ],
            "Token_Name_Label": "`department_management.department`",
            "Token_Operator": ".",
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1789"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "cypher_query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-()\nWHERE T2.temporary_acting = 'Yes'\nRETURN T1.Name,T1.Num_Employees",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "temporary_acting",
                "Num_Employees"
            ],
            "Token_Name_Label": [
                "`department_management.department`",
                "`department_management.management`"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Yes'"
        },
        "answers": [
            [
                "Treasury",
                115897.0
            ],
            [
                "Treasury",
                115897.0
            ],
            [
                "Homeland Security",
                208000.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "How many departments are led by heads who are not mentioned?",
        "cypher_query": "MATCH (department:`department_management.department`)\nWHERE NOT (department:`department_management.department`)-[:`department_management.management`]-()\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": "department",
            "Token_Name_Label": [
                "`department_management.department`",
                "`department_management.management`"
            ],
            "Token_Operator": [
                "NOT",
                "*"
            ],
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "cypher_query": "MATCH ()-[T2:`department_management.management`]-(T1:`department_management.head`)\nWHERE T2.temporary_acting = 'Yes'\nRETURN DISTINCT T1.age",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T2",
                "T1",
                "temporary_acting",
                "age"
            ],
            "Token_Name_Label": [
                "`department_management.management`",
                "`department_management.head`"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Yes'"
        },
        "answers": [
            [
                52.0
            ],
            [
                53.0
            ],
            [
                69.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "cypher_query": "MATCH ()-[T2:`department_management.management`]-(T1:`department_management.department`)\nWITH T1.Department_ID AS Department_ID, count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Department_ID,Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T2",
                "T1",
                "Department_ID",
                "count"
            ],
            "Token_Name_Label": [
                "`department_management.management`",
                "`department_management.department`"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                2,
                "Treasury",
                2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "cypher_query": "MATCH (head:`department_management.head`)\nWHERE head.name =~'.*[H|h]a.*'\nRETURN head.head_ID,head.name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "head",
                "head_ID"
            ],
            "Token_Name_Label": "`department_management.head`",
            "Token_Operator": [
                ".",
                "=~"
            ],
            "Token_Literal_String": "'.*[H|h]a.*'"
        },
        "answers": [
            [
                4,
                "Dudley Hart"
            ],
            [
                9,
                "P\u00e1draig Harrington"
            ],
            [
                10,
                "Franklin Langham"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "How many actors are there?",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "actor",
            "Token_Name_Label": "`musical.actor`",
            "Token_Name_Function": "count",
            "Token_Operator": "*"
        },
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Count the number of actors.",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "actor",
            "Token_Name_Label": "`musical.actor`",
            "Token_Name_Function": "count",
            "Token_Operator": "*"
        },
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the name of actors in ascending alphabetical order.",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Name\nORDER BY actor.Name ASC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "ASC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "actor",
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors, ordered alphabetically?",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Name\nORDER BY actor.Name ASC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "ASC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "actor",
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the characters and duration of actors?",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character,actor.Duration",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "actor",
                "Character",
                "Duration"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character,actor.Duration",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "actor",
                "Character",
                "Duration"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the name of actors whose age is not 20.",
        "cypher_query": "MATCH (actor:`musical.actor`)\nWHERE actor.age <> 20\nRETURN actor.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "actor",
                "age"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_Number_Integer": "20"
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who are not 20 years old?",
        "cypher_query": "MATCH (actor:`musical.actor`)\nWHERE actor.age <> 20\nRETURN actor.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "actor",
                "age"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_Number_Integer": "20"
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the characters of actors in descending order of age?",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character\nORDER BY actor.age DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "actor",
                "Character",
                "age"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the characters for actors, ordered by age descending.",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character\nORDER BY actor.age DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "actor",
                "Character",
                "age"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What is the duration of the oldest actor?",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Duration\nORDER BY actor.age DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "actor",
                "Duration",
                "age"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the duration of the actor with the greatest age.",
        "cypher_query": "MATCH (actor:`musical.actor`)\nRETURN actor.Duration\nORDER BY actor.age DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "actor",
                "Duration",
                "age"
            ],
            "Token_Name_Label": "`musical.actor`",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE musical.Nominee = 'Bob Fosse'\nRETURN musical.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Bob Fosse'"
        },
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE musical.Nominee = 'Bob Fosse'\nRETURN musical.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Bob Fosse'"
        },
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award <> 'Tony Award'\nRETURN DISTINCT musical.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "musical",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_String": "'Tony Award'"
        },
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award <> 'Tony Award'\nRETURN DISTINCT musical.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "musical",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_String": "'Tony Award'"
        },
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of actors and names of musicals they are in.",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name,T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors and the musicals that they are in?",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name,T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'The Phantom of the Opera'"
        },
        "answers": [
            [
                "Tom Oliver"
            ],
            [
                "Ray Meagher"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'The Phantom of the Opera'"
        },
        "answers": [
            [
                "Tom Oliver"
            ],
            [
                "Ray Meagher"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Year"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Year"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH count(T1.Musical_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Musical_ID",
                "count"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH count(T1.Musical_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Musical_ID",
                "count"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals which have at least three actors.",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 3\nRETURN Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "Name",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "count"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">="
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "cypher_query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 3\nRETURN Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "Name",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "count"
            ],
            "Token_Name_Label": [
                "`musical.actor`",
                "`musical.musical`"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">="
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": ".",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "How many musicals has each nominee been nominated for?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": ".",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": ".",
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": ".",
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the most common result of the musicals.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH count(musical.Result) AS count, musical.Result AS Result\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Result",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the most frequent result across all musicals.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH count(musical.Result) AS count, musical.Result AS Result\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Result",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the nominees that have been nominated more than two musicals.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(*) AS count\nWHERE count  > 2\nRETURN Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "2"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated more than two times?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(*) AS count\nWHERE count  > 2\nRETURN Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "musical",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "2"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE NOT (musical:`musical.musical`)-[]-(:`musical.actor`)\nRETURN musical.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": "musical",
            "Token_Name_Label": [
                "`musical.musical`",
                "`musical.actor`"
            ],
            "Token_Operator": [
                "NOT",
                "."
            ]
        },
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have no actors?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE NOT (musical:`musical.musical`)-[]-(:`musical.actor`)\nRETURN musical.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": "musical",
            "Token_Name_Label": [
                "`musical.musical`",
                "`musical.actor`"
            ],
            "Token_Operator": [
                "NOT",
                "."
            ]
        },
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award = 'Tony Award' OR musical.Award = 'Cleavant Derricks'\nRETURN musical.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "musical",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "=",
                "OR"
            ],
            "Token_Literal_String": [
                "'Tony Award'",
                "'Cleavant Derricks'"
            ]
        },
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "cypher_query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award = 'Tony Award' OR musical.Award = 'Cleavant Derricks'\nRETURN musical.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "musical",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "`musical.musical`",
            "Token_Operator": [
                ".",
                "=",
                "OR"
            ],
            "Token_Literal_String": [
                "'Tony Award'",
                "'Cleavant Derricks'"
            ]
        },
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ],
            [
                "Bob Fosse"
            ]
        ]
    }
]