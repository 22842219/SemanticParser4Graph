[
    {
        "db_id": "department_management",
        "question": "How many heads of the departments are older than 56 ?",
        "cypher_query": "MATCH (he:head)\nWHERE he.age > 56\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "he",
                "age"
            ],
            "Token_Name_Label": "head",
            "Token_Operator": [
                ".",
                ">",
                "*"
            ],
            "Token_Literal_Number_Integer": "56",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "cypher_query": "MATCH (he:head)\nRETURN he.name,he.born_state,he.age\nORDER BY he.age",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "name",
                "ORDER BY"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "he",
                "born_state",
                "age"
            ],
            "Token_Name_Label": "head",
            "Token_Operator": "."
        },
        "answers": [
            [
                "P\u00e1draig Harrington",
                "Connecticut",
                43.0
            ],
            [
                "Stewart Cink",
                "Florida",
                50.0
            ],
            [
                "Dudley Hart",
                "California",
                52.0
            ],
            [
                "Jeff Maggert",
                "Delaware",
                53.0
            ],
            [
                "Nick Faldo",
                "California",
                56.0
            ],
            [
                "Tiger Woods",
                "Alabama",
                67.0
            ],
            [
                "Franklin Langham",
                "Connecticut",
                67.0
            ],
            [
                "Sergio Garc\u00eda",
                "California",
                68.0
            ],
            [
                "K. J. Choi",
                "Alabama",
                69.0
            ],
            [
                "Billy Mayfair",
                "California",
                69.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "List the creation year, name and budget of each department.",
        "cypher_query": "MATCH (de:department)\nRETURN de.Creation,de.Name,de.Budget_in_Billions",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "de",
                "Creation",
                "Budget_in_Billions"
            ],
            "Token_Name_Label": "department",
            "Token_Operator": "."
        },
        "answers": [
            [
                "1789",
                "State",
                9.96
            ],
            [
                "1789",
                "Treasury",
                11.1
            ],
            [
                "1947",
                "Defense",
                439.3
            ],
            [
                "1870",
                "Justice",
                23.4
            ],
            [
                "1849",
                "Interior",
                10.7
            ],
            [
                "1889",
                "Agriculture",
                77.6
            ],
            [
                "1903",
                "Commerce",
                6.2
            ],
            [
                "1913",
                "Labor",
                59.7
            ],
            [
                "1953",
                "Health and Human Services",
                543.2
            ],
            [
                "1965",
                "Housing and Urban Development",
                46.2
            ],
            [
                "1966",
                "Transportation",
                58.0
            ],
            [
                "1977",
                "Energy",
                21.5
            ],
            [
                "1979",
                "Education",
                62.8
            ],
            [
                "1989",
                "Veterans Affairs",
                73.2
            ],
            [
                "2002",
                "Homeland Security",
                44.6
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the maximum and minimum budget of the departments?",
        "cypher_query": "MATCH (de:department)\nRETURN max(de.Budget_in_Billions),min(de.Budget_in_Billions)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "de",
                "Budget_in_Billions"
            ],
            "Token_Name_Label": "department",
            "Token_Name_Function": [
                "max",
                "min"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                543.2,
                6.2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "cypher_query": "MATCH (de:department)\nWHERE 10<=de.Ranking<=15\nRETURN avg(de.Num_Employees)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "de",
                "Ranking",
                "Num_Employees"
            ],
            "Token_Name_Label": "department",
            "Token_Literal_Number_Integer": [
                "10",
                "15"
            ],
            "Token_Operator": [
                "<=",
                "."
            ],
            "Token_Name_Function": "avg"
        },
        "answers": [
            [
                105468.16666666667
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the heads who are born outside the California state?",
        "cypher_query": "MATCH (he:head)\nWHERE he.born_state <> 'California'\nRETURN he.name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "he",
                "born_state"
            ],
            "Token_Name_Label": "head",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_String": "'California'"
        },
        "answers": [
            [
                "Tiger Woods"
            ],
            [
                "K. J. Choi"
            ],
            [
                "Jeff Maggert"
            ],
            [
                "Stewart Cink"
            ],
            [
                "P\u00e1draig Harrington"
            ],
            [
                "Franklin Langham"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "cypher_query": "MATCH (T1:department)-[T2:management]-(T3:head)\nWHERE T3.born_state = 'Alabama'\nRETURN DISTINCT T1.Creation",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "born_state",
                "Creation"
            ],
            "Token_Name_Label": [
                "department",
                "management",
                "head"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Alabama'"
        },
        "answers": [
            [
                "1903"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the states where at least 3 heads were born?",
        "cypher_query": "MATCH (he:head)\nWITH count(*) AS count, he.born_state AS born_state\nWHERE count  >= 3\nRETURN born_state",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "he",
                "count",
                "born_state"
            ],
            "Token_Name_Label": "head",
            "Token_Name_Function": "count",
            "Token_Operator": [
                "*",
                ".",
                ">="
            ],
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "California"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "cypher_query": "MATCH (de:department)\nWITH count(de.Creation) AS count, de.Creation AS Creation\nRETURN Creation\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "de",
                "Creation",
                "count"
            ],
            "Token_Name_Label": "department",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1789"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "cypher_query": "MATCH (T1:department)-[T2:management]-()\nWHERE T2.temporary_acting = 'Yes'\nRETURN T1.Name,T1.Num_Employees",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "temporary_acting",
                "Num_Employees"
            ],
            "Token_Name_Label": [
                "department",
                "management"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Yes'"
        },
        "answers": [
            [
                "Treasury",
                115897.0
            ],
            [
                "Homeland Security",
                208000.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "How many acting statuses are there?",
        "cypher_query": "MATCH ()-[ma:management]-()\nRETURN count(DISTINCT ma.temporary_acting)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "ma",
                "temporary_acting"
            ],
            "Token_Name_Label": "management",
            "Token_Name_Function": "count",
            "Token_Operator": [
                "DISTINCT",
                "."
            ]
        },
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "How many departments are led by heads who are not mentioned?",
        "cypher_query": "MATCH (de:department)\nWHERE NOT (de:department)-[:management]-()\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": "de",
            "Token_Name_Label": [
                "department",
                "management"
            ],
            "Token_Operator": [
                "NOT",
                "*"
            ],
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "cypher_query": "MATCH ()-[T2:management]-(T1:head)\nWHERE T2.temporary_acting = 'Yes'\nRETURN DISTINCT T1.age",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T2",
                "T1",
                "temporary_acting",
                "age"
            ],
            "Token_Name_Label": [
                "management",
                "head"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Yes'"
        },
        "answers": [
            [
                52.0
            ],
            [
                53.0
            ],
            [
                69.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "cypher_query": "MATCH ()-[T2:management]-(T1:department)\nWITH T1.Department_ID AS Department_ID, count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Department_ID,Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T2",
                "T1",
                "Department_ID",
                "count"
            ],
            "Token_Name_Label": [
                "management",
                "department"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                2,
                "Treasury",
                2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "cypher_query": "MATCH (he:head)\nWHERE he.name =~'.*[H|h]a.*'\nRETURN he.head_ID,he.name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "he",
                "head_ID"
            ],
            "Token_Name_Label": "head",
            "Token_Operator": [
                ".",
                "=~"
            ],
            "Token_Literal_String": "'.*[H|h]a.*'"
        },
        "answers": [
            [
                4,
                "Dudley Hart"
            ],
            [
                9,
                "P\u00e1draig Harrington"
            ],
            [
                10,
                "Franklin Langham"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "How many actors are there?",
        "cypher_query": "MATCH (ac:actor)\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "ac",
            "Token_Name_Label": "actor",
            "Token_Name_Function": "count",
            "Token_Operator": "*"
        },
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Count the number of actors.",
        "cypher_query": "MATCH (ac:actor)\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "ac",
            "Token_Name_Label": "actor",
            "Token_Name_Function": "count",
            "Token_Operator": "*"
        },
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the name of actors in ascending alphabetical order.",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Name\nORDER BY ac.Name ASC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "ASC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "ac",
            "Token_Name_Label": "actor",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors, ordered alphabetically?",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Name\nORDER BY ac.Name ASC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "ASC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "ac",
            "Token_Name_Label": "actor",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the characters and duration of actors?",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Character,ac.Duration",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "ac",
                "Character",
                "Duration"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Character,ac.Duration",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "ac",
                "Character",
                "Duration"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the name of actors whose age is not 20.",
        "cypher_query": "MATCH (ac:actor)\nWHERE ac.age <> 20\nRETURN ac.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ac",
                "age"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_Number_Integer": "20"
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who are not 20 years old?",
        "cypher_query": "MATCH (ac:actor)\nWHERE ac.age <> 20\nRETURN ac.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ac",
                "age"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_Number_Integer": "20"
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the characters of actors in descending order of age?",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Character\nORDER BY ac.age DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ac",
                "Character",
                "age"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the characters for actors, ordered by age descending.",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Character\nORDER BY ac.age DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ac",
                "Character",
                "age"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What is the duration of the oldest actor?",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Duration\nORDER BY ac.age DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ac",
                "Duration",
                "age"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the duration of the actor with the greatest age.",
        "cypher_query": "MATCH (ac:actor)\nRETURN ac.Duration\nORDER BY ac.age DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ac",
                "Duration",
                "age"
            ],
            "Token_Name_Label": "actor",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "cypher_query": "MATCH (mu:musical)\nWHERE mu.Nominee = 'Bob Fosse'\nRETURN mu.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Bob Fosse'"
        },
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "cypher_query": "MATCH (mu:musical)\nWHERE mu.Nominee = 'Bob Fosse'\nRETURN mu.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Bob Fosse'"
        },
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "cypher_query": "MATCH (mu:musical)\nWHERE mu.Award <> 'Tony Award'\nRETURN DISTINCT mu.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "mu",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_String": "'Tony Award'"
        },
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
        "cypher_query": "MATCH (mu:musical)\nWHERE mu.Award <> 'Tony Award'\nRETURN DISTINCT mu.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "mu",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "<>"
            ],
            "Token_Literal_String": "'Tony Award'"
        },
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of actors and names of musicals they are in.",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nRETURN T1.Name,T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors and the musicals that they are in?",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nRETURN T1.Name,T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'The Phantom of the Opera'"
        },
        "answers": [
            [
                "Tom Oliver"
            ],
            [
                "Ray Meagher"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'The Phantom of the Opera'"
        },
        "answers": [
            [
                "Tom Oliver"
            ],
            [
                "Ray Meagher"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Year"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Year"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nWITH count(T1.Musical_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Musical_ID",
                "count"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nWITH count(T1.Musical_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Musical_ID",
                "count"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals which have at least three actors.",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 3\nRETURN Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "Name",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "count"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">="
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "cypher_query": "MATCH (T1:actor)-[]-(T2:musical)\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 3\nRETURN Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "Name",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "count"
            ],
            "Token_Name_Label": [
                "actor",
                "musical"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">="
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "cypher_query": "MATCH (mu:musical)\nWITH count(mu.Nominee) AS count, mu.Nominee AS Nominee\nRETURN Nominee,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "How many musicals has each nominee been nominated for?",
        "cypher_query": "MATCH (mu:musical)\nWITH count(mu.Nominee) AS count, mu.Nominee AS Nominee\nRETURN Nominee,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "cypher_query": "MATCH (mu:musical)\nWITH count(mu.Nominee) AS count, mu.Nominee AS Nominee\nRETURN Nominee\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "cypher_query": "MATCH (mu:musical)\nWITH count(mu.Nominee) AS count, mu.Nominee AS Nominee\nRETURN Nominee\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the most common result of the musicals.",
        "cypher_query": "MATCH (mu:musical)\nWITH count(mu.Result) AS count, mu.Result AS Result\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Result",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Return the most frequent result across all musicals.",
        "cypher_query": "MATCH (mu:musical)\nWITH count(mu.Result) AS count, mu.Result AS Result\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Result",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the nominees that have been nominated more than two musicals.",
        "cypher_query": "MATCH (mu:musical)\nWITH mu.Nominee AS Nominee, count(*) AS count\nWHERE count  > 2\nRETURN Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "2"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated more than two times?",
        "cypher_query": "MATCH (mu:musical)\nWITH mu.Nominee AS Nominee, count(*) AS count\nWHERE count  > 2\nRETURN Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "mu",
                "Nominee",
                "count"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "2"
        },
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "cypher_query": "MATCH (mu:musical)\nWHERE NOT (mu:musical)-[]-(:actor)\nRETURN mu.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": "mu",
            "Token_Name_Label": [
                "musical",
                "actor"
            ],
            "Token_Operator": [
                "NOT",
                "."
            ]
        },
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have no actors?",
        "cypher_query": "MATCH (mu:musical)\nWHERE NOT (mu:musical)-[]-(:actor)\nRETURN mu.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": "mu",
            "Token_Name_Label": [
                "musical",
                "actor"
            ],
            "Token_Operator": [
                "NOT",
                "."
            ]
        },
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "cypher_query": "MATCH (mu:musical)\nWHERE mu.Award = 'Tony Award' OR mu.Award = 'Cleavant Derricks'\nRETURN mu.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "mu",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "=",
                "OR"
            ],
            "Token_Literal_String": [
                "'Tony Award'",
                "'Cleavant Derricks'"
            ]
        },
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ]
        ]
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "cypher_query": "MATCH (mu:musical)\nWHERE mu.Award = 'Tony Award' OR mu.Award = 'Cleavant Derricks'\nRETURN mu.Nominee",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "mu",
                "Award",
                "Nominee"
            ],
            "Token_Name_Label": "musical",
            "Token_Operator": [
                ".",
                "=",
                "OR"
            ],
            "Token_Literal_String": [
                "'Tony Award'",
                "'Cleavant Derricks'"
            ]
        },
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "cypher_query": "MATCH (T1:Maintenance_Contracts)-[]-(T2:Assets)\nWITH T1.maintenance_contract_id AS maintenance_contract_id, count(T1.maintenance_contract_id) AS count\nRETURN count,maintenance_contract_id",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "maintenance_contract_id",
                "count"
            ],
            "Token_Name_Label": [
                "Maintenance_Contracts",
                "Assets"
            ],
            "Token_Operator": ".",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                2,
                2
            ],
            [
                2,
                6
            ],
            [
                2,
                7
            ],
            [
                2,
                8
            ],
            [
                1,
                10
            ],
            [
                2,
                11
            ],
            [
                1,
                12
            ],
            [
                1,
                13
            ],
            [
                1,
                14
            ],
            [
                1,
                15
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "cypher_query": "MATCH (T1:Third_Party_Companies)-[]-(T2:Assets)\nWITH count(T1.company_id) AS count, T1.company_id AS company_id\nRETURN count,company_id",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "company_id",
                "count"
            ],
            "Token_Name_Label": [
                "Third_Party_Companies",
                "Assets"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                1,
                1
            ],
            [
                3,
                2
            ],
            [
                2,
                5
            ],
            [
                3,
                6
            ],
            [
                1,
                7
            ],
            [
                1,
                8
            ],
            [
                1,
                11
            ],
            [
                1,
                12
            ],
            [
                1,
                13
            ],
            [
                1,
                14
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "cypher_query": "MATCH (T1:Third_Party_Companies)-[]-(T2:Maintenance_Engineers)\nWITH T1.company_id AS company_id, count(*) AS count, T1.company_name AS company_name\nWHERE count  >= 2\nRETURN company_id,company_name \nUNION\nMATCH (T3:Third_Party_Companies)-[]-(T4:Maintenance_Contracts)\nWITH T3.company_name AS company_name, T3.company_id AS company_id, count(*) AS count\nWHERE count  >= 2\nRETURN company_id,company_name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN",
                "UNION"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  ",
                " \n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "company_id",
                "count",
                "company_name",
                "T3",
                "T4"
            ],
            "Token_Name_Label": [
                "Third_Party_Companies",
                "Maintenance_Engineers",
                "Maintenance_Contracts"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">="
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "2"
        },
        "answers": [
            [
                2,
                "McDermott Group"
            ],
            [
                3,
                "Schuppe-Carroll"
            ],
            [
                4,
                "Dooley-Langosh"
            ],
            [
                11,
                "Kuvalis, Boehm and Hettinger"
            ],
            [
                15,
                "Rau, Ullrich and King"
            ],
            [
                13,
                "Greenholt-D'Amore"
            ],
            [
                6,
                "Grimes, Mosciski and Renner"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "cypher_query": "MATCH (T1:Parts)-[]-(T2:Part_Faults)\nWITH T1.part_id AS part_id, T1.part_name AS part_name, count(*) AS count\nWHERE count  > 2\nRETURN part_name,part_id",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "part_id",
                "part_name",
                "count"
            ],
            "Token_Name_Label": [
                "Parts",
                "Part_Faults"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "2"
        },
        "answers": [
            [
                "top",
                1
            ],
            [
                "package",
                3
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "cypher_query": "MATCH (T1:Fault_Log)-[]-(T2:Engineer_Visits)\nWITH count(T1.fault_log_entry_id) AS count, T1.fault_log_entry_id AS fault_log_entry_id\nRETURN count,fault_log_entry_id\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "fault_log_entry_id",
                "count"
            ],
            "Token_Name_Label": [
                "Fault_Log",
                "Engineer_Visits"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                5,
                13
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the distinct last names of all the engineers?",
        "cypher_query": "MATCH (ma:Maintenance_Engineers)\nRETURN DISTINCT ma.last_name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ma",
                "last_name"
            ],
            "Token_Name_Label": "Maintenance_Engineers",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Reinger"
            ],
            [
                "Orn"
            ],
            [
                "Hauck"
            ],
            [
                "Morar"
            ],
            [
                "Grady"
            ],
            [
                "Adams"
            ],
            [
                "Harvey"
            ],
            [
                "Hirthe"
            ],
            [
                "Stamm"
            ],
            [
                "Price"
            ],
            [
                "Kunde"
            ],
            [
                "Simonis"
            ],
            [
                "Hahn"
            ],
            [
                "Goldner"
            ],
            [
                "Streich"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "cypher_query": "MATCH ()-[fa:Fault_Log_Parts]-()\nRETURN DISTINCT fa.fault_status",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "fa",
                "fault_status"
            ],
            "Token_Name_Label": "Fault_Log_Parts",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Reported"
            ],
            [
                "Return"
            ],
            [
                "Fixed"
            ],
            [
                "Waiting"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "cypher_query": "MATCH (ma:Maintenance_Engineers)\nWHERE NOT (ma:Maintenance_Engineers)-[]-(:Engineer_Visits)\nRETURN ma.first_name,ma.last_name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-(",
                ","
            ],
            "Token_Name_Variable": [
                "ma",
                "first_name",
                "last_name"
            ],
            "Token_Name_Label": [
                "Maintenance_Engineers",
                "Engineer_Visits"
            ],
            "Token_Operator": [
                "NOT",
                "."
            ]
        },
        "answers": [
            [
                "Clemens",
                "Orn"
            ],
            [
                "Samanta",
                "Hauck"
            ],
            [
                "Manley",
                "Grady"
            ],
            [
                "Josie",
                "Harvey"
            ],
            [
                "Brian",
                "Stamm"
            ],
            [
                "Weston",
                "Hahn"
            ],
            [
                "Jules",
                "Goldner"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "cypher_query": "MATCH (as:Assets)\nRETURN as.asset_id,as.asset_details,as.asset_make,as.asset_model",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "as",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Label": "Assets",
            "Token_Operator": ".",
            "Token_Name_Variable": [
                "asset_id",
                "asset_details",
                "asset_make",
                "asset_model"
            ]
        },
        "answers": [
            [
                1,
                "dell laptop1",
                "PT",
                "58 ub"
            ],
            [
                2,
                "dell laptop2",
                "IN",
                "35 xt"
            ],
            [
                3,
                "dell laptop3",
                "IT",
                "63 ok"
            ],
            [
                4,
                "dell laptop4",
                "RU",
                "69 uv"
            ],
            [
                5,
                "dell laptop5",
                "DE",
                "90 oq"
            ],
            [
                6,
                "monitor1",
                "CN",
                "91 ub"
            ],
            [
                7,
                "monitor2",
                "CN",
                "27 du"
            ],
            [
                8,
                "monitor3",
                "GB",
                "94 kg"
            ],
            [
                9,
                "machine1",
                "RU",
                "07 yt"
            ],
            [
                10,
                "machine2",
                "FR",
                "20 tl"
            ],
            [
                11,
                "machine3",
                "FR",
                "11 wi"
            ],
            [
                12,
                "machine4",
                "RU",
                "95 vn"
            ],
            [
                13,
                "system1",
                "DE",
                "08 yy"
            ],
            [
                14,
                "system2",
                "IN",
                "66 xm"
            ],
            [
                15,
                "system3",
                "IE",
                "24 ak"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "When was the first asset acquired?",
        "cypher_query": "MATCH (as:Assets)\nRETURN as.asset_acquired_date\nORDER BY as.asset_acquired_date ASC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "as",
                "RETURN",
                "ORDER BY",
                "ASC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Label": "Assets",
            "Token_Operator": ".",
            "Token_Name_Variable": "asset_acquired_date",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "2017-04-16 12:19:25"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "cypher_query": "MATCH (T1:Parts)-[]-(T2:Part_Faults)-[T3:Skills_Required_To_Fix]-()\nWITH count(T1.part_id) AS count, T1.part_name AS part_name, T1.part_id AS part_id\nRETURN part_id,part_name\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "part_id",
                "count",
                "part_name"
            ],
            "Token_Name_Label": [
                "Parts",
                "Part_Faults",
                "Skills_Required_To_Fix"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                1,
                "top"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "cypher_query": "MATCH (T1:Parts)-[]-(T2:Part_Faults)\nWITH count(T1.part_name) AS count, T1.part_name AS part_name\nRETURN part_name\nORDER BY count ASC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "ASC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "part_name",
                "count"
            ],
            "Token_Name_Label": [
                "Parts",
                "Part_Faults"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "middle"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "cypher_query": "MATCH (T1:Fault_Log)-[T2:Fault_Log_Parts]-()\nWITH T1.fault_log_entry_datetime AS fault_log_entry_datetime, T1.fault_description AS fault_description, count(T1.fault_log_entry_id) AS count, T1.fault_log_entry_id AS fault_log_entry_id\nRETURN fault_log_entry_id,fault_description,fault_log_entry_datetime\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "fault_log_entry_datetime",
                "fault_description",
                "fault_log_entry_id",
                "count"
            ],
            "Token_Name_Label": [
                "Fault_Log",
                "Fault_Log_Parts"
            ],
            "Token_Operator": ".",
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                1,
                "system error",
                "2018-03-21 04:25:00"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the distinct asset models?",
        "cypher_query": "MATCH (as:Assets)\nRETURN DISTINCT as.asset_model",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "as",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Label": "Assets",
            "Token_Operator": ".",
            "Token_Name_Variable": "asset_model"
        },
        "answers": [
            [
                "58 ub"
            ],
            [
                "35 xt"
            ],
            [
                "63 ok"
            ],
            [
                "69 uv"
            ],
            [
                "90 oq"
            ],
            [
                "91 ub"
            ],
            [
                "27 du"
            ],
            [
                "94 kg"
            ],
            [
                "07 yt"
            ],
            [
                "20 tl"
            ],
            [
                "11 wi"
            ],
            [
                "95 vn"
            ],
            [
                "08 yy"
            ],
            [
                "66 xm"
            ],
            [
                "24 ak"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "cypher_query": "MATCH (as:Assets)\nRETURN as.asset_make,as.asset_model,as.asset_details\nORDER BY as.asset_disposed_date ASC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "as",
                "RETURN",
                "ORDER BY",
                "ASC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Label": "Assets",
            "Token_Operator": ".",
            "Token_Name_Variable": [
                "asset_make",
                "asset_model",
                "asset_details",
                "asset_disposed_date"
            ]
        },
        "answers": [
            [
                "IE",
                "24 ak",
                "system3"
            ],
            [
                "DE",
                "90 oq",
                "dell laptop5"
            ],
            [
                "RU",
                "95 vn",
                "machine4"
            ],
            [
                "GB",
                "94 kg",
                "monitor3"
            ],
            [
                "FR",
                "20 tl",
                "machine2"
            ],
            [
                "DE",
                "08 yy",
                "system1"
            ],
            [
                "RU",
                "07 yt",
                "machine1"
            ],
            [
                "IT",
                "63 ok",
                "dell laptop3"
            ],
            [
                "CN",
                "91 ub",
                "monitor1"
            ],
            [
                "PT",
                "58 ub",
                "dell laptop1"
            ],
            [
                "RU",
                "69 uv",
                "dell laptop4"
            ],
            [
                "FR",
                "11 wi",
                "machine3"
            ],
            [
                "IN",
                "35 xt",
                "dell laptop2"
            ],
            [
                "CN",
                "27 du",
                "monitor2"
            ],
            [
                "IN",
                "66 xm",
                "system2"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "cypher_query": "MATCH (pa:Parts)\nRETURN pa.part_id,pa.chargeable_amount\nORDER BY pa.chargeable_amount ASC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "ASC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "pa",
                "part_id",
                "chargeable_amount"
            ],
            "Token_Name_Label": "Parts",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                1,
                "4"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "cypher_query": "MATCH (T1:Third_Party_Companies)-[]-(T2:Maintenance_Contracts)\nRETURN T1.company_name\nORDER BY T2.contract_start_date ASC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "ASC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "company_name",
                "contract_start_date"
            ],
            "Token_Name_Label": [
                "Third_Party_Companies",
                "Maintenance_Contracts"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Grimes, Mosciski and Renner"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which gender makes up the majority of the staff?",
        "cypher_query": "MATCH (st:Staff)\nWITH count(st.gender) AS count, st.gender AS gender\nRETURN gender\nORDER BY count DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "st",
                "gender",
                "count"
            ],
            "Token_Name_Label": "Staff",
            "Token_Name_Function": "count",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "1"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "cypher_query": "MATCH (T1:Staff)-[]-(T2:Engineer_Visits)\nWITH count(T1.staff_name) AS count, T1.staff_name AS staff_name\nRETURN staff_name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "staff_name",
                "count"
            ],
            "Token_Name_Label": [
                "Staff",
                "Engineer_Visits"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Berneice",
                2
            ],
            [
                "Edmond",
                3
            ],
            [
                "Rodger",
                1
            ],
            [
                "Kadin",
                4
            ],
            [
                "Christophe",
                1
            ],
            [
                "Bernice",
                2
            ],
            [
                "Oren",
                1
            ],
            [
                "Cyrus",
                1
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which assets did not incur any fault log? List the asset model.",
        "cypher_query": "MATCH (as:Assets)\nWHERE NOT (as:Assets)-[]-(:Fault_Log)\nRETURN as.asset_model",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "as",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Label": [
                "Assets",
                "Fault_Log"
            ],
            "Token_Operator": [
                "NOT",
                "."
            ],
            "Token_Name_Variable": "asset_model"
        },
        "answers": [
            [
                "58 ub"
            ],
            [
                "69 uv"
            ],
            [
                "20 tl"
            ],
            [
                "11 wi"
            ],
            [
                "08 yy"
            ],
            [
                "66 xm"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are names of patients who made an appointment?",
        "cypher_query": "MATCH (T1:Appointment)-[]-(T2:Patient)\nRETURN T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Appointment",
                "Patient"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "John Smith"
            ],
            [
                "Grace Ritchie"
            ],
            [
                "Dennis Doe"
            ],
            [
                "Random J. Patient"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "cypher_query": "MATCH (T1:Appointment)-[]-(T2:Patient)\nRETURN T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Appointment",
                "Patient"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "John Smith"
            ],
            [
                "Grace Ritchie"
            ],
            [
                "Dennis Doe"
            ],
            [
                "Random J. Patient"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "cypher_query": "MATCH (T1:Appointment)-[]-(T2:Patient)\nWITH T2.Phone AS Phone, T2.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name,Phone",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Phone",
                "count"
            ],
            "Token_Name_Label": [
                "Appointment",
                "Patient"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "John Smith",
                "555-0256"
            ],
            [
                "Grace Ritchie",
                "555-0512"
            ],
            [
                "Dennis Doe",
                "555-2048"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "cypher_query": "MATCH (T1:Appointment)-[]-(T2:Patient)\nWITH T2.Phone AS Phone, T2.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name,Phone",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Phone",
                "count"
            ],
            "Token_Name_Label": [
                "Appointment",
                "Patient"
            ],
            "Token_Operator": [
                ".",
                "*",
                ">"
            ],
            "Token_Name_Function": "count",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "John Smith",
                "555-0256"
            ],
            [
                "Grace Ritchie",
                "555-0512"
            ],
            [
                "Dennis Doe",
                "555-2048"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the id of the appointment with the most recent start date?",
        "cypher_query": "MATCH (ap:Appointment)\nRETURN ap.AppointmentID\nORDER BY ap.Start DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "Start",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ap",
                "AppointmentID"
            ],
            "Token_Name_Label": "Appointment",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                86213939
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the appointment that started most recently?",
        "cypher_query": "MATCH (ap:Appointment)\nRETURN ap.AppointmentID\nORDER BY ap.Start DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "Start",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ap",
                "AppointmentID"
            ],
            "Token_Name_Label": "Appointment",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                86213939
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the name of physicians who took some appointment.",
        "cypher_query": "MATCH (T1:Appointment)-[]-(T2:Physician)\nRETURN T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Appointment",
                "Physician"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "John Dorian"
            ],
            [
                "Elliot Reid"
            ],
            [
                "Percival Cox"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of all the physicians who took appointments.",
        "cypher_query": "MATCH (T1:Appointment)-[]-(T2:Physician)\nRETURN T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Appointment",
                "Physician"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "John Dorian"
            ],
            [
                "Elliot Reid"
            ],
            [
                "Percival Cox"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Affiliated_With]-(T3:Department)\nWHERE T2.PrimaryAffiliation = 1\nRETURN T1.Name,T3.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "PrimaryAffiliation"
            ],
            "Token_Name_Label": [
                "Physician",
                "Affiliated_With",
                "Department"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Elliot Reid",
                "General Medicine"
            ],
            [
                "John Dorian",
                "General Medicine"
            ],
            [
                "Keith Dudemeister",
                "General Medicine"
            ],
            [
                "Bob Kelso",
                "General Medicine"
            ],
            [
                "Percival Cox",
                "General Medicine"
            ],
            [
                "Christopher Turk",
                "Surgery"
            ],
            [
                "John Wen",
                "Surgery"
            ],
            [
                "Todd Quinlan",
                "Surgery"
            ],
            [
                "Molly Clock",
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the name and primarily affiliated department name of each physician?",
        "cypher_query": "MATCH (T1:Physician)-[T2:Affiliated_With]-(T3:Department)\nWHERE T2.PrimaryAffiliation = 1\nRETURN T1.Name,T3.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "PrimaryAffiliation"
            ],
            "Token_Name_Label": [
                "Physician",
                "Affiliated_With",
                "Department"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Elliot Reid",
                "General Medicine"
            ],
            [
                "John Dorian",
                "General Medicine"
            ],
            [
                "Keith Dudemeister",
                "General Medicine"
            ],
            [
                "Bob Kelso",
                "General Medicine"
            ],
            [
                "Percival Cox",
                "General Medicine"
            ],
            [
                "Christopher Turk",
                "Surgery"
            ],
            [
                "John Wen",
                "Surgery"
            ],
            [
                "Todd Quinlan",
                "Surgery"
            ],
            [
                "Molly Clock",
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the patient who made the most recent appointment?",
        "cypher_query": "MATCH (T1:Patient)-[]-(T2:Appointment)\nRETURN T1.Name\nORDER BY T2.Start DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "Start",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Patient",
                "Appointment"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of the patient who made the appointment with the most recent start date.",
        "cypher_query": "MATCH (T1:Patient)-[]-(T2:Appointment)\nRETURN T1.Name\nORDER BY T2.Start DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "Start",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Patient",
                "Appointment"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients stay in room 112?",
        "cypher_query": "MATCH (st:Stay)\nWHERE st.Room = 112\nRETURN count(st.Patient)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "st",
                "Room",
                "Patient"
            ],
            "Token_Name_Label": "Stay",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "112",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "cypher_query": "MATCH (st:Stay)\nWHERE st.Room = 112\nRETURN count(st.Patient)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "st",
                "Room",
                "Patient"
            ],
            "Token_Name_Label": "Stay",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "112",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "cypher_query": "MATCH (T1:Patient)-[]-(T3:Physician)-[]-(T2:Prescribes)\nWHERE T3.Name = 'John Dorian'\nRETURN count(T1.SSN)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T3",
                "T2",
                "SSN"
            ],
            "Token_Name_Label": [
                "Patient",
                "Physician",
                "Prescribes"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'John Dorian'",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "cypher_query": "MATCH (T1:Patient)-[]-(T3:Physician)-[]-(T2:Prescribes)\nWHERE T3.Name = 'John Dorian'\nRETURN count(T1.SSN)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T3",
                "T2",
                "SSN"
            ],
            "Token_Name_Label": [
                "Patient",
                "Physician",
                "Prescribes"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'John Dorian'",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who most recently stayed in room 111.",
        "cypher_query": "MATCH (st:Stay)\nWHERE st.Room = 111\nRETURN st.Patient\nORDER BY st.StayStart DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "st",
                "Room",
                "Patient",
                "StayStart"
            ],
            "Token_Name_Label": "Stay",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "111"
        },
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "cypher_query": "MATCH (st:Stay)\nWHERE st.Room = 111\nRETURN st.Patient\nORDER BY st.StayStart DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "st",
                "Room",
                "Patient",
                "StayStart"
            ],
            "Token_Name_Label": "Stay",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "111"
        },
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Patient)\nWITH count(T1.EmployeeID) AS count, T1.Name AS Name\nRETURN Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "EmployeeID",
                "count"
            ],
            "Token_Name_Label": [
                "Physician",
                "Patient"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "John Dorian",
                1
            ],
            [
                "Elliot Reid",
                2
            ],
            [
                "Christopher Turk",
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Patient)\nWITH count(T1.EmployeeID) AS count, T1.Name AS Name\nRETURN Name,count",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "EmployeeID",
                "count"
            ],
            "Token_Name_Label": [
                "Physician",
                "Patient"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": "."
        },
        "answers": [
            [
                "John Dorian",
                1
            ],
            [
                "Elliot Reid",
                2
            ],
            [
                "Christopher Turk",
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Patient)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "count"
            ],
            "Token_Name_Label": [
                "Physician",
                "Patient"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": [
                "*",
                ".",
                ">"
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Patient)\nWITH count(*) AS count, T1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WITH",
                "AS",
                "Name",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  "
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "count"
            ],
            "Token_Name_Label": [
                "Physician",
                "Patient"
            ],
            "Token_Name_Function": "count",
            "Token_Operator": [
                "*",
                ".",
                ">"
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of rooms located on each block floor.",
        "cypher_query": "MATCH (T1:Block) MATCH (T2:Room)\nWHERE T1.BlockFloor = T2.BlockFloor AND T1.BlockCode = T2.BlockCode\nWITH count(T1.BlockFloor) AS count, T1.BlockFloor AS BlockFloor\nRETURN count,BlockFloor",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "BlockFloor",
                "BlockCode",
                "count"
            ],
            "Token_Name_Label": [
                "Block",
                "Room"
            ],
            "Token_Operator": [
                ".",
                "=",
                "AND"
            ],
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                9,
                1
            ],
            [
                9,
                2
            ],
            [
                9,
                3
            ],
            [
                9,
                4
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms does each block floor have?",
        "cypher_query": "MATCH (T1:Block) MATCH (T2:Room)\nWHERE T1.BlockFloor = T2.BlockFloor AND T1.BlockCode = T2.BlockCode\nWITH count(T1.BlockFloor) AS count, T1.BlockFloor AS BlockFloor\nRETURN count,BlockFloor",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "BlockFloor",
                "BlockCode",
                "count"
            ],
            "Token_Name_Label": [
                "Block",
                "Room"
            ],
            "Token_Operator": [
                ".",
                "=",
                "AND"
            ],
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                9,
                1
            ],
            [
                9,
                2
            ],
            [
                9,
                3
            ],
            [
                9,
                4
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of rooms for different block code?",
        "cypher_query": "MATCH (T1:Block) MATCH (T2:Room)\nWHERE T1.BlockFloor = T2.BlockFloor AND T1.BlockCode = T2.BlockCode\nWITH count(T1.BlockCode) AS count, T1.BlockCode AS BlockCode\nRETURN count,BlockCode",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "BlockFloor",
                "BlockCode",
                "count"
            ],
            "Token_Name_Label": [
                "Block",
                "Room"
            ],
            "Token_Operator": [
                ".",
                "=",
                "AND"
            ],
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                12,
                1
            ],
            [
                12,
                2
            ],
            [
                12,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms are located for each block code?",
        "cypher_query": "MATCH (T1:Block) MATCH (T2:Room)\nWHERE T1.BlockFloor = T2.BlockFloor AND T1.BlockCode = T2.BlockCode\nWITH count(T1.BlockCode) AS count, T1.BlockCode AS BlockCode\nRETURN count,BlockCode",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "WITH",
                "AS",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "BlockFloor",
                "BlockCode",
                "count"
            ],
            "Token_Name_Label": [
                "Block",
                "Room"
            ],
            "Token_Operator": [
                ".",
                "=",
                "AND"
            ],
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                12,
                1
            ],
            [
                12,
                2
            ],
            [
                12,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the unique block codes that have available rooms?",
        "cypher_query": "MATCH (ro:Room)\nWHERE ro.Unavailable = 0\nRETURN DISTINCT ro.BlockCode",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ro",
                "Unavailable",
                "BlockCode"
            ],
            "Token_Name_Label": "Room",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "0"
        },
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "cypher_query": "MATCH (ro:Room)\nWHERE ro.Unavailable = 0\nRETURN DISTINCT ro.BlockCode",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ro",
                "Unavailable",
                "BlockCode"
            ],
            "Token_Name_Label": "Room",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "0"
        },
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many different types of rooms are there?",
        "cypher_query": "MATCH (ro:Room)\nRETURN count(DISTINCT ro.RoomType)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ro",
                "RoomType"
            ],
            "Token_Name_Label": "Room",
            "Token_Name_Function": "count",
            "Token_Operator": [
                "DISTINCT",
                "."
            ]
        },
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of distinct room types available.",
        "cypher_query": "MATCH (ro:Room)\nRETURN count(DISTINCT ro.RoomType)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ro",
                "RoomType"
            ],
            "Token_Name_Label": "Room",
            "Token_Name_Function": "count",
            "Token_Operator": [
                "DISTINCT",
                "."
            ]
        },
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Prescribes)-[]-(T3:Medication)\nWHERE T3.Name = 'Thesisin'\nRETURN DISTINCT T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Physician",
                "Prescribes",
                "Medication"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Thesisin'"
        },
        "answers": [
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all the physicians who prescribe Thesisin as medication.",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Prescribes)-[]-(T3:Medication)\nWHERE T3.Name = 'Thesisin'\nRETURN DISTINCT T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN DISTINCT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Physician",
                "Prescribes",
                "Medication"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'Thesisin'"
        },
        "answers": [
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Prescribes)-[]-(T3:Medication)\nWHERE T3.Brand = 'X'\nRETURN DISTINCT T1.Name,T1.Position",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Brand",
                "Position"
            ],
            "Token_Name_Label": [
                "Physician",
                "Prescribes",
                "Medication"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'X'"
        },
        "answers": [
            [
                "John Dorian",
                "Staff Internist"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Prescribes)-[]-(T3:Medication)\nWHERE T3.Brand = 'X'\nRETURN DISTINCT T1.Name,T1.Position",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Brand",
                "Position"
            ],
            "Token_Name_Label": [
                "Physician",
                "Prescribes",
                "Medication"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'X'"
        },
        "answers": [
            [
                "John Dorian",
                "Staff Internist"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "cypher_query": "MATCH (ph:Physician)\nWHERE ph.Position =~'.*[S|s]enior.*'\nRETURN ph.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ph",
                "Position"
            ],
            "Token_Name_Label": "Physician",
            "Token_Operator": [
                ".",
                "=~"
            ],
            "Token_Literal_String": "'.*[S|s]enior.*'"
        },
        "answers": [
            [
                "Percival Cox"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "cypher_query": "MATCH (ph:Physician)\nWHERE ph.Position =~'.*[S|s]enior.*'\nRETURN ph.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "ph",
                "Position"
            ],
            "Token_Name_Label": "Physician",
            "Token_Operator": [
                ".",
                "=~"
            ],
            "Token_Literal_String": "'.*[S|s]enior.*'"
        },
        "answers": [
            [
                "Percival Cox"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "cypher_query": "MATCH (un:Undergoes)\nRETURN un.Patient\nORDER BY un.DateUndergoes\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "un",
                "Patient",
                "DateUndergoes"
            ],
            "Token_Name_Label": "Undergoes",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which patient is undergoing the most recent treatment?",
        "cypher_query": "MATCH (un:Undergoes)\nRETURN un.Patient\nORDER BY un.DateUndergoes\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "ORDER BY",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "un",
                "Patient",
                "DateUndergoes"
            ],
            "Token_Name_Label": "Undergoes",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "cypher_query": "MATCH (T3:Stay)-[]-(T1:Undergoes)-[]-(T2:Patient)\nWHERE T3.Room = 111\nRETURN DISTINCT T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T3",
                "T1",
                "T2",
                "Room"
            ],
            "Token_Name_Label": [
                "Stay",
                "Undergoes",
                "Patient"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "111"
        },
        "answers": [
            [
                "John Smith"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
        "cypher_query": "MATCH (T3:Stay)-[]-(T1:Undergoes)-[]-(T2:Patient)\nWHERE T3.Room = 111\nRETURN DISTINCT T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T3",
                "T1",
                "T2",
                "Room"
            ],
            "Token_Name_Label": [
                "Stay",
                "Undergoes",
                "Patient"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "111"
        },
        "answers": [
            [
                "John Smith"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "cypher_query": "MATCH (nu:Nurse)\nRETURN DISTINCT nu.Name\nORDER BY nu.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name",
                "ORDER BY"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "nu",
            "Token_Name_Label": "Nurse",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "cypher_query": "MATCH (nu:Nurse)\nRETURN DISTINCT nu.Name\nORDER BY nu.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name",
                "ORDER BY"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "nu",
            "Token_Name_Label": "Nurse",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "cypher_query": "MATCH (T1:Undergoes)-[]-(T2:Nurse)\nRETURN DISTINCT T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Undergoes",
                "Nurse"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which nurses are in charge of patients undergoing treatments?",
        "cypher_query": "MATCH (T1:Undergoes)-[]-(T2:Nurse)\nRETURN DISTINCT T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Undergoes",
                "Nurse"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "cypher_query": "MATCH (me:Medication)\nRETURN DISTINCT me.Name\nORDER BY me.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name",
                "ORDER BY"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "me",
            "Token_Name_Label": "Medication",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Awakin"
            ],
            [
                "Crescavitin"
            ],
            [
                "Melioraurin"
            ],
            [
                "Procrastin-X"
            ],
            [
                "Thesisin"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "cypher_query": "MATCH (me:Medication)\nRETURN DISTINCT me.Name\nORDER BY me.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name",
                "ORDER BY"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "me",
            "Token_Name_Label": "Medication",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Awakin"
            ],
            [
                "Crescavitin"
            ],
            [
                "Melioraurin"
            ],
            [
                "Procrastin-X"
            ],
            [
                "Thesisin"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Prescribes)\nRETURN T1.Name\nORDER BY T2.Dose DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Dose"
            ],
            "Token_Name_Label": [
                "Physician",
                "Prescribes"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "John Dorian"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "cypher_query": "MATCH (T1:Physician)-[]-(T2:Prescribes)\nRETURN T1.Name\nORDER BY T2.Dose DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "Dose"
            ],
            "Token_Name_Label": [
                "Physician",
                "Prescribes"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "John Dorian"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "cypher_query": "MATCH ()-[af:Affiliated_With]-()\nWHERE af.PrimaryAffiliation = 1\nRETURN af.Physician,af.Department",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "af",
                "PrimaryAffiliation",
                "Physician",
                "Department"
            ],
            "Token_Name_Label": "Affiliated_With",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                2
            ],
            [
                4,
                1
            ],
            [
                5,
                1
            ],
            [
                6,
                2
            ],
            [
                7,
                2
            ],
            [
                8,
                1
            ],
            [
                9,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "cypher_query": "MATCH ()-[af:Affiliated_With]-()\nWHERE af.PrimaryAffiliation = 1\nRETURN af.Physician,af.Department",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "af",
                "PrimaryAffiliation",
                "Physician",
                "Department"
            ],
            "Token_Name_Label": "Affiliated_With",
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                2
            ],
            [
                4,
                1
            ],
            [
                5,
                1
            ],
            [
                6,
                2
            ],
            [
                7,
                2
            ],
            [
                8,
                1
            ],
            [
                9,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "cypher_query": "MATCH ()-[T1:Affiliated_With]-(T2:Department)\nWHERE T1.PrimaryAffiliation = 1\nRETURN DISTINCT T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "PrimaryAffiliation"
            ],
            "Token_Name_Label": [
                "Affiliated_With",
                "Department"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "General Medicine"
            ],
            [
                "Surgery"
            ],
            [
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "cypher_query": "MATCH ()-[T1:Affiliated_With]-(T2:Department)\nWHERE T1.PrimaryAffiliation = 1\nRETURN DISTINCT T2.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ")-[",
                ":",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "PrimaryAffiliation"
            ],
            "Token_Name_Label": [
                "Affiliated_With",
                "Department"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "General Medicine"
            ],
            [
                "Surgery"
            ],
            [
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
        "cypher_query": "MATCH (on:On_Call)\nWHERE on.BlockFloor = 1 AND on.BlockCode = 1\nRETURN on.Nurse",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "on",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Label": "On_Call",
            "Token_Operator": [
                ".",
                "=",
                "AND"
            ],
            "Token_Name_Variable": [
                "BlockFloor",
                "BlockCode",
                "Nurse"
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                101
            ],
            [
                103
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
        "cypher_query": "MATCH (on:On_Call)\nWHERE on.BlockFloor = 1 AND on.BlockCode = 1\nRETURN on.Nurse",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "on",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Label": "On_Call",
            "Token_Operator": [
                ".",
                "=",
                "AND"
            ],
            "Token_Name_Variable": [
                "BlockFloor",
                "BlockCode",
                "Nurse"
            ],
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                101
            ],
            [
                103
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "cypher_query": "MATCH (pr:Procedures)\nRETURN max(pr.Cost),min(pr.Cost),avg(pr.Cost)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost"
            ],
            "Token_Name_Label": "Procedures",
            "Token_Name_Function": [
                "max",
                "min",
                "avg"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                10000.0,
                25.0,
                4324.857142857143
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "cypher_query": "MATCH (pr:Procedures)\nRETURN max(pr.Cost),min(pr.Cost),avg(pr.Cost)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost"
            ],
            "Token_Name_Label": "Procedures",
            "Token_Name_Function": [
                "max",
                "min",
                "avg"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                10000.0,
                25.0,
                4324.857142857143
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "cypher_query": "MATCH (pr:Procedures)\nRETURN pr.Name,pr.Cost\nORDER BY pr.Cost DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost"
            ],
            "Token_Name_Label": "Procedures",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Complete Walletectomy",
                10000.0
            ],
            [
                "Reversible Pancreomyoplasty",
                5600.0
            ],
            [
                "Obfuscated Dermogastrotomy",
                4899.0
            ],
            [
                "Folded Demiophtalmectomy",
                4500.0
            ],
            [
                "Obtuse Pyloric Recombobulation",
                3750.0
            ],
            [
                "Reverse Rhinopodoplasty",
                1500.0
            ],
            [
                "Follicular Demiectomy",
                25.0
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Sort the list of names and costs of all procedures in the descending order of cost.",
        "cypher_query": "MATCH (pr:Procedures)\nRETURN pr.Name,pr.Cost\nORDER BY pr.Cost DESC",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ","
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost"
            ],
            "Token_Name_Label": "Procedures",
            "Token_Operator": "."
        },
        "answers": [
            [
                "Complete Walletectomy",
                10000.0
            ],
            [
                "Reversible Pancreomyoplasty",
                5600.0
            ],
            [
                "Obfuscated Dermogastrotomy",
                4899.0
            ],
            [
                "Folded Demiophtalmectomy",
                4500.0
            ],
            [
                "Obtuse Pyloric Recombobulation",
                3750.0
            ],
            [
                "Reverse Rhinopodoplasty",
                1500.0
            ],
            [
                "Follicular Demiectomy",
                25.0
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the three most expensive procedures.",
        "cypher_query": "MATCH (pr:Procedures)\nRETURN pr.Name\nORDER BY pr.Cost\nLIMIT 3",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost"
            ],
            "Token_Name_Label": "Procedures",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "Follicular Demiectomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the three most costly procedures?",
        "cypher_query": "MATCH (pr:Procedures)\nRETURN pr.Name\nORDER BY pr.Cost\nLIMIT 3",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost"
            ],
            "Token_Name_Label": "Procedures",
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "3"
        },
        "answers": [
            [
                "Follicular Demiectomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T3.Cost > 5000\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Cost"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": [
                ".",
                ">"
            ],
            "Token_Literal_Number_Integer": "5000"
        },
        "answers": [
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Christopher Turk"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T3.Cost > 5000\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Cost"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": [
                ".",
                ">"
            ],
            "Token_Literal_Number_Integer": "5000"
        },
        "answers": [
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Christopher Turk"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who was trained in the most expensive procedure?",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nRETURN T1.Name\nORDER BY T3.Cost DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Cost"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "John Wen"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nRETURN T1.Name\nORDER BY T3.Cost DESC\nLIMIT 1",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN",
                "Name",
                "ORDER BY",
                "DESC",
                "LIMIT"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Cost"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": ".",
            "Token_Literal_Number_Integer": "1"
        },
        "answers": [
            [
                "John Wen"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T1.Name = 'John Wen'\nRETURN avg(T3.Cost)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Cost"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'John Wen'",
            "Token_Name_Function": "avg"
        },
        "answers": [
            [
                4324.857142857143
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Compute the mean price of procedures physician John Wen was trained in.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T1.Name = 'John Wen'\nRETURN avg(T3.Cost)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3",
                "Cost"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'John Wen'",
            "Token_Name_Function": "avg"
        },
        "answers": [
            [
                4324.857142857143
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'John Wen'"
        },
        "answers": [
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Follicular Demiectomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of procedures physician John Wen was trained in?",
        "cypher_query": "MATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Physician",
                "Trained_In",
                "Procedures"
            ],
            "Token_Operator": [
                ".",
                "="
            ],
            "Token_Literal_String": "'John Wen'"
        },
        "answers": [
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Follicular Demiectomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "cypher_query": "MATCH (pr:Procedures)\nWHERE pr.Cost > 1000\nRETURN pr.Name  AS name \nUNION\nMATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name  AS name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name",
                "AS",
                "name",
                "UNION"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  ",
                " \n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost",
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Procedures",
                "Physician",
                "Trained_In"
            ],
            "Token_Operator": [
                ".",
                ">",
                "="
            ],
            "Token_Literal_Number_Integer": "1000",
            "Token_Literal_String": "'John Wen'"
        },
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "cypher_query": "MATCH (pr:Procedures)\nWHERE pr.Cost > 1000\nRETURN pr.Name  AS name \nUNION\nMATCH (T1:Physician)-[T2:Trained_In]-(T3:Procedures)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name  AS name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN",
                "Name",
                "AS",
                "name",
                "UNION"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n",
                "  ",
                " \n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-("
            ],
            "Token_Name_Variable": [
                "pr",
                "Cost",
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Procedures",
                "Physician",
                "Trained_In"
            ],
            "Token_Operator": [
                ".",
                ">",
                "="
            ],
            "Token_Literal_Number_Integer": "1000",
            "Token_Literal_String": "'John Wen'"
        },
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Affiliated_With]-(T3:Department)\nWHERE T3.Name = 'Surgery' OR T3.Name = 'Psychiatry'\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Physician",
                "Affiliated_With",
                "Department"
            ],
            "Token_Operator": [
                ".",
                "=",
                "OR"
            ],
            "Token_Literal_String": [
                "'Surgery'",
                "'Psychiatry'"
            ]
        },
        "answers": [
            [
                "Christopher Turk"
            ],
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "cypher_query": "MATCH (T1:Physician)-[T2:Affiliated_With]-(T3:Department)\nWHERE T3.Name = 'Surgery' OR T3.Name = 'Psychiatry'\nRETURN T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "Name",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2",
                "T3"
            ],
            "Token_Name_Label": [
                "Physician",
                "Affiliated_With",
                "Department"
            ],
            "Token_Operator": [
                ".",
                "=",
                "OR"
            ],
            "Token_Literal_String": [
                "'Surgery'",
                "'Psychiatry'"
            ]
        },
        "answers": [
            [
                "Christopher Turk"
            ],
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "cypher_query": "MATCH (pa:Patient)\nWHERE NOT (pa:Patient)-[]-(:Prescribes)-[]-(:Medication { Name : 'Procrastin-X' })\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-(",
                "{",
                "}"
            ],
            "Token_Name_Variable": [
                "pa",
                "Name"
            ],
            "Token_Name_Label": [
                "Patient",
                "Prescribes",
                "Medication"
            ],
            "Token_Operator": [
                "NOT",
                "*"
            ],
            "Token_Literal_String": "'Procrastin-X'",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients are not using Procrastin-X as medication?",
        "cypher_query": "MATCH (pa:Patient)\nWHERE NOT (pa:Patient)-[]-(:Prescribes)-[]-(:Medication { Name : 'Procrastin-X' })\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "WHERE",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")",
                ")-[",
                "]-(",
                "{",
                "}"
            ],
            "Token_Name_Variable": [
                "pa",
                "Name"
            ],
            "Token_Name_Label": [
                "Patient",
                "Prescribes",
                "Medication"
            ],
            "Token_Operator": [
                "NOT",
                "*"
            ],
            "Token_Literal_String": "'Procrastin-X'",
            "Token_Name_Function": "count"
        },
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "How many appointments are there?",
        "cypher_query": "MATCH (ap:Appointment)\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "ap",
            "Token_Name_Label": "Appointment",
            "Token_Name_Function": "count",
            "Token_Operator": "*"
        },
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Count how many appointments have been made in total.",
        "cypher_query": "MATCH (ap:Appointment)\nRETURN count(*)",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")"
            ],
            "Token_Name_Variable": "ap",
            "Token_Name_Label": "Appointment",
            "Token_Name_Function": "count",
            "Token_Operator": "*"
        },
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are on call.",
        "cypher_query": "MATCH (T1:Nurse)-[]-(T2:On_Call)\nRETURN DISTINCT T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Nurse",
                "On_Call"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "question": "What are the distinct names of nurses on call?",
        "cypher_query": "MATCH (T1:Nurse)-[]-(T2:On_Call)\nRETURN DISTINCT T1.Name",
        "parsed_cpypher": {
            "Token_Keyword": [
                "MATCH",
                "RETURN DISTINCT",
                "Name"
            ],
            "Token_Text_Whitespace": [
                " ",
                "\n"
            ],
            "Token_Punctuation": [
                "(",
                ":",
                ")-[",
                "]-(",
                ")"
            ],
            "Token_Name_Variable": [
                "T1",
                "T2"
            ],
            "Token_Name_Label": [
                "Nurse",
                "On_Call"
            ],
            "Token_Operator": "."
        },
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    }
]